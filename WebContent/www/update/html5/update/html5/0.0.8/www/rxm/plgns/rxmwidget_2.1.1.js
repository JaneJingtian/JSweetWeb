/*
 * require.js配置
 */
var isapp = typeof rxm_request == 'undefined' ? false : true;
var rxm_cfgPathStringDefine = {
    rxm: {
        SearchBlock: 'RxmSearchBlock',
        PopMenu: 'RxmPopMenu',
        PageBase: 'RxmPageBase',
        AppTool: 'RxmAppTool',
        MobileWdgt: 'RxmMobileWdgt',
        DesktopWdgt: 'RxmDesktopWdgt',
        CmdMgr: 'RxmCmdMgr',
        RouterMgr: 'RxmRouterMgr',
        Download: 'RxmDownload',
        DownloadA: 'RxmDownloadA',
        FileUploader: 'RxmFileUploader',
        FormUploader: 'RxmFormUploader',
        FileInfo: 'RxmFileInfo',
        ActionSheet: 'RxmActionSheet',
        Audio: 'RxmAudio',
        Camera: 'RxmCamera',
        Contact: 'RxmContact',
        Control: 'RxmControl',
        DataBaseMgr: 'RxmDataBaseMgr',
        Device: 'RxmDevice',
        NativeDialog: 'RxmNativeDialog',
        Loaction: 'RxmLoaction',
        OpenFile: 'RxmOpenFile',
        Phone: 'RxmPhone',
        Scanner: 'RxmScanner',
        Video: 'RxmDisplayVideo',
        NativeFile: 'RxmFile',
        SliderIconView: 'RxmSliderIconView',
        Message: 'RxmMessage',
        MessageListener: 'RxmMessageListener',
        MobileGrid: 'RxmMobileGrid',
        RxmGrid: 'RxmGrid',
        IconList: 'RxmIconList',
        Slider: 'RxmSlider',
        SingleImage: 'RxmSingleImage',
        BufferGrid: 'RxmBufferGrid',
        Util: 'RxmUtil',
        InputSelect: 'RxmInputSelect',
        Typeahead: 'RxmTypeahead',
        LayoutForm: 'RxmLayoutForm',
        Search: "RxmSearch",
        SearchGrid: "RxmSearchGrid",
        Tree: 'RxmTree',
        SlidebarStack: 'RxmSlidebar',
        SlidePanel: 'RxmSlidePanel',
        ModalPanel: 'RxmModalPanel',
        Speech: 'RxmSpeech',
        ArtTemplate: "RxmArtTemplate",
        Image: 'RxmImage',
        Tab: 'RxmTab',
        InputSearch: "RxmInputSearch",
        ComboTree: "RxmComboTree",
        Combo: "RxmCombo",
        RxmLRLayout: "RxmLRLayout",
    }
};
var rxm_cfgPathDefine = {
    baseUrl: getServer() + '/',
    paths: {
        // 基础模块配置
        'Bootstrap': 'www/rxm/bootstrap/js/bootstrap.min',
        'JQuery.validate': 'www/rxm/jquery/plugins/validate/jquery.validate.min',
        'JQuery.validate.extra': 'www/rxm/jquery/plugins/validate/additional-methods',
        'JQuery.validate.message': 'www/rxm/jquery/plugins/validate/localization/messages_zh',
        'JQuery.validate.defaults': 'www/rxm/jquery/plugins/validate/defaults',
        'JQuery.pubsub': 'www/rxm/jquery/plugins/pubsub/pubsub',
        'ZTree': 'www/rxm/jquery/plugins/zTree/js/jquery.ztree.all-3.5.min',
        "ZTreeExhide": "www/rxm/jquery/plugins/zTree/js/jquery.ztree.exhide-3.5",
        'OrmLocalZTreeDir': 'www/rxm/util/localZTree/localZTree',
        'WebUploader': 'static/original/modules/webuploader/webuploader.min',
        'Date': 'www/rxm/bootstrap/plugins/datetimepicker/js/bootstrap-datetimepicker.min',
        'DateCN': 'www/rxm/bootstrap/plugins/datetimepicker/js/datetimepicker.cn',
        'ClockPicker': 'www/rxm/bootstrap/plugins/clockpicker/js/bootstrap-clockpicker.min',
        /* 第三方模块文件夹 */
        'pdf': 'www/rxm/pdfjs/pdf',
        'pdfviewer': 'www/rxm/pdfjs/pdf_viewer',
        // "MCScrollbarDir": "www/rxm/jquery/plugins/mCustomScrollbar",
        /* CSS文件路径映射 */
        'BootstrapCss': 'www/rxm/bootstrap/css/bootstrap.min',
        'ZTreeCss': 'www/rxm/jquery/plugins/zTree/css/zTreeStyle/csTreeStyle',
        'DateCss': 'www/rxm/bootstrap/plugins/datetimepicker/css/datetimepicker.min',
        'FontAwesome': 'www/rxm/Font-Awesome/css/font-awesome',
        'WebUploaderCss': 'static/original/modules/webuploader/css/webuploader',
        /* 静态模块路径配置 */
        'RxmGlobalDir': 'www/rxm/global',
        'RxmModuleDir': 'www/rxm',
        'RxmWidgetDir': 'www/rxm/widget',
        // art模板目录
        'RxmTemplateDir': 'www/rxm/widget/rxmtemplate',
        'RxmNativeDir': 'www/rxm/core/app/native',
        // require  config 路径
        'RxmConfigDir': 'www/config',
        // 保留了 08-09
        'OriginalConfigDir': 'www/rxm/global/originalConfig',
        'OrmFileUpDownDir': 'www/rxm/widget/fileUploader',
        'RxmStaticModuleDir': 'static/original/modules',
        'RxmStaticDir': 'static',
        'RxmFrameBase': "static/original/modules/jquery/framebase",
        'OriginalCustomScrollbarCss': 'static/original/modules/jquery/plugins/mCustomScrollbar/jquery.mCustomScrollbar.min',
        'OriginalCustomScrollbarjs': 'static/original/modules/jquery/plugins/mCustomScrollbar/jquery.mCustomScrollbar.concat.min',
        // 编辑状态下的路径设置  保留 08-09
        'SomPageIDEDir': 'static/rxmdk/somIDE/pageIDE'
    },
    waitSeconds: 0,
    shim: {
        'DateCN': ['Date']
    },
    map: {
        '*': {
            'css': 'www/rxm/requirejs/plugin/require-css/css.min',
            'text': 'www/rxm/requirejs/plugin/h5',
            'h5': 'www/rxm/requirejs/plugin/h5'
        }
    }
};
/**路径在这里定义 */
rxm_cfgPathDefine.paths[rxm_cfgPathStringDefine.rxm.ArtTemplate] = 'www/rxm/tencent/template-web',
    require.config(rxm_cfgPathDefine);
/**@typedef  {rxm_cfgPathStringDefine}  rxm.cfgPath */
require.rxm = rxm_cfgPathStringDefine.rxm;

define("RxmDialogNoModal", ["require", "exports", "RxmArtTemplate", "RxmModalPanel", "text!RxmWidgetDir/rxmtemplate/rxmDialog.html", "RxmAppTool"], function (require, exports, ArtTemplate, modelPanel, rxm_dlg_tmplt, appTool) {
    "use strict";
    var _dlgInfo = {
        alert: {
            tid: 'rxm_alert_tmplt',
            panelCls: 'rxm-alert-background'
        },
        dialog: {
            tid: 'rxm_dialog_tmplt',
            panelCls: 'rxm-dialog-background'
        },
        confirm: {
            tid: 'rxm_confirm_tmplt',
            panelCls: 'rxm-confirm-background'
        },
        loading: {
            tid: 'rxm_loading_tmplt',
            panelCls: ''
        },
        toast: {
            tid: 'rxm_loading_tmplt',
        }
    };
    var rxm_dlg_cmd_ok = 'rxm_dlg_cmd_ok';
    var rxm_dlg_cmd_cancel = 'rxm_dlg_cmd_cancel';
    /**获取模板 */
    function getRegText(id) {
        !id && (id = 'rxm_dialog_tmplt');
        var regText = rxm_dlg_tmplt;
        var reg = new RegExp('<template\\s*id\\s*=\\s*"' + id + '">[\\s|\\S|\\r\\n]*?<\/template>', 'g');
        var ret = reg.exec(regText);
        reg = /<div[\s|\S|\r\n]*<\/div>/;
        ret = reg.exec(ret[0]);
        return ret;
    }
    // var appTool = require(require.rxm.AppTool)
    var ThisObj = appTool.thisObj;
    var ClsFactory = function (config) {
        var _dlgtype = config.dlgType || 'alert';
        var _panelid = appTool.unid(7);
        !config.id && (config.id = appTool.unid(7));
        var _id;
        if (_id = ThisObj(config.id)) {
            return _id;
        }
        _id = config.id;
        var RxmDialogNoModel = /** @class */ (function () {
            function RxmDialogNoModel(config) {
                this.show = this.modal;
            }
            RxmDialogNoModel.prototype.modal = function () {
                var regText = getRegText(_dlgInfo[_dlgtype].tid);
                if (regText && regText.length > 0) {
                    var rend = ArtTemplate.compile(regText[0]);
                    this.modelpanel = modelPanel({ id: _panelid, cls: _dlgInfo[_dlgtype].panelCls });
                    this.modelpanel.render(rend({ data: config }));
                    //隐藏按钮 add by wanghuan 2019-03-18
                    if (typeof config.showBtn != 'undefined' && config.showBtn == false) {
                        $('[rxmcmdid="rxm_dlg_cmd_ok"]').parent().empty();
                    }
                    else {
                        $('[rxmcmdid="rxm_dlg_cmd_ok"]').focus();
                    }
                    var me = this;
                    //设置按钮的点击事件
                    $('#' + _id).tap('[rxmcmdid]', function (e) {
                        e.stopPropagation();
                        e.preventDefault();
                        var cmdid = $(e.currentTarget).attr('rxmcmdid');
                        //需要带有msgType 否则消息不会激发 modify by wanghuan
                        cmdid = $(cmdid).rxmTriggerCmd({ id: _id, sayTo: 'self', msgType: cmdid });
                        if (cmdid != false) {
                            me.close();
                        }
                    });
                }
            };
            RxmDialogNoModel.prototype.bindTapOkBtn = function (args) {
                args.id = _id;
                $('rxm_dlg_cmd_ok').rxmBindCmd(args);
            };
            RxmDialogNoModel.prototype.bindTapCancelBtn = function (args) {
                args.id = _id;
                $('rxm_dlg_cmd_cancel').rxmBindCmd(args);
            };
            RxmDialogNoModel.prototype.bindTapBackGroundPanel = function (args) {
                args.id = _panelid;
                $('rxm_dlg_cmd_backpanel').rxmBindCmd(args);
            };
            RxmDialogNoModel.prototype.setTitle = function (title) {
            };
            RxmDialogNoModel.prototype.setBody = function (body) {
                //设置dialog的内容
                $('.rxm-dlg-content').append(body);
            };
            RxmDialogNoModel.prototype.close = function (a) {
                this.modelpanel.close();
            };
            RxmDialogNoModel.prototype.setFoot = function (buttons, defaultClose) {
                if ($.isArray(buttons)) {
                    var html = '';
                    for (var i = 0; i < buttons.length; i++) {
                        var tmp = buttons[i];
                        var cmdid = tmp.rxmcmdid;
                        html += "<button rxmcmdid='" + cmdid + "'>" + tmp.btnText + "</button>";
                        var arg = {
                            id: _id,
                            callback: tmp.callback
                        };
                        //绑定按钮的回调函数
                        $(cmdid).rxmBindCmd(arg);
                    }
                    //添加扩展按钮
                    $('.rxm-dlg-content').siblings('.rxm-dlg-foot').find('.rxm-cmd-btnbar').append(html);
                }
            };
            return RxmDialogNoModel;
        }());
        return new RxmDialogNoModel(config);
    };
    return ClsFactory;
});

define("RxmModalPanel", ["require", "exports"], function (require, exports) {
    "use strict";
    ///<amd-module name='RxmModalPanel'/>
    var clsFactory = function (cfg) {
        var rqr = window;
        /*slientpanel  代表 唯一的弹出背板，背板是全局的，但是仍然采用了 new 多个对象的写法 */
        var RxmSPHtml = '<div id="{{id}}" class="rxm-modal-panel" style="z-index:{{zindex}}"></div>';
        var rxmSPcls = 'rxm-modal-panel';
        var clsdef = {
            rxmPath: 'RxmModalPanel',
            clsName: 'rxm-modal-panel',
            juryFn: ' RxmModalPanel'
        };
        var msgName = {
            tap: 'rxm_dlg_cmd_backpanel'
        };
        var toolapp = rqr.require("RxmAppTool");
        /**获得tree对象本身，这么做是为了防止内存泄露 以前都是放在链表中或者 thisObj */
        var soleThisObj = toolapp.thisObj;
        /**@type {Object.<string,HTMLElement>} */
        var allObjClosed;
        /**@type  {Number} */
        var curIndex;
        /** */
        var allObjRenderedSet;
        /*全部的私有函数 */
        /**
         *
         * @param {String} id
         * @param {String} templateId
         * @returns {HTMLElement}
         */
        var getRenderObjFromTemplate = function (id, templateId) {
            /**@type {HTMLElement} */
            var ret = allObjClosed[id] || function () { }();
            return ret;
        };
        /**获取最高的z-index值
         * @returns {{maxIndex:Number,maxEle:HTMLElement}}
         */
        var zindex = function () {
            /**@type  {HTMLElement} */
            var ele;
            /**@type  Number */
            var maxIndex = 1045;
            var maxEle;
            ///判断有没有菜单，菜单之上就不能产生panel了
            var jqSilent = $('.' + clsdef.clsName);
            for (var i = 0; i < jqSilent.length; i++) {
                ele = jqSilent[i];
                if ((0 + ele.style['z-index']) > maxIndex) {
                    maxIndex = ele.style['z-index'];
                    maxEle = ele;
                }
            }
            return { maxIndex: maxIndex, maxEle: maxEle };
        };
        /**点击在slient 区域内 */
        var tapBind = function (e, data) {
            var ev = event;
            ev.stopPropagation();
            ev.preventDefault();
            var id = e.data.id;
            var tmp;
            (tmp = e.target) && (tmp = tmp.id);
            if (tmp != id) {
                return;
            }
            $('rxm_dlg_cmd_backpanel').rxmTriggerCmd({ id: id, sayTo: 'self' });
        };
        /**
         * 点击在区域slient panel 之外的区域
         * @param {mouseEvent} e
        */
        var _ontouchEnd = function (e, data) {
            console.info(e.target);
        };
        if (!cfg.id) {
            console.error('需要id');
        }
        /**@type {String} */
        var _id;
        if (_id = soleThisObj(cfg.id))
            return _id;
        _id = cfg.id;
        /**父亲dom
         * @type {rxm.jqueryobj}
         */
        var _parentDom = $(cfg.parentDom || document.body);
        var RxmModalPanellmpl = /** @class */ (function () {
            function RxmModalPanellmpl() {
            }
            /**
             * @returns  {HTMLElement}
             */
            RxmModalPanellmpl.prototype.attrHmlEle = function () {
                return document.getElementById(_id);
            };
            RxmModalPanellmpl.prototype.render = function (html) {
                var jqThis = $('#' + _id);
                html && (jqThis.append(html));
                jqThis.css({ visibility: 'visible' });
            };
            /**
             * close  pannel and remain  the object rendered
             */
            RxmModalPanellmpl.prototype.close = function () {
                this.destory();
            };
            /**
             * destory  pannel  and  destory  the object rendered
             * @param {String} _id
             */
            RxmModalPanellmpl.prototype.destory = function () {
                $('#' + _id).data(clsdef.rxmPath, undefined);
                $('#' + _id).remove();
            };
            /**绑定点击事件 */
            RxmModalPanellmpl.prototype.bindTapCmd = function (args, scope) {
                args.id = _id;
                $('rxm_dlg_cmd_backpanel').rxmBindCmd(args);
            };
            return RxmModalPanellmpl;
        }());
        /**@type  {Number} */
        var vIndex;
        vIndex = zindex();
        vIndex = vIndex.maxIndex + 1;
        var rxmSPHtml = RxmSPHtml.replace('{{id}}', _id);
        rxmSPHtml = rxmSPHtml.replace('{{zindex}}', vIndex);
        var jqEle = $(rxmSPHtml);
        cfg.cls && jqEle.addClass(cfg.cls);
        jqEle.prependTo(_parentDom);
        //因为过去每次id 都不同，所以既没有出现事件回调被重复激发
        $('#' + _id).tap({ id: _id }, tapBind);
        return new RxmModalPanellmpl();
    };
    return clsFactory;
});

/**
*modified  by wangyong  2017-09-7
*对侧边栏sliderbar和 对话框dialog 相关的应用进行封装
*/
define("RxmUtil", ["require", "exports", "RxmSlidebar", "RxmDialogNoModal", "RxmNativeDialog", "RxmAppTool"], function (require, exports, Slidebar, RxmDialogNoModel, RxmNativeDialog, appTool) {
    "use strict";
    !cssOrm.default.ormUtil && (cssOrm.default.ormUtil = {});
    !cssOrm.default.ormUtil.slidebar && (cssOrm.default.ormUtil.slidebar = {});
    !cssOrm.default.ormUtil.slidebar.position && (cssOrm.default.ormUtil.slidebar.position = { float: 'right' });
    !cssOrm.default.ormUtil.slidebar.mode && (cssOrm.default.ormUtil.slidebar.mode = 'slidebar'); // window,iframe;
    !cssOrm.on && (cssOrm.on = function (option) {
        /// <summary>加载命令响应函数</summary>
        /// <param  name="option"  value=" cssArgs.cssOrm.on"></param>
        if (typeof option.callback === 'undefined')
            return;
        var type = option.msgType + (option.id ? '_' + option.id : '');
        if (option.one) {
            $(document).off(type);
            $(document).one(type, option.data, option.callback);
        }
        else {
            $(document).on(type, option.data, option.callback);
        }
    });
    !cssOrm.trigger && (cssOrm.trigger = function (type, id, data) {
        var d = id;
        if (!(typeof id === 'string' || id instanceof String)) {
            data = id;
            d = '';
        }
        type = type + (d.length > 0 ? ('_' + d) : '');
        $(document).trigger(type, data);
    });
    var rxmUtil = /** @class */ (function () {
        function rxmUtil() {
        }
        rxmUtil.prototype.alert = function (param, okCallback, modal) {
            var temParam;
            if (typeof param === 'string') {
                var tmp = param;
                param = {
                    content: tmp,
                    modal: modal
                };
            }
            temParam = $.extend(true, {}, cssOrm.default.confirm, param);
            //okCallback=okCallback||param.callback
            if (temParam.modal == 0) {
                RxmNativeDialog.alert(param);
            }
            else {
                temParam.okBtnText = temParam.okBtnText || temParam.btnTitle || '确定';
                temParam.dlgType = "alert";
                temParam.posCls = temParam.posCls || 'rxm-dlg-xs-center';
                var dialog = RxmDialogNoModel(temParam);
                dialog.bindTapOkBtn({ callback: okCallback });
                dialog.modal();
            }
        };
        /**
         * 用法：require([require.rxm.Util],function(u){u.confirm("确认提交？",function(){},function(){})})
         * @param
         * { title: "标题" ,content: "确定对话框~~",
              okBT: "确定" ,    //确定按钮标题
              cancelBT: "取消" ,    //取消按钮标题
              okCb: function(){}, //确定回调函数
              cancelCb: function(){} //取消回调函数
        };
         */
        rxmUtil.prototype.confirm = function (param, okCallback, cancelCallback, modal) {
            var temParam;
            if (typeof param === 'string') {
                var tmp = param;
                param = $.extend(true, {}, {
                    content: tmp,
                    modal: modal
                });
            }
            temParam = $.extend(true, {}, cssOrm.default.confirm, param);
            okCallback = okCallback || param.okCb || function () { console.warn("dlg_default"); };
            cancelCallback = cancelCallback || param.cancelCb || function () { console.warn("dlg_default"); };
            if (temParam.modal == 0) {
                RxmNativeDialog.alert(param);
            }
            else {
                temParam.okBtnText = temParam.okBtnText || temParam.okBT || "确定";
                temParam.cancelBtnText = temParam.cancelBtnText || temParam.cancelBT || '取消';
                temParam.dlgType = "confirm";
                temParam.posCls = temParam.posCls || 'rxm-dlg-xs-center';
                var dialog = RxmDialogNoModel(temParam);
                dialog.bindTapOkBtn({ callback: okCallback });
                dialog.bindTapCancelBtn({ callback: cancelCallback });
                dialog.modal();
            }
        };
        ;
        /**
       * @param {rxm.page.loading} config
       */
        rxmUtil.prototype.loading = function (config) {
            var cfg = config;
            cfg.dlgType = "loading";
            !cfg.text && (config.text = '正在加载……');
            var dialog = RxmDialogNoModel(cfg);
            return dialog;
        };
        /**
         * config = {
         *   setting : {},                   //dialogSetting
         *   template : templateURL,         //dialogBodyTemplate
         *   afterLoad : function(dialog){},   //afterDialogLoaded callback
         * }
         */
        rxmUtil.prototype.contentDialog = function (cnfg, okCallback, cancelCallback) {
            //目前定义还不正确，需要改进
            var config = $.extend({
                cache: false,
                dialogSize: 'modal-lg',
                dlgType: 'dialog',
                modal: 'hide',
                posCls: 'rxm-dlg-xs-center',
                showBtn: true,
                title: '提示'
            }, cnfg);
            //确认按钮的回调函数
            okCallback = okCallback || config.okCb || function () { console.warn("dlg_default"); };
            //取消按钮的回调函数
            cancelCallback = cancelCallback || config.cancelCb || function () { console.warn("dlg_default"); };
            //确认按钮的文字
            config.okBtnText = config.okBtnText || config.okBT || '确定';
            //取消按钮的文字
            config.cancelBtnText = config.cancelBtnText || config.cancelBT || '取消';
            var dialog;
            if (typeof (config.body) == "string") {
                dialog = RxmDialogNoModel(config);
                dialog.show();
                if (config.buttons) { //存在扩展的按钮
                    $.each(config.buttons, function (index, item) {
                        item.close = typeof item.close !== 'undefined' ? item.close : true;
                    });
                    //显示扩展按钮
                    dialog.setFoot(config.buttons, false);
                }
                //绑定默认的确认按钮、取消按钮被点击的回调函数
                dialog.bindTapOkBtn({ callback: okCallback });
                dialog.bindTapCancelBtn({ callback: cancelCallback });
                //设置dialog的内容
                dialog.setBody(config.body);
                typeof config.afterLoad == "function" && config.afterLoad.call(null);
            }
            else {
                var template = void 0;
                dialog = RxmDialogNoModel(config);
                dialog.show();
                if (config.buttons) { //存在扩展的按钮
                    $.each(config.buttons, function (index, item) {
                        item.close = typeof item.close !== 'undefined' ? item.close : true;
                    });
                    //显示扩展按钮
                    dialog.setFoot(config.buttons, false);
                }
                //绑定默认的确认按钮、取消按钮被点击的回调函数
                dialog.bindTapOkBtn({ callback: okCallback });
                dialog.bindTapCancelBtn({ callback: cancelCallback });
                //设置dialog的内容
                dialog.setBody(template);
                typeof config.afterLoad == "function" && config.afterLoad.call(null);
            }
            return dialog;
        };
        ;
        /**
         * 弹出侧边编辑栏组件
         */
        rxmUtil.prototype.slidebar = function (Router, arg) {
            var args = arg;
            var router = Router;
            //将默认改为10 2019-6-27
            router.pageType = Router.pageType || '10';
            if (appTool.isAppOpen()) { // 移动
                var ret = new Slidebar(router, args);
                if (!args || !args.notRender) {
                    ret.render();
                }
                return ret;
            }
            else {
                args = args || {};
                args.mode = args.mode || cssOrm.default.ormUtil.slidebar.mode;
                //args.position = arg.position || cssOrm.default.ormUtil.slidebar.position
                appTool.isMobileSimulator() && (args._isMblSmltr = true) && (args.isRxmdk = appTool.isRxmdk());
                switch (args.mode) {
                    case 'slidebar':
                        {
                            var widget = window;
                            router.sponsorWindow = window;
                            cssOrm.trigger('slidebarBegin', '', { config: router, args: args });
                            if (args.afterClose) {
                                cssOrm.on({ msgType: 'slidebarReturn', data: args, id: '', one: true, callback: args.afterClose });
                                args.afterClose = undefined;
                            }
                            return Slidebar.createSlidebar(router, args);
                        }
                        ;
                        break;
                    case 'window':
                        {
                            var windowId = args.windowId ? args.windowId : appTool.unid(7);
                            var path = router.pageType == '10' || router.pageType == '12' ? router.pageUrl : 'resoft/x/oindex';
                            var feature = args.windowFeature;
                            var win = window.open(getServer() + '/' + path, windowId, feature, true);
                            win.onload = function () {
                                win.postMessage({
                                    msgName: 'orm_init_args',
                                    router: router,
                                    args: args
                                }, '*');
                            };
                        }
                        ;
                        break;
                    case 'subiframe':
                        {
                            var win = document.getElementById(args.subIframeId);
                            var path = getServer() + '/resoft/x/oindex';
                            (router.pageType == '10' || router.pageType == '12') && (path = router.pageUrl);
                            win.src = path;
                            win.onload = function () {
                                win.contentWindow.postMessage({
                                    msgName: 'orm_init_args',
                                    router: router,
                                    args: args
                                }, '*');
                            };
                        }
                        break;
                } // end  switch
            }
        };
        /**
         * 组织人员组件初始化
         */
        rxmUtil.prototype.OrgSelect = function (cfg) {
            var configdef = {
                multi: true,
                titleBarBgColor: "#00a0f8",
                titleBarFontCololr: "#ffffff",
                selectedFontColor: "#00a0f8",
                saveBtnBgColor: "#00a0f8",
                saveBtnFontColor: "#ffffff",
                tagType: ["dept", "user", "role", "roleMember", "gw"],
                imgSrc: "www/rxm/widget/org/views/selected-img.png",
                hideNode: {},
                rootNode: {},
                data: {},
                callback: function (data) {
                    console.log(data);
                }
            };
            var config = $.extend(false, configdef, cfg);
            // this.callback=this.config.callback
            // this.config.callback=undefined
            // //SelectOrg
            // var _this = this;
            var loadPageA = {
                //页面id 必填
                pageId: "rxmSelectOrg",
                //页面名称
                pageName: "人员组织选择",
                //页面序号
                pageOrder: "0",
                pageType: "10",
                //页面控制  必填
                pageCtrlUrl: "www/rxm/widget/org/addOrg",
                //页面描述
                pageDesc: "人员组织选择",
                //页面路由地址  必填
                pageRouter: "rxmSelectOrg",
                //页面地址  必填
                pageUrl: "www/rxm/widget/org/views/addOrg.html",
                //打开方式
                pageOpen: "_blank"
            };
            ///var page = require(require.rxm.PageBase)
            var callbackFn = config.callback;
            delete config.callback;
            this.slidebar(loadPageA, {
                title: "侧边栏",
                data: config,
                titleColor: config.titleBarFontCololr,
                titleBarBg: config.titleBarBgColor,
                hiddenTitleBar: true,
                hiddenBackBtn: false,
                afterClose: function (evt, args) {
                    callbackFn && callbackFn(args);
                }
            });
        };
        ;
        /**
         * rxm_dialog.prompt
         */
        rxmUtil.prototype.prompt = function (args) {
            if (typeof args === 'object') {
                if (args.title == undefined) {
                    args.title = cssOrm.default.utilPrompt.title;
                }
                if (args.btnok == undefined) {
                    args.btnok = cssOrm.default.utilPrompt.btnok;
                }
                if (args.btncancel == undefined) {
                    args.btncancel = cssOrm.default.utilPrompt.btncancel;
                }
                if (args.text == undefined) {
                    args.text = cssOrm.default.utilPrompt.text;
                }
                RxmNativeDialog.prompt(args);
            }
        };
        return rxmUtil;
    }());
    return new rxmUtil();
});

define("RxmModuleLoginDir", ["require", "exports", "RxmDevice", "RxmRsa", "RxmMessage", "JQuery.validate", "RxmAppTool", "RxmUtil", "RxmRouterMgr", "RxmPageBase"], function (require, exports, device, rsa, rxmMessage, validate, appTool, util, RxmRouterMgr, rxmpage) {
    "use strict";
    var dollar = $;
    dollar.validator.setDefaults({
        errorElement: 'span',
        highlight: function (target) {
            var fg = $(target).closest('.login-item'); //.closest获取最近的祖先元素
            //直接是输入框时，修改输入框的边框样式，比如table中的输入框验证
            fg.addClass('has-error');
        },
        success: function (message) {
            var fg = message.closest('.login-item');
            fg.length && fg.removeClass('has-error');
            message.remove();
        }
    });
    //监听focus事件
    $(".login_item").on("focusin", function () {
        $(this).addClass("has_focus");
    });
    $(".login_item").on("focusout", function () {
        $(this).removeClass("has_focus");
    });
    //配置validate
    var _isRegister;
    var _rsaPublicExponent;
    var _rsaPublicModulus;
    var _selectKeyIndex;
    //成员变量
    //登录名录入框选择器
    var inputLoginNameSelector = "#pd_web_login_name";
    //密码录入框选择器
    var inputPwdSelector = "#pd_web_pwd";
    //激活码录入框选择器
    var inputRegisterCode = "#pd_web_registerCode";
    //验证码录入框选择器
    var inputCaptchaSelector = "#pd_web_captcha";
    //记住密码录入框选择器
    var inputRememberPsdSelector = "#pd_web_check_pwd";
    //记住用户登录名录入框选择器
    var inputRememberLoginNameSelector = "#pd_web_check_login_name";
    //自动登录录入框选择器
    var inputAutoLoginSelector = "#pd_web_check_autologin";
    //提交按钮
    var btnSubmitSelector = '#pd_web_btn_submit';
    var formSelector = "#pd_web_login_form";
    var imgCaptchaSelector = "#pd_web_captcha_img";
    var captchaWidth = 112;
    var captchaHeight = 40;
    var _captchaUrl = "";
    var _tabsLength = 0;
    var _curFocus = 0;
    var _enterSubmit = true;
    var validator = undefined;
    var _beginUrl = "/resoft/x/login/roomuInit";
    var _chckPwdUrl = "/resoft/x/login/roomuChk";
    var _submitData;
    var _onfocus = function (evt) {
        ///<summary>焦点事件</summary>
        _curFocus = parseInt($(evt.target).attr("tabindex"));
        if (_curFocus > _tabsLength - 1 || _curFocus < 0) {
            _curFocus = 0;
        }
        _enterSubmit = true; //可以回车提交
    };
    var _initFocus = function () {
        ///<summary>初始化焦点 </summary>
        var s = formSelector + " " + ":input,button";
        var inputs = $(s);
        inputs.focus($.proxy(this, _onfocus));
        for (var i = 0; i < inputs.length; i++) {
            var it = inputs[i];
            if ($(it).val().length == 0) {
                $(it).focus();
                _curFocus = i;
                break;
            }
        }
    };
    //设备信息回调
    var _fDevice = function (e, deviceData) {
        //将设备信息保存在sessionStorage中
        sessionStorage.setItem("odid", deviceData.ODID);
        sessionStorage.setItem("phoneNum", deviceData.MOBILE);
        sessionStorage.setItem("macAddress", deviceData.MAC_ADDRESS);
        sessionStorage.setItem("deviceType", deviceData.MODEL);
        sessionStorage.setItem("os", deviceData.OS);
        sessionStorage.setItem("windowsize", deviceData.WINDOWSIZE);
        sessionStorage.setItem("manufacturer", deviceData.MANUFACTURER);
        var deviceInfo = {
            "odid": deviceData.ODID,
            "phoneNum": deviceData.MOBILE,
            "macAddress": deviceData.MAC_ADDRESS,
            "deviceType": deviceData.MODEL,
            "os": deviceData.OS,
            "windowsize": deviceData.WINDOWSIZE,
            "manufacturer": deviceData.MANUFACTURER
        };
        if (e.data != null) {
            e.data(deviceInfo);
        }
    };
    var onfetchInfoBeforeLoginSuccess = function (d) {
    };
    var onfetchInfoBeforeLoginError = function (d) {
        var param = {
            modal: 1,
            title: "提示",
            content: cssOrm.default.prompt.loginError,
            okBT: "重试",
            cancelBT: "取消",
            okCb: function () {
                rxm_page.logout(1);
            },
            cancelCb: function () { } //取消回调函数
        };
        util.confirm(param);
        // util.alert(cssOrm.default.prompt.loginError);
    };
    var fetchInfoBeforeLogin = function () {
        ///登录之前取 rsa 公钥等信息。
        if (typeof _rsaPublicExponent === "undefined") {
            var fAjax = function (deviceInfo) {
                var beginurl = _beginUrl;
                if (_beginUrl.indexOf("/") != 0) {
                    beginurl = "/" + _beginUrl;
                }
                $.ajax({
                    url: getServer() + beginurl,
                    data: deviceInfo,
                    timeout: 10000,
                    global: false,
                    success: function (d) {
                        var isRegister = d.data.deviceActivateTag;
                        var selectKeyIndex = d.data.selectKeyIndex;
                        if (isRegister == false) { //需要进行注册验证
                            $("#registerDiv").css("display", "");
                        }
                        else { //不需要进行验证
                            $("#registerDiv").css("display", "none");
                        }
                        _isRegister = isRegister;
                        _rsaPublicExponent = d.data.publicExponent;
                        _rsaPublicModulus = d.data.publicModulus;
                        _selectKeyIndex = selectKeyIndex;
                        if (d.RememberUser) { //记住用户名
                            d.usercode;
                        }
                        //将密钥信息保存在localStorage中
                        localStorage.setItem("publicExponent", _rsaPublicExponent);
                        localStorage.setItem("publicModulus", _rsaPublicModulus);
                        localStorage.setItem("selectKeyIndex", _selectKeyIndex);
                        //预留函数，准备为重写
                        onfetchInfoBeforeLoginSuccess(d);
                    },
                    error: function (d, reason, error) {
                        onfetchInfoBeforeLoginError(d);
                    }
                });
            };
            device && device.getDeviceInfo({ callback: _fDevice, data: fAjax });
        }
    };
    var _initTabindex = function () {
        ///<summary>初始化tab键顺序 </summary>
        var s = formSelector + " " + ":input,button";
        var inputs = $(s);
        for (var i = 0; i < inputs.length; i++) {
            var it = inputs[i];
            $(it).attr("tabindex", i + 1);
            _tabsLength++;
        }
    };
    var onRefreshCaptcha = function () {
        ///<summary>校验码刷新事件</summary>
        ///String.valueOf(random());
        var s = Math.round(Math.random() * 10000).toString();
        s = _captchaUrl + "&r=" + s;
        if (captchaHeight > 0 && captchaWidth > 0)
            s += "&width=" + captchaWidth.toString() + "&height=" + captchaHeight.toString();
        $(imgCaptchaSelector).attr("src", s);
        $(inputCaptchaSelector).val("");
    };
    var onUserCodeChanged = function (evt) {
        $("#pd_web_pwd").val("");
        $("#pd_web_check_pwd").removeAttr("checked");
    };
    //没用
    var _fetchAppVersion = function () {
        $.ajax({
            url: getServer() + "/resoft/x/version/getNewVersion",
            type: "post",
            data: {},
            success: function (result) {
                // var item = eval("(" + result + ")");
                var href = result.data;
                if ((href != null) && (href != "")) {
                    $("#versionDownBtn").attr("href", getServer() + href);
                }
            }
        });
    };
    var _deviceInfo = function (data) {
        var _this = this;
        var fChk = function (_data) {
            var isRegister = _isRegister;
            var rsaKey = rsa.getKeyPair(_rsaPublicExponent, "", _rsaPublicModulus);
            var _data = _submitData || {};
            $(btnSubmitSelector).html("请求中……").addClass("disabled");
            _data.isRegister = rsa.encryptedString(rsaKey, isRegister.toString());
            _data.password = rsa.encryptedString(rsaKey, $(inputPwdSelector).val());
            _data.selectKeyIndex = _selectKeyIndex;
            _data.name = $(inputLoginNameSelector).val();
            _data.code = "";
            _data.rememberUser = "";
            if (isRegister == false) { //需要进行验证
                //获取注册码
                _data.registerCode = rsa.encryptedString(rsaKey, $(inputRegisterCode).val());
            }
            else { //不需要进行验证
                //do nothing
            }
            //设备信息 
            _data.odid = sessionStorage.getItem("odid");
            _data.phoneNum = sessionStorage.getItem("phoneNum");
            _data.macAddress = sessionStorage.getItem("macAddress");
            _data.deviceType = sessionStorage.getItem("deviceType");
            _data.os = sessionStorage.getItem("os");
            _data.windowsize = sessionStorage.getItem("windowsize");
            _data.manufacturer = sessionStorage.getItem("manufacturer");
            var svr = _chckPwdUrl;
            if (_chckPwdUrl.indexOf("/") != 0) {
                svr = "/" + _chckPwdUrl;
            }
            $.ajax({
                global: false,
                url: getServer() + svr,
                data: _data,
                success: $.proxy(_this.onPostCheckPwdSuccess, _this),
                error: $.proxy(_this.onPostCheckPwdError, _this)
            });
        };
        device && device.getDeviceInfo({ callback: _fDevice, data: fChk });
    };
    var RxmLoginImpl = /** @class */ (function () {
        function RxmLoginImpl() {
            ///没用到，只是保留
            this.fetchInfoBeforeLogin = fetchInfoBeforeLogin;
        }
        RxmLoginImpl.prototype.init = function () {
            ///<summary>初始化函数 </summary>
            fetchInfoBeforeLogin();
            _initTabindex();
            this.initValidate();
            $(btnSubmitSelector).unbind();
            $(btnSubmitSelector).tap($.proxy(this.onLoginSubmit, this));
            $("#pd_web_login_name").change($.proxy(onUserCodeChanged, this));
        };
        ;
        RxmLoginImpl.prototype.initValidate = function () {
            ///<summary>初始化校验参数 </summary>
            validator = $(formSelector).validate({
                rules: {
                    pd_web_login_name: "required",
                    pd_web_pwd: "required",
                    pd_web_captcha: "required"
                },
                messages: {
                    pd_web_login_name: "请填写登录名",
                    pd_web_pwd: "请填写密码",
                    pd_web_captcha: "请填写验证码"
                },
                errorPlacement: $.proxy(this.onValidatePlacement, this),
                Onubmit: false,
                onfocusout: false,
                onkeyup: false,
                onclick: false
            });
        };
        ;
        RxmLoginImpl.prototype._validateEach = function () {
            var s = formSelector + " input," + formSelector + " select";
            var inputs = $(s);
            var b = true;
            var bFirstFinded = false;
            for (var i = 0; i < inputs.length; i++) {
                var it = inputs[i];
                b = validator.element(it);
                if (!b && !bFirstFinded) {
                    $(it).focus();
                    bFirstFinded = true;
                }
            }
            return !bFirstFinded;
        };
        RxmLoginImpl.prototype.onValidatePlacement = function (error, element) {
            $(element).closest(".login-item").find(".error").append(error);
        };
        RxmLoginImpl.prototype.parseData = function (args) {
            ///<param  name="args" type="String"></param>
            var r = args.split(">|<");
            if (r.length == 2) {
                localStorage._t_n = r[0];
                localStorage._u_s = r[1];
            }
        };
        RxmLoginImpl.prototype.onPostCheckPwdSuccess = function (data) {
            var auth = RxmRouterMgr;
            if (device) { //手机app登录
                var widget = rxmpage;
                var message = rxmMessage;
                if (data.success) {
                    //var  auth=cssOrm.obj.objOrmPageAuth();
                    this.parseData(data.data);
                    if (typeof message !== "undefined") {
                        var tags = [];
                        tags.push(appTool.getUserID());
                        message.setTags(tags); //推送标签为用户id
                    }
                    if (typeof rxm_count !== "undefined") {
                        rxm_count.setUserId(appTool.getUserID()); //统计日志
                    }
                    if (typeof widget !== "undefined") {
                        widget.setLoginStatus('1', '1');
                    } //改成0，0
                    auth.load();
                    $(btnSubmitSelector).html("验证通过");
                }
                else {
                    util.alert(cssOrm.default.prompt.userError);
                    //alert("用户名或密码错误！");//你们自己 写一下，密码错误的提示
                    //this.onRefreshCaptcha();
                    $(btnSubmitSelector).html("登录").removeClass("disabled");
                    _enterSubmit = true;
                }
            }
            else { //手机模拟器
                auth.load();
            }
        };
        ;
        RxmLoginImpl.prototype.onPostCheckPwdError = function (data) {
            $(btnSubmitSelector).html("请求异常").removeClass("disabled");
            _enterSubmit = true;
        };
        ;
        //监听登录按钮点击事件
        RxmLoginImpl.prototype.onLoginSubmit = function () {
            if (_enterSubmit) {
                if (this._validateEach()) {
                    ///添加设备信息，登录信息验证
                    _deviceInfo.call(this);
                }
                ;
            }
        };
        ;
        RxmLoginImpl.prototype.checkPwd = function (data) {
            _deviceInfo.call(this, data);
        };
        /**从表单获取用户名、密码等
         *override函数
        */
        RxmLoginImpl.prototype.getFormVal = function () {
            var ret = {
                name: '',
                password: '',
                rememberUser: ''
            };
            ret.password = $(inputPwdSelector).val();
            ret.name = $(inputLoginNameSelector).val();
            return ret;
        };
        //设置_chckPwdUrl
        RxmLoginImpl.prototype.setChckPwdUrl = function (url) {
            _chckPwdUrl = url;
        };
        //设置_beginUrl
        RxmLoginImpl.prototype.setBeginUrl = function (url) {
            _beginUrl = url;
        };
        //设置_enterSubmit
        RxmLoginImpl.prototype.setEnterSubmit = function (flag) {
            _enterSubmit = flag;
        };
        return RxmLoginImpl;
    }());
    ;
    return new RxmLoginImpl();
});

///<amd-module name='RxmAppTool'/>
define("RxmAppTool", ["require", "exports"], function (require, exports) {
    "use strict";
    var RxmAppToolImpl = /** @class */ (function () {
        function RxmAppToolImpl() {
            this.getServer = getServer;
        }
        /**
         * 序列化表单元素为JSON对象（兼容工作流项目组）
         * @param form          Form表单id或表单jquery DOM对象
         * @returns {{}}
         */
        RxmAppToolImpl.prototype.serialize = function (form) {
            var $form = (typeof (form) == "string" ? $("#" + form) : form);
            var dataArray = $form.serializeArray(), result = {};
            $(dataArray).each(function () {
                if (result[this.name]) {
                    result[this.name].push(this.value);
                }
                else {
                    var element = $form.find("[name='" + this.name + "']")[0];
                    var type = (element.type || element.nodeName).toLowerCase();
                    result[this.name] = (/^(select-multiple|checkbox)$/i).test(type) ? [this.value] : this.value;
                }
            });
            return result;
        };
        ;
        /**
         * 设置表单值（兼容工作流项目组）
         * @param form     Form表单id或表单jquery DOM对象
         * @param data     json对象，多选时为数组
         */
        RxmAppToolImpl.prototype.deserialize = function (form, data) {
            var rcheck = /^(?:radio|checkbox)$/i, rselect = /^(?:option|select-one|select-multiple)$/i, rvalue = /^(?:button|color|date|datetime|datetime-local|email|hidden|month|number|password|range|reset|search|submit|tel|text|textarea|time|url|week)$/i;
            var $form = (typeof (form) == "string" ? $("#" + form) : form);
            //得到所有表单元素
            function getElements(elements) {
                return elements.map(function () {
                    return this.elements ? jQuery.makeArray(this.elements) : this;
                }).filter(":input:not(:disabled)").get();
            }
            //把表单元素转为json对象
            function elementsToJson(elements) {
                var current, elementsByName = {};
                jQuery.each(elements, function (i, element) {
                    current = elementsByName[element.name];
                    elementsByName[element.name] = current === undefined ? element :
                        (jQuery.isArray(current) ? current.concat(element) : [current, element]);
                });
                return elementsByName;
            }
            var elementsJson = elementsToJson(getElements($form));
            for (var key in data) {
                var val = data[key];
                var dataArr = [];
                if ($.isArray(val)) {
                    for (var i = 0, v; v = val[i++];) {
                        dataArr.push({ name: key, value: v });
                    }
                }
                else {
                    dataArr.push({ name: key, value: val });
                }
                for (var m = 0, vObj; vObj = dataArr[m++];) {
                    var element;
                    //如果表单中无元素则跳过
                    if (!(element = elementsJson[vObj.name])) {
                        continue;
                    }
                    var type = element.length ? element[0] : element;
                    type = (type.type || type.nodeName).toLowerCase();
                    var property = null;
                    if (rvalue.test(type)) {
                        element.value = (typeof (vObj.value) == "undefined" || vObj.value == null) ? "" : vObj.value;
                    }
                    else if (rcheck.test(type)) {
                        property = "checked";
                    }
                    else if (rselect.test(type)) {
                        property = "selected";
                    }
                    //设置选中
                    if (property) {
                        for (var n = 0, e; e = element[n++];) {
                            if (e.value == vObj.value) {
                                e[property] = true;
                            }
                        }
                    }
                }
            }
        };
        // 得到home路径
        RxmAppToolImpl.prototype.getHomeUrl = function (l) {
            /// <summary>get home  path</summary>
            /// <param>local path</param>
            /// <returns type="String"></returns>
            var home = '/www/pages/home.html';
            if (this.isLocalLoad()) {
                home = 'www/pages/home.html';
            }
            l = l || '';
            return home + l;
        };
        RxmAppToolImpl.prototype.getJumpUrl = function (l) {
            /// <summary>get home  path</summary>
            /// <param>local path</param>
            /// <returns type="String"></returns>
            var jump = '/www/pages/jumpPage.html';
            if (this.isLocalLoad()) {
                jump = 'www/pages/jumpPage.html';
            }
            l = l || '';
            return jump + l;
        };
        // 得到actionid
        RxmAppToolImpl.prototype.getActionId = function () {
            return cssOrm._global_.__ormglobal.actionId;
        };
        // 得到app传进来的参数
        RxmAppToolImpl.prototype.getAppArgs = function () {
            return cssOrm._global_.__ormglobal.args;
        };
        RxmAppToolImpl.prototype.getWidgetInitData = function () {
            var ret = {};
            var _g = cssOrm._global_.__ormglobal;
            _g.args && _g.args.data && (ret = _g.args.data);
            return ret;
        };
        RxmAppToolImpl.prototype.isJump = function () {
            return (!!cssOrm._global_.__ormglobal.args) && (!!cssOrm._global_.__ormglobal.args._jump);
        };
        // 本地加载
        RxmAppToolImpl.prototype.isLocalLoad = function () {
            return cssOrm._global_.__ormglobal.isLocalLoad;
        };
        // 是否是app打开的程序
        RxmAppToolImpl.prototype.isAppOpen = function () {
            return cssOrm._global_.__ormglobal.isAppOpen;
        };
        RxmAppToolImpl.prototype.isDesktopOpen = function () {
            /// <summary>桌面系统打开 </summary>
            // 这个函数不是返回手机的真实像素，而是 放大了的，iphone 6plus 414 实际上要高的多
            return (window.screen.width >= 1024);
        };
        RxmAppToolImpl.prototype.isMobileOpen = function () {
            return !this.isDesktopOpen();
        };
        RxmAppToolImpl.prototype.getUpdateUrl = function () {
            var r = cssOrm._global_.__ormglobal.url;
            if (!r) {
                r = window.location.protocol + '//' + window.location.host;
            }
            else if (r.lastIndexOf('/') === r.length - 1) {
                r = r.substr(0, r.length - 1);
            }
            return r;
        };
        RxmAppToolImpl.prototype.getHostUrl = function () {
            return window.location.protocol + '//' + window.location.host + getServer();
        };
        RxmAppToolImpl.prototype.isAndriod = function () {
            /// <summary>判断是不是android</summary>
            return navigator.userAgent.toLowerCase().indexOf('android') != -1;
        };
        RxmAppToolImpl.prototype.isIOS = function (flatform) {
            /// <summary>判断是不是IOS</summary>
            /// <param  name="flatform" type="String">移动平台种类 iPad iPhone 等</param>
            /// <returns  type="Boolean"></returns>
            var names = ['ipad', 'iphone', 'ipod', 'ios']; // basic functionality such as swipe, pinch, rotate, tap should work on every mobile safari, e.g. GalaxyTab
            if (typeof flatform !== 'undefined') {
                names = [];
                names.push(flatform);
            }
            var _i;
            for (_i = 0; _i < names.length; _i++) {
                if (navigator.userAgent.toLowerCase().indexOf(names[_i]) !== -1) {
                    return true;
                }
            }
            ;
            return false;
        };
        RxmAppToolImpl.prototype.isRxmdk = function () {
            return cssOrm._global_.__ormglobal.isRxmdk;
        };
        /**在编辑器状态 */
        RxmAppToolImpl.prototype.isInEditor = function () {
            var r;
            (r = parseInt(cssOrm._global_.__ormglobal.isRxmdk)) && (r = (r % 10 == 1));
            return r;
        };
        /**在编辑器状态 */
        RxmAppToolImpl.prototype.isInRun = function () {
            var r = cssOrm._global_.__ormglobal.isRxmdk;
            r && (r = (r % 10 != 1));
            return r;
        };
        RxmAppToolImpl.prototype.isMobileSimulator = function () {
            var r = cssOrm._global_.__ormglobal.isRxmdk;
            if (r) {
                return (r = r / 10 % 10 == 1);
            }
            return r;
        };
        // WdgtInstance (value: { _cfg: { id: string | number; }; }) {
        //   cssOrm._global_.__ormglobal.wdgtInstance = cssOrm._global_.__ormglobal.wdgtInstance || {}
        //   cssOrm._global_.__ormglobal.wdgtInstance[value._cfg.id] = value
        // }
        RxmAppToolImpl.prototype.chgMode = function (addressArgs, mode) {
            if ($.isString(addressArgs)) {
                var auth = cssOrm.obj.clsOrmPageAuth();
                var args = auth._find(addressArgs);
            }
        };
        RxmAppToolImpl.prototype.getUserID = function () {
            if (window.history.state && window.history.state.urcb_user_id) {
                localStorage._u_s = window.history.state.urcb_user_id;
                return window.history.state.urcb_user_id;
            }
            else {
                return (!!cssOrm._global_.__ormglobal.args.data ? cssOrm._global_.__ormglobal.args.data.userId : undefined) || localStorage._u_s;
            }
            // return (!!cssOrm._global_.__ormglobal.args.data?cssOrm._global_.__ormglobal.args.data.userId:undefined)||localStorage._u_s
        };
        RxmAppToolImpl.prototype.getSettingData = function () {
            // 获取设置数据
            var _s_d_name = '_s_d_' + localStorage._u_s;
            var _s_d_data;
            if (localStorage.getItem(_s_d_name) != null) {
                var sdObj = JSON.parse(localStorage.getItem(_s_d_name));
                sdObj.wifi = JSON.parse(sdObj.wifi);
                sdObj.video = JSON.parse(sdObj.video);
                sdObj.voice = JSON.parse(sdObj.voice);
                sdObj.image = JSON.parse(sdObj.image);
                _s_d_data = sdObj;
            }
            else {
                // 默认设置
                var sdObj = {};
                sdObj.wifi = cssOrm.default.wifi;
                sdObj.video = cssOrm.default.video;
                sdObj.voice = cssOrm.default.voice;
                sdObj.image = cssOrm.default.image;
                var sdObjl = {};
                sdObjl.wifi = JSON.stringify(cssOrm.default.wifi);
                sdObjl.video = JSON.stringify(cssOrm.default.video);
                sdObjl.voice = JSON.stringify(cssOrm.default.voice);
                sdObjl.image = JSON.stringify(cssOrm.default.image);
                localStorage.setItem(_s_d_name, JSON.stringify(sdObjl));
                _s_d_data = sdObj;
            }
            return _s_d_data;
        };
        RxmAppToolImpl.prototype.setSettingVideo = function (args) {
            // 设置视频参数数据
            var _s_d_name = '_s_d_' + localStorage._u_s;
            var storageArgs = { 'wifi': JSON.stringify(this.getSettingData().wifi), 'video': JSON.stringify($.extend(true, {}, cssOrm.default.video, args)), 'voice': JSON.stringify(this.getSettingData().voice), 'image': JSON.stringify(this.getSettingData().image) };
            localStorage.setItem(_s_d_name, JSON.stringify(storageArgs));
        };
        RxmAppToolImpl.prototype.setSettingVoice = function (args) {
            // 设置声音参数数据
            var _s_d_name = '_s_d_' + localStorage._u_s;
            var storageArgs = { 'wifi': JSON.stringify(this.getSettingData().wifi), 'video': JSON.stringify(this.getSettingData().video), 'voice': JSON.stringify($.extend(true, {}, cssOrm.default.voice, args)), 'image': JSON.stringify(this.getSettingData().image) };
            localStorage.setItem(_s_d_name, JSON.stringify(storageArgs));
        };
        RxmAppToolImpl.prototype.setSettingImage = function (args) {
            // 设置图片参数数据
            var _s_d_name = '_s_d_' + localStorage._u_s;
            var storageArgs = { 'wifi': JSON.stringify(this.getSettingData().wifi), 'video': JSON.stringify(this.getSettingData().video), 'voice': JSON.stringify(this.getSettingData().voice), 'image': JSON.stringify($.extend(true, {}, cssOrm.default.image, args)) };
            localStorage.setItem(_s_d_name, JSON.stringify(storageArgs));
        };
        RxmAppToolImpl.prototype.setSettingWifi = function (args) {
            // 设置wifi参数数据
            var _s_d_name = '_s_d_' + localStorage._u_s;
            var storageArgs = { 'wifi': JSON.stringify($.extend(true, {}, cssOrm.default.wifi, args)), 'video': JSON.stringify(this.getSettingData().video), 'voice': JSON.stringify(this.getSettingData().voice), 'image': JSON.stringify(this.getSettingData().image) };
            localStorage.setItem(_s_d_name, JSON.stringify(storageArgs));
        };
        RxmAppToolImpl.prototype.uuid = function () {
            /// <summary >产生32位uuid</summary>
            /// <returns type="String"></returns>
            var UUID = {};
            // INSTANCE SPECIFIC METHODS
            //
            UUID.createUUID = function () {
                var dg = new Date(1582, 10, 15, 0, 0, 0, 0);
                var dc = new Date();
                var t = dc.getTime() - dg.getTime();
                var tl = UUID.getIntegerBits(t, 0, 31);
                var tm = UUID.getIntegerBits(t, 32, 47);
                var thv = UUID.getIntegerBits(t, 48, 59) + '1'; // version 1, security version is 2
                var csar = UUID.getIntegerBits(UUID.rand(4095), 0, 7);
                var csl = UUID.getIntegerBits(UUID.rand(4095), 0, 7);
                // since detection of anything about the machine/browser is far to buggy,
                // include some more random numbers here
                // if NIC or an IP can be obtained reliably, that should be put in
                // here instead.
                var n = UUID.getIntegerBits(UUID.rand(8191), 0, 7) +
                    UUID.getIntegerBits(UUID.rand(8191), 8, 15) +
                    UUID.getIntegerBits(UUID.rand(8191), 0, 7) +
                    UUID.getIntegerBits(UUID.rand(8191), 8, 15) +
                    UUID.getIntegerBits(UUID.rand(8191), 0, 15); // this last number is two octets long
                return tl + tm + thv + csar + csl + n;
            };
            // Pull out only certain bits from a very large integer, used to get the time
            // code information for the first part of a UUID. Will return zero's if there
            // aren't enough bits to shift where it needs to.
            UUID.getIntegerBits = function (val, start, end) {
                var base16 = UUID.returnBase(val, 16);
                var quadArray = new Array();
                var quadString = '';
                var i = 0;
                for (i = 0; i < base16.length; i++) {
                    quadArray.push(base16.substring(i, i + 1));
                }
                for (i = Math.floor(start / 4); i <= Math.floor(end / 4); i++) {
                    if (!quadArray[i] || quadArray[i] == '') {
                        quadString += '0';
                    }
                    else {
                        quadString += quadArray[i];
                    }
                }
                return quadString;
            };
            // Replaced from the original function to leverage the built in methods in
            // JavaScript. Thanks to Robert Kieffer for pointing this one out
            UUID.returnBase = function (number, base) {
                return (number).toString(base).toUpperCase();
            };
            // pick a random number within a range of numbers
            // int b rand(int a); where 0 <= b <= a
            UUID.rand = function (max) {
                return Math.floor(Math.random() * (max + 1));
            };
            return UUID.createUUID();
        };
        RxmAppToolImpl.prototype.unid = function (len) {
            var l = len || 7;
            return '' + Math.round(Math.random() * Math.pow(10, l));
        };
        /**判断是唯一对象 */
        RxmAppToolImpl.prototype.thisObj = function (id, value, objName) {
            var tmp;
            var _id = id;
            if (typeof id == "string") {
                //判断id首字符是否为'#'号
                if (id.indexOf("#") !== 0) {
                    _id = $("#" + id);
                }
            }
            !objName && (objName = 'rx_m__o');
            if (!value && (tmp = $(_id).data(objName)))
                return tmp;
            value && $(_id).data(objName, value);
            return value;
        };
        return RxmAppToolImpl;
    }());
    cssOrm.obj.rxm_app = new RxmAppToolImpl();
    return cssOrm.obj.rxm_app;
});

define("RxmRouterMgr", ["require", "exports", "RxmMd5Bulid", "RxmAppTool"], function (require, exports, md5, appTool) {
    "use strict";
    var _ready;
    //let _authIds: { [key: string]: TPageRouterArgs }
    var rqr = window;
    var pblcRoutersPath = ''; //'www/rxm/core/base/rxmPageAuth.json'
    var privateRouterPath = 'resoft/page/getComPage'; //'resoft/page/getPrivatePage'
    //公有路由
    var _publicPage = {};
    //私有路由
    var _privatePage = {};
    //窗口之间传递的路由
    var _pageAuth;
    //全部路由
    var _auth;
    var _sortByItem = function (arr, itemName) {
        return arr.sort(function (a, b) { return a[itemName] - b[itemName]; });
    };
    var _isReady = function () {
        return _ready;
    };
    /** 同步执行函数 根据名字和id 获取路由值
     * @param pageRouter
     */
    var _getRouterValue = function (pageRouter) {
        //优先判断一下 全局中的router
        var item = cssOrm._global_.__ormglobal.args.router;
        if (pageRouter && item.pageRouter !== pageRouter) {
            item = _auth[pageRouter];
        }
        return item;
    };
    /**
     *
     * @param {String} pageRouter 权限路由或者pageId
     * @returns  {Array.<rxm.router>}
     */
    var _getSons = function (auth, pRouter) {
        var ret = [];
        for (var key in auth) {
            if (auth.hasOwnProperty((key))) {
                var element = auth[(key)];
                if (element.pagePid == pRouter) {
                    ret.push(element);
                }
            }
        }
        ret = _sortByItem(ret, 'pageOrder');
        return ret;
    };
    /**
     * 生成HomeBar
     */
    var _homeBar = function (b, widgetArgs) {
        var arrHome = [];
        var hashOne;
        //http模式 不传递
        for (var i = 0; i < b.length; i++) {
            var it = b[i];
            var item = $.extend(true, {}, cssOrm.default.homePageDefault);
            item.pageId = it.pageId;
            item.pageActionID = 'CI';
            item.pageArgs = {};
            item.tabSelectImg = it.pageIcon;
            var u = '' + it.pageIcon;
            var len = u.lastIndexOf('.');
            item.tabUnSelectImg = u.substr(0, len) + '_u' + u.substring(len, u.length);
            item.pageUrl = (it.pageUrl.indexOf('http://') === 0 || it.pageType == '10') ? it.pageUrl : '#' + it.pageRouter;
            item.tabTxt = it.pageName;
            item.pageArgs = $.extend(true, {}, cssOrm.default.homePageArgs, widgetArgs, {
                title: it.pageDesc,
                router: it,
                _tabIndex: i
            });
            arrHome.push(item);
        }
        return arrHome;
    };
    /**
       *
       * @param {Function} f
       * @param {Array}}} a
       */
    var _load = function (f, a) {
        var the = this;
        if (!_isReady() || a) {
            rqr.require([pblcRoutersPath.length > 0 ? 'text!' + getServer() + '/' + pblcRoutersPath : ''], function (_currentPageAuth) {
                _ready = true;
                if (_currentPageAuth != null) {
                    var publicAuth = JSON.parse(_currentPageAuth);
                    if (publicAuth.comPage != null) {
                        for (var i = 0; i < publicAuth.comPage.length; i++) {
                            _publicPage[publicAuth.comPage[i].pageRouter] = publicAuth.comPage[i];
                        }
                        _auth = $.extend({}, _pageAuth, _publicPage);
                    }
                }
                if (a && a.url) {
                    $.ajax({
                        url: getServer() + "/" + a.url,
                        success: function (data) {
                            a.success && (a.success(data));
                            var _data = data.data;
                            for (var i = 0; i < _data.length; i++) {
                                var item = _data[i];
                                if (item.pageRouter != null) {
                                    _privatePage[item.pageRouter] = item;
                                }
                            }
                            _auth = $.extend(_auth, _privatePage);
                            _ready = true;
                            f && f(_auth);
                        },
                        error: function () {
                            f && f(_auth);
                        }
                    });
                }
                else {
                    f && f(_auth);
                }
            });
        }
        else {
            f && f.apply(the, _auth);
        }
    };
    /**
    * 加载router 指定的页面
    * router 为空时，按照当前的hash值加载后台定制的网页，hash值为空，表示加载home页
    * @param {rxm.router} router
    * @param {rxm.page.loadArgs2} widgetArgs
    */
    var _loadByRouter = function (router, widgetArgs) {
        // if ($.isString(router)) {
        //   var r = _getRouterValue(router)
        //   if (!r && !_isReady()) {
        //     _load(_loadByRouter)
        //     return
        //   }
        //   router = r
        // }
        if (!!widgetArgs && !!widgetArgs.target && (widgetArgs.target === '_blank' || widgetArgs.target == '_self')) {
            if (!router.pageOpen) {
                router.pageOpen = widgetArgs.target;
            }
        }
        else {
            widgetArgs = typeof widgetArgs === 'undefined' ? {} : widgetArgs;
            widgetArgs.target = router.pageOpen || cssOrm.default.loadTarget;
        }
        if (widgetArgs.target === '_blank') {
            // 弹出窗口参数
            var arg = $.extend(cssOrm.default.loadPageDefault, widgetArgs);
            arg.router = router;
            arg.target = '_self';
            var jumpUrl = '';
            // if (typeof  f!=="undefined") { cssOrm.on(cssOrm.evt.enumAppMsg.jumpPageMsg, router.uuid, f, true) };
            if (router.pageType == '1') {
                var hArgs = appTool;
                jumpUrl = hArgs.getJumpUrl();
                var hArgs = appTool;
                if (hArgs.isAndriod()) {
                    if (typeof router.pageRouter !== 'undefined') {
                        jumpUrl += '#' + router.pageRouter;
                    }
                    ;
                    arg.hash = undefined;
                }
                else {
                    arg.hash = router.pageRouter;
                }
                ;
            }
            else if (router.pageType == '10') {
                //不是斜杠
                if (!(router.pageUrl.indexOf('/') === 0)) {
                    //起始http,不处理
                    if (router.pageUrl.indexOf('http') === 0) {
                        jumpUrl = router.pageUrl;
                    }
                    //其他加杠 
                    else {
                        jumpUrl = '/' + router.pageUrl;
                    }
                }
                //起始是斜杠
                else {
                    jumpUrl = router.pageUrl;
                }
            }
            if (arg && !arg._auth) {
                //var routerTmp: any = {}
                //routerTmp[router.pageRouter] = router
                if (appTool.isLocalLoad()) { //本地加载模式
                    //arg._auth = $.extend({}, _pageAuth, routerTmp)
                }
                else { //http模式 不传递
                    //arg._auth = routerTmp
                }
            }
            var rxmPageBase = rqr.require('RxmPageBase');
            rxmPageBase.jumpPage('CI', jumpUrl, arg);
        }
        else if (widgetArgs.target === '_self') {
            if (_openHttpPage(router.pageUrl))
                return;
            var usrHash = router.pageRouter;
            if (!!usrHash && usrHash.substr(0, 1) != '#') {
                usrHash = '#' + usrHash;
            }
            if (usrHash) {
                if (usrHash != window.location.hash) {
                    var href = window.location.href.split('#')[0];
                    if (widgetArgs.back) {
                        // widgetArgs.back==true 时允许回退，否者不允许回退
                        window.history.pushState({
                            router: router,
                            args: widgetArgs
                        }, '', href + usrHash);
                    }
                    else {
                        window.history.replaceState({
                            router: router,
                            args: widgetArgs
                        }, '', href + usrHash);
                    }
                    ;
                    window.location.reload();
                }
                else {
                    window.location.reload();
                }
                ;
            }
        }
    };
    var _openHttpPage = function (url) {
        if (!!url && (url.indexOf('http://') == 0 || url.indexOf('https://') == 0)) {
            window.location.href = url;
            return true;
        }
        return false;
    };
    /**
       * 初始化页面或者加载当前的页面
       */
    var _loadEvt = function (a) {
        /// <summary>  </summary>
        var the = this;
        if (a) {
            var s = getServer() + '/';
            var t = 'text!' + s + a.pageUrl;
            var rqr_1 = window;
            rqr_1.require([t], function (content) {
                $('#rxm_content').html(content);
                rqr_1.require([s + a.pageCtrlUrl + '.js'], function (page) {
                    if (!page.init(the, appTool, a)) {
                        $('#rxm_loading').remove();
                    }
                    $('#rxm_content').css('visibility', 'visible');
                    if (appTool.isIOS()) {
                        if ($('#rxm_content').find('.s_grid_ellipsis').length <= 0) {
                            $('#rxm_content').css('height', $(document).height()).addClass('content-class');
                        }
                    }
                });
            });
        }
    };
    var RxmRouterMgrImpl = /** @class */ (function () {
        function RxmRouterMgrImpl() {
            //权限缓加载方案，解决第二次解决 android 不同窗口之间的
            var homeArgs = appTool;
            //获取传递的权限参数
            _pageAuth = {};
            homeArgs.getAppArgs() && homeArgs.getAppArgs()._auth && (_pageAuth = homeArgs.getAppArgs()._auth);
            _ready = false;
            !_auth && (_auth = {});
        }
        RxmRouterMgrImpl.prototype.attrRemoteUrl = function (url) {
            url && (privateRouterPath = url);
            return privateRouterPath;
        };
        RxmRouterMgrImpl.prototype.attrJsonUrl = function (url) {
            url && (pblcRoutersPath = url);
            return pblcRoutersPath;
        };
        RxmRouterMgrImpl.prototype.getSonsByGroup = function (pageIdOrPageRouter, callback) {
            _load.call(this, function (auths) {
                var id = pageIdOrPageRouter;
                var address = _getRouterValue(id);
                if (typeof address !== 'undefined' && typeof address.pageId !== 'undefined') {
                    id = address.pageId;
                }
                ;
                var r = {};
                $.each(auths, function (index, it) {
                    if (it.pagePid == id) {
                        var s = it.pageCtrl.length > 0 ? it.pageCtrl : 'noGroup';
                        r[s] = r[s] || [];
                        r[s].push(it);
                    }
                });
                $.each(r, function (index, arr) {
                    _sortByItem(arr, 'pageOrder');
                });
                callback && callback(r);
            }, { url: getServer() + privateRouterPath });
        };
        /** 获取跟路由信息
         *
        */
        RxmRouterMgrImpl.prototype.getAuthRoot = function (callback) {
            this.getRouterValue('root', callback);
        };
        /** 获得home页面路由
         * @returns {Array.<rxm.router>}
         */
        RxmRouterMgrImpl.prototype.getAuthHome = function (callback) {
            //!_isReady() && _load()
            this.getSons('root', callback);
        };
        /** 根据名字和id 获取路由值
         * @param {String}  pageRouter
         */
        RxmRouterMgrImpl.prototype.getRouterValue = function (pageRouter, callback) {
            //2019-7-5 大部分路由的信息都不需要访问网络
            var item = _getRouterValue(pageRouter);
            if (item) {
                callback(item);
            }
            else {
                _load.call(this, function () {
                    var item = _getRouterValue(pageRouter);
                    callback(item);
                }, { url: getServer() + privateRouterPath });
            }
        };
        /**
         * 清除内存中的路由信息
         */
        RxmRouterMgrImpl.prototype.clean = function () {
            _auth = {};
        };
        /**
         * 根据id 路由名称获取所有的子路由
         * @param  pageIdOrPageRouter
         */
        RxmRouterMgrImpl.prototype.getSons = function (pageIdOrPageRouter, callback) {
            _load.call(this, function () {
                var id = pageIdOrPageRouter;
                var address = _getRouterValue(id);
                if (typeof address !== 'undefined' && typeof address.pageId !== 'undefined') {
                    id = address.pageId;
                }
                ;
                var r = [];
                $.each(_auth, function (index, it) {
                    if (it.pagePid == id) {
                        r.push(it);
                    }
                });
                _sortByItem(r, 'pageOrder');
                callback(r);
            }, { url: getServer() + privateRouterPath });
        };
        /**
         * 获取组成员
         * @param {String} groupName
         * @returns {Array.<vo.orm.router>}
         */
        RxmRouterMgrImpl.prototype.getGroupRemembers = function (groupName, callback) {
            _load.call(this, function () {
                var r = [];
                $.each(_auth, function (index, it) {
                    if (it.pageCtrl === groupName) {
                        r.push(it);
                    }
                });
                _sortByItem(r, 'pageOrder');
                callback(r);
            }, { url: getServer() + privateRouterPath });
        };
        /**
         * 获取父亲路由值
         * @param {String} pageIdOrPageRouter
         * @returns {vo.orm.router}
         */
        RxmRouterMgrImpl.prototype.getParent = function (pageIdOrPageRouter, callback) {
            _load.call(this, function () {
                var id = pageIdOrPageRouter || window.location.hash.substr(1);
                var address = _getRouterValue(id);
                id = address.pageRouter || '';
                callback(_getRouterValue(id));
            }, { url: getServer() + privateRouterPath });
        };
        /**
         * 关闭当前窗口
         * @param {Object} data
         * @returns {vo.orm.router} -返回数据
         */
        RxmRouterMgrImpl.prototype.closeJumpPage = function (data) {
            var rxmPageBase = rqr.require('RxmPageBase');
            rxmPageBase.closePage(data);
        };
        /**
         * 加载router 指定的页面  保留为了维持老的代码
         * router 为空时，按照当前的hash值加载后台定制的网页，hash值为空，表示加载home页
         * @param router
         * @param widgetArgs
         */
        RxmRouterMgrImpl.prototype.load = function (router, widgetArgs) {
            if (typeof router === 'undefined') {
                var h = window.location.hash.substr(1);
                if (h.length == 0) {
                    // 初始化Home
                    this.loadHome();
                    return;
                }
                else {
                    //老的用路由的方式打开的页面，在 www/rxm/core/page/home.js 和jumppage.js中调用了
                    this.getRouterValue(h, $.proxy(_loadEvt, this));
                }
            }
            else if (router.pageRouter && (!!router.pageRouter || !!router.pageOpen || !!router.pageId)) {
                !widgetArgs && (widgetArgs = {});
                return _loadByRouter(router, widgetArgs);
            }
        };
        RxmRouterMgrImpl.prototype.loadHome = function (args) {
            var homes = [];
            if (!args) {
                _load.call(this, function (auths) {
                    homes = _homeBar(_getSons(auths, 'root'));
                    var rxmPageBase = rqr.require('RxmPageBase');
                    rxmPageBase.jumpHome(homes, 1);
                }, { url: getServer() + privateRouterPath });
            }
            else {
                if (args.local && args.local.routers) {
                    //本地的加载的权限
                    // let routers=[]
                    for (var i = 0; i < args.local.routers.length; i++) {
                        if (!!args.local.routers[i].args) {
                            var routerDdefault = [];
                            routerDdefault.push(args.local.routers[i].router);
                            var addDefaultRouter = _homeBar(routerDdefault, args.local.routers[i].args);
                            homes.push(addDefaultRouter[0]);
                        }
                    }
                    // homes = _homeBar(routers)
                }
                /** 远程的权限 */
                if (args.remote && args.remote.url) {
                    _load.call(this, function (auths) {
                        var h = _homeBar(_getSons(auths, 'root'));
                        homes.push.apply(homes, h);
                        var rxmPageBase = rqr.require('RxmPageBase');
                        rxmPageBase.jumpHome(homes, 1);
                    }, args.remote);
                }
                else {
                    var rxmPageBase = rqr.require('RxmPageBase');
                    rxmPageBase.jumpHome(homes, 1);
                }
            }
        };
        RxmRouterMgrImpl.prototype.reset = function () {
        };
        return RxmRouterMgrImpl;
    }());
    var thisObj = new RxmRouterMgrImpl();
    return thisObj;
});

define("RxmCmdMgr", ["require", "exports", "RxmAppTool", "RxmTopCmdQueue", "RxmGstrEsy"], function (require, exports, appTool, cmdQuery) {
    "use strict";
    var _cmdObj = {};
    /**获取iframe id */
    var selfid = function () {
        return self.frameElement == null ? 'windowtop' : self.frameElement.id;
    };
    /**
     * 解析 #id@cmd 形式的cmd selector
     * @param {String} selector
     * @returns {{id:'',msgType:''}}
     */
    var _parseSelector = function (selector) {
        var ret = {};
        if (!selector || selector.length == 0) {
            return;
        }
        /**@type {Array.<String>} */
        var tmpsplit = selector.split('@');
        if (tmpsplit.length == 1) {
            ret.msgType = tmpsplit[0];
        }
        if (tmpsplit.length == 2) {
            ret.id = tmpsplit[0];
            ret.msgType = tmpsplit[1];
        }
        return ret;
    };
    /** */
    /**
    * 根据rxmcmdid 绑定消息
    * @param {rxm.cmd.bindArgs|{bindWinId:'',triggerWinId:''}} args
    */
    var bindcmd = function (args) {
        //绑定远程
        args.bindWinId = selfid();
        args.fn = args.fn || args.cb || args.callback;
        if (!args.fn)
            return;
        !args.fn.unid && (args.fn.unid = appTool.unid());
        if (this.selector && this.selector.length > 0) {
            var tmp = _parseSelector(this.selector);
            tmp && tmp.id && (args.id = tmp.id);
            tmp && tmp.msgType && (args.msgType = tmp.msgType);
        }
        if (!args.msgType || args.msgType.length == 0) {
            console.error('cmdType 不能为空');
        }
        var key = args.msgType;
        if (key && key.length > 0) {
            !_cmdObj[key] && (_cmdObj[key] = []);
            _cmdObj[key].push(args);
        }
        if (args.hearFrom && args.hearFrom.length > 0) {
            cmdQuery.bindCmd(args, triggerCmd);
        }
    };
    /**
     *
     * @param {rxm.cmd.bindArgs |{bindWinId:'',triggerWinId:''}} bindcmd
     * @param {rxm.cmd.bindArgs |{bindWinId:'',triggerWinId:''}} unbindcmd
     */
    var _isRemove = function (bindcmd, unbindcmd) {
        var isRemove = true;
        unbindcmd.fn && (isRemove = isRemove && (bindcmd.fn = unbindcmd.fn));
        isRemove && unbindcmd.msgType && (isRemove = isRemove && (unbindcmd.msgType == bindcmd.msgType));
        isRemove && unbindcmd.id && (isRemove = isRemove && (unbindcmd.id == bindcmd.id));
        return isRemove;
    };
    /**
    * 根据rxmcmdid 解绑定消息
    * @param {rxm.cmd.bindArgs |{bindWinId:'',triggerWinId:''}} args   解绑的内容可选
    */
    var unbindcmd = function (args) {
        args.fn = args.fn || args.cb || args.callback;
        if (this.selector && this.selector.length > 0) {
            var tmp = _parseSelector(this.selector);
            tmp && tmp.id && (args.id = tmp.id);
            tmp && tmp.msgType && (args.msgType = tmp.msgType);
        }
        if (!args.msgType || args.msgType.length == 0) {
            console.error('cmdType 不能为空');
        }
        /**@type {Array.<rxm.cmd.bindArgs|{bindWinId:'',triggerWinId:''}>} */
        var its = _cmdObj[args.msgType];
        /**@type {rxm.cmd.bindArgs|{bindWinId:'',triggerWinId:''}} */
        var it;
        if (its && its.length > 0) {
            for (var i = its.length - 1; i >= 0; i--) {
                it = its[i];
                if (_isRemove(it, args)) {
                    its.splice(i, 1);
                }
            }
        }
    };
    /**
     * @param {rxm.cmd.triggerArgs} trArgs 可选不填写
     */
    var triggerCmd = function (args) {
        //var data, e, args
        //trArgs&&(data=trArgs.data)&&(delete trArgs.data )
        //trArgs&&(e=trArgs.originalEvent)&&(delete trArgs.originalEvent )
        /**@type {cmdTopQueue} */
        var dispatch;
        var ret;
        args.msgType = args.msgType || this.selector;
        //确定消息类型，这个是需要改进的
        if (!!(args.sayTo && (args.sayTo == 'self')) || (typeof args.triggerWinId != 'undefined')) {
            //来自远程的激活 ，不用激活远程的监听,避免消息泛滥
            args.triggerWinId = selfid();
            localTrigger(args);
        }
        else {
            //本地执行，并激活远程由远程类来决定需要激活的窗口
            args.triggerWinId = selfid();
            ret = localTrigger(args);
            ret.fnreturn && (!args.rxmStopDispatch) && (cmdQuery) && (cmdQuery.triggerCmd(args));
        }
    };
    /**
  *
  * @param {Object} data
  * @param {Event} e
  * @param {rxm.cmd.bindArgs|{bindWinId:'',triggerWinId:''}} args
  */
    var localTrigger = function (args, e, data) {
        data = args.data;
        e = args.originalEvent;
        //add by xiangcq 20190107 按钮添加active状态 判断按钮是否具有rxmactive属性
        if (e) {
            if (typeof ($(e.target).closest(".rxm-cmd-btnbar").attr("rxmactive")) !== "undefined") {
                $(e.target).closest(".rxm-cmd-btnbar").find('button').attr("class", "");
                $(e.target).closest("button").addClass("rxm-active");
            }
        }
        /** @param {rxm.cmd.bindArgs|{bindWinId:'',triggerWinId:''}} item */
        function canExcByDispath(item) {
            if (item.bindWinId == args.triggerWinId)
                return true;
            if (!item.hearFrom)
                return false;
            /**@type  {Array.<String>} */
            var arrTmp = item.hearFrom.split(',');
            arrTmp && (arrTmp.contains = function (val) {
                for (var i = 0; i < this.length; i++) {
                    if (this[i] == val) {
                        return true;
                    }
                }
                return false;
            });
            if (arrTmp && arrTmp.contains('all') || arrTmp.contains(args.triggerWinId)) {
                return true;
            }
            return false;
        }
        var ret = { fnreturn: true };
        var type = args.msgType;
        /**@type {Array.<rxm.cmd.bindArgs|{bindWinId:'',triggerWinId:''}> }*/
        var arrHandler;
        /**@type {rxm.cmd.bindArgs|{bindWinId:'',triggerWinId:''}} */
        var item;
        var one = [];
        if (arrHandler = _cmdObj[type]) {
            for (var i = 0; i < arrHandler.length; i++) {
                //绑定有id但激活没有id 或者id 不相等，不执行
                item = arrHandler[i];
                if (item.id && args.id !== item.id)
                    continue;
                if (!canExcByDispath(item))
                    continue;
                item.triggerWinId = args.triggerWinId;
                !e && (e = {});
                item.data && (e.data = item.data);
                //设置激活发起窗口id
                e.rxmBindArgs = item;
                var ctxt = args.context || item.context || e.target;
                ret.fnreturn = item.fn.call(ctxt, e, data);
                !(ret.fnreturn === false) && (ret.fnreturn = true);
                ret.e = e;
                if (item.one) {
                    one.push(i);
                }
                if (!ret.fnreturn)
                    break;
            }
            if (one.length > 0) {
                for (var j = one.length - 1; j >= 0; j--) {
                    arrHandler.splice(one[j], 1);
                }
            }
        }
        ;
        return ret;
    };
    $.fn.rxmBindCmd = bindcmd;
    $.fn.rxmTriggerCmd = triggerCmd;
    $.fn.rxmUnbindCmd = unbindcmd;
    //var  msgQueue =queue('rxm-cmd-mgr')
    /**
     * 处理 .rxm-cmd-btn'  的点击事件
     * 这里有个疑虑，就是先销毁了菜单，但是，事件仍然传递下来，测试通过了
     * @param {MouseEvent} e
     * @param {*} data
     */
    var cmdTapedDefault = function (e, data) {
        //如果点击的是 caret 类，弹出菜单
        //
        var children, cmdid;
        if ((children = $(e.target).closest('.rxm-btn-menu')) && children.length != 0) {
            //需要完善测试  2018-06-05
            if (!(cmdid = children.attr('rxmchildrenid'))) {
                children = children.closest('.rxm-cmd-btn').find('.rxm-cmd-dropdown-btnbar');
                if (children.length > 0) {
                    var cid = children.attr('id');
                    !cid && (cid = appTool.unid()) && children.attr('id', cid);
                    cmdid = cid;
                }
                else {
                    cmdid = undefined;
                }
            }
            //菜单类要接收这个事件，没有在这里‘引入’菜单类，将菜单类单独封装。
            cmdid && $('rxmPopChildrenMenu').rxmTriggerCmd({
                id: cmdid, originalEvent: e.originalEvent || e,
                data: { triggerWinId: selfid() }
            });
        }
        else {
            //激活这个命令
            var d = data || e.originalEvent.rxmCmdData;
            var cmd = $(this).attr('rxmcmdid');
            var tmp = $(this).closest('.rxm-dropmenu-btn');
            if (tmp.length == 1) {
                tmp.removeClass('rxm-dropmenu-btn');
                setTimeout(function () {
                    // console.info('settimeout')
                    tmp.addClass('rxm-dropmenu-btn');
                }, 300);
            }
            cmd && $(cmd).rxmTriggerCmd({ data: d, originalEvent: (e.originalEvent || e) });
        }
        e.stopPropagation();
        e.preventDefault();
    };
    $('html').tap('.rxm-cmd-btn>button', cmdTapedDefault);
    return {};
});

define("RxmTab", ["require", "exports", "text!RxmTemplateDir/clsTabTmpl.html", "text!RxmTemplateDir/clsTabPanelTmpl.html", "RxmArtTemplate"], function (require, exports, tpl, tplPanel, artTemplate) {
    "use strict";
    ///<amd-dependency path="text!RxmTemplateDir/clsTabTmpl.html" name="tpl"/>
    ///<amd-dependency path="text!RxmTemplateDir/clsTabPanelTmpl.html" name="tplPanel"/>
    ///<amd-dependency path="RxmArtTemplate" name="artTemplate"/>
    var rqr = window;
    var tool = rqr.require("RxmAppTool");
    //创建标签插件id
    var createSomId = function (type) {
        var order = 1;
        var tmp = $('[id]');
        for (var i = 0; i < tmp.length; i++) {
            var id = tmp[i].id;
            id && (id = id.substr(id.length - 3)) && (id = parseInt(id)) && $.isNumeric(id) && id > order && (order = id);
        }
        (!!type) && (type = type.split('-')) && (type.length > 0) && (type = type[type.length - 1]);
        (!type) && (type = 'ormWidget');
        var ret = '';
        while (order) {
            ret = order < 10 ? '00' : order < 100 ? '0' : '';
            ret = type + ret + order;
            order++;
            if ($('#' + ret).length === 0)
                break;
        }
        return ret;
    };
    //tab标签页切换分页初始化  
    var _initTabPaging = function ($tabWrap) {
        //判断是否出现滚动条
        var wrapWidth = $tabWrap.width();
        //默认这个宽度与wrapWidth相等 当出现滚动条会大于wrapWidth
        var scroWidth = $tabWrap[0].scrollWidth;
        var $lArrow = $tabWrap.parent().find(".rxm-scroll-left");
        var $rArrow = $tabWrap.parent().find(".rxm-scroll-right");
        //出现滚动条
        if (scroWidth > wrapWidth) {
            $lArrow.css("display", "block");
            $rArrow.css("display", "block");
            $tabWrap.addClass("rxm-tab-scroll");
            var i = 0;
            //左箭头 上一页
            var _leftScroll = function () {
                i += -200;
                //最左侧 scrollLeft为0
                i < 0 && (i = 0);
                $tabWrap.animate({ "scrollLeft": i }, "0");
            };
            //右箭头 下一页
            var _rightScroll = function () {
                //最右侧 scrollLeft为滚动轴最大值
                if (Number($tabWrap.width() + $tabWrap.scrollLeft() + 200) >= Number($tabWrap[0].scrollWidth)) {
                    i = Number($tabWrap[0].scrollWidth - $tabWrap.width());
                }
                else {
                    i += 200;
                }
                $tabWrap.animate({ "scrollLeft": i }, "0");
            };
            $lArrow.tap(_leftScroll);
            $rArrow.tap(_rightScroll);
        }
        else {
            $lArrow.css("display", "none");
            $rArrow.css("display", "none");
            $tabWrap.removeClass("rxm-tab-scroll");
        }
    };
    //tab页签点击事件回叫函数
    var _tabCallback = function (e) {
        //当前tab页签jquery对象
        _changeTabStatus(e, $(e.currentTarget));
    };
    //改变标签选中状态 转变为active
    var _changeTabStatus = function (e, $obj) {
        var $curLi = $obj;
        var curTabId = $curLi.attr('id');
        var $curUl = $curLi.parent();
        //原有选中的tab页签状态修改
        var $oldActiveLi = $curUl.find("li[class~='rxmactive']");
        var oldActiveTabId = $oldActiveLi.attr("id");
        //隐藏标签数据
        var hd = {
            data: {
                tabBarId: $curUl.attr("id"),
                tabId: oldActiveTabId,
                tabPanelId: $("div[rxmtabpanel='" + oldActiveTabId + "']").attr("id")
            },
            originalEvent: e
        };
        var hdn = $.extend(true, {}, hd);
        //标签隐藏之前消息激发
        $('rxmTabHide').rxmTriggerCmd(hd);
        //删除原有active tab页签的active状态
        $oldActiveLi.removeClass('rxmactive');
        $oldActiveLi.addClass('rxminactive');
        //隐藏原有内容区div
        $("div[rxmtabpanel='" + oldActiveTabId + "']").removeClass("rxmactive");
        //标签隐藏之后消息激发
        $('rxmTabHidden').rxmTriggerCmd(hdn);
        //显示标签数据
        var sd = {
            data: {
                tabBarId: $curUl.attr("id"),
                tabId: curTabId,
                tabPanelId: $("div[rxmtabpanel='" + curTabId + "']").attr("id")
            },
            originalEvent: e
        };
        var sdn = $.extend(true, {}, sd);
        //标签显示之前消息激发
        $('rxmTabShow').rxmTriggerCmd(sd);
        //当前点击tab页签添加active
        $curLi.removeClass('rxminactive');
        $curLi.addClass("rxmactive");
        //显示点击页签对应的内容区div
        $("div[rxmtabpanel='" + curTabId + "']").addClass("rxmactive");
        $('rxmTabShown').rxmTriggerCmd(sdn);
    };
    //tab页签关闭按钮点击事件回叫函数
    var _tabCloseCallback = function (e) {
        if (!tool.isInEditor()) {
            //关闭当前标签
            var $li = $(e.currentTarget).parent().parent();
            var $ul = $li.parent();
            var $tabContent = $("div[rxmtabpanel='" + $li.attr("id") + "']");
            var clos = {
                data: {
                    closeBtnId: $(e.currentTarget).attr("id"),
                    tabBarId: $ul.attr("id"),
                    tabId: $li.attr("id"),
                    tabPanelId: $tabContent.attr("id")
                },
                originalEvent: e
            };
            var closd = $.extend(true, {}, clos);
            //激发消息 返回删除标签相关数据
            $('rxmTabClose').rxmTriggerCmd(clos);
            $li.remove();
            $tabContent.remove();
            //激发消息 返回删除标签相关数据
            $('rxmTabClosed').rxmTriggerCmd(closd);
            _initTabPaging($ul);
            //防止冒泡
            return false;
        }
    };
    //标签初始化函数  事件绑定，分页按钮初始化 
    var initTab = function () {
        //rxmTabInitPaging消息绑定 当标签页进行增删时进行 标签初始化 判断是否显示分页按钮
        $('rxmTabInitPaging').rxmBindCmd({
            hearFrom: 'all', callback: function (e, data) {
                _initTabPaging(data);
            }
        });
        //tab页签点击事件绑定
        $("body").tap(".rxm-tab-item", _tabCallback);
        //tab页签关闭按钮点击事件绑定
        $("body").tap(".rxm-tab-item-a i", _tabCloseCallback);
        //同一个页面存在多个标签页插件 分页按钮初始化
        var tabPlgns = $("[clsnm='rxm-tab']");
        for (var i = 0; i < tabPlgns.length; i++) {
            _initTabPaging($(tabPlgns[i]));
        }
    };
    //标签初始化 
    initTab();
    var ClsFactory = function (config) {
        //页签包裹器对象定义
        var $tabWrap = $("#" + config.id);
        //所有的自定义消息 菜单 激活前 激活后 隐藏前 隐藏后
        var msgEnum = {
            rxmTabShow: "rxmTabShow",
            rxmTabShown: "rxmTabShown",
            rxmTabHide: "rxmTabHide",
            rxmTabHidden: "rxmTabHidden"
        };
        var RxmTab = /** @class */ (function () {
            function RxmTab() {
            }
            /**
            * 新增标签项函数
            */
            RxmTab.prototype.addTabItem = function (arg) {
                var $tab;
                var $panel;
                var tabid = createSomId("rxm-tab-item");
                //走默认模板
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    var _tabData = {
                        tabId: tabid
                    };
                    var _panelData = {
                        tabPanelId: tabid + "_panel",
                        tabId: tabid
                    };
                    $tab = artTemplate("template-tab-" + config.id, _tabData);
                    $panel = artTemplate("template-panel-" + config.id, _panelData);
                }
                else { //定制标签项
                    //art模板compile加载html模板
                    var renderTab = artTemplate.compile(tpl);
                    var renderPanel = artTemplate.compile(tplPanel);
                    if (typeof arg.tabId !== "undefined") {
                        tabid = arg.tabId;
                    }
                    //模板数据
                    var _tab = {
                        tabId: tabid,
                        tabItem: arg.tabItem
                    };
                    var _panel = {
                        tabId: tabid,
                        tabPanelId: tabid + "_panel",
                        tabPanel: arg.tabPanel
                    };
                    $tab = renderTab(_tab);
                    $panel = renderPanel(_panel);
                }
                //添加消息
                var ad = {
                    data: {
                        tabBarId: config.id,
                        tabId: tabid,
                        tabPanelId: tabid + "_panel"
                    },
                    originalEvent: event
                };
                var adn = $.extend(true, {}, ad);
                $('rxmTabAdd').rxmTriggerCmd(ad);
                $tabWrap.append($tab);
                $("div[rxmtabcontent='" + config.id + "']").append($panel);
                $('rxmTabAdded').rxmTriggerCmd(adn);
                _initTabPaging($tabWrap);
            };
            /**
             * 删除标签项函数
             * @description 根据tab页签id  进行单个、多个、全部页签的删除
             * @param {String | Array | "" } arg - tab页签id,此参数可为字符串、数组、undefined
             */
            RxmTab.prototype.deleteTabItem = function (arg) {
                var tabPanelid = [];
                if (typeof arg != "undefined") {
                    //判断传入是否为字符串 
                    if ($.isString(arg)) {
                        var t = arg;
                        arg = [];
                        arg.push(t);
                    }
                    //panel id数组
                    for (var i = 0; i < arg.length; i++) {
                        tabPanelid.push(arg[i] + "_panel");
                    }
                    var dd = {
                        data: {
                            tabBarId: config.id,
                            tabId: arg,
                            tabPanelId: tabPanelid
                        },
                        originalEvent: event
                    };
                    var ddd = $.extend(true, {}, dd);
                    //激发消息 rxmTabClose
                    $('rxmTabClose').rxmTriggerCmd(dd);
                    //迭代删除页签及对应panel
                    for (var i = 0; i < arg.length; i++) {
                        $("#" + arg[i]).remove();
                        $("#" + arg[i] + "_panel").remove();
                    }
                    //激发消息 rxmTabClosed
                    $('rxmTabClosed').rxmTriggerCmd(ddd);
                }
                else {
                    var tabs = $tabWrap.find(".rxm-tab-item");
                    var tabid = [];
                    for (var i = 0; i < tabs.length; i++) {
                        tabid.push($(tabs[i]).attr("id"));
                    }
                    for (var i = 0; i < tabid.length; i++) {
                        //tab页签id push至tabIdArr
                        tabPanelid.push(tabid[i] + "_panel");
                    }
                    var dd2 = {
                        data: {
                            tabBarId: config.id,
                            tabId: tabid,
                            tabPanelId: tabPanelid
                        },
                        originalEvent: event
                    };
                    var ddd2 = $.extend(true, {}, dd2);
                    //激发消息 rxmTabClose
                    $('rxmTabClose').rxmTriggerCmd(dd2);
                    //删除所有页签及对应panel
                    $tabWrap.empty();
                    $("div[rxmtabcontent='" + config.id + "']").empty();
                    //激发消息 rxmTabClosed
                    $('rxmTabClosed').rxmTriggerCmd(ddd2);
                }
                _initTabPaging($tabWrap);
                //防止冒泡
                return false;
            };
            /**
             * 打开标签项函数
             * @description 每次打开一个
             * @param {String} arg - 标签id
             */
            RxmTab.prototype.openTabItem = function (arg) {
                if (typeof arg != "undefined") {
                    _changeTabStatus(event, $("#" + arg));
                }
            };
            /**
             * 标签页激活开始消息绑定
             * @param {rxm.cmd.triggerArgs} args - 消息绑定对象
             */
            RxmTab.prototype.bindRxmTabShow = function (arg) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {};
                }
                !arg.hearFrom && (arg.hearFrom = "all");
                $('rxmTabShow').rxmBindCmd(arg);
            };
            /**
             * 标签页激活结束消息绑定
             * @param {rxm.cmd.triggerArgs} args - 消息绑定对象
             */
            RxmTab.prototype.bindRxmTabShown = function (arg) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {};
                }
                !arg.hearFrom && (arg.hearFrom = "all");
                $('rxmTabShown').rxmBindCmd(arg);
            };
            /**
             * 标签页隐藏开始消息绑定
             * @param {rxm.cmd.triggerArgs} args - 消息绑定对象
             */
            RxmTab.prototype.bindRxmTabHide = function (arg) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {};
                }
                !arg.hearFrom && (arg.hearFrom = "all");
                $('rxmTabHide').rxmBindCmd(arg);
            };
            /**
             * 标签页隐藏结束消息绑定
             * @param {rxm.cmd.triggerArgs} args - 消息绑定对象
             */
            RxmTab.prototype.bindRxmTabHidden = function (arg) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {};
                }
                !arg.hearFrom && (arg.hearFrom = "all");
                $('rxmTabHidden').rxmBindCmd(arg);
            };
            /**
             * 标签页添加开始消息绑定
             * @param {rxm.cmd.triggerArgs} args - 消息绑定对象
             */
            RxmTab.prototype.bindRxmTabAdd = function (arg) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {};
                }
                !arg.hearFrom && (arg.hearFrom = "all");
                $('rxmTabAdd').rxmBindCmd(arg);
            };
            /**
             * 标签页添加结束消息绑定
             * @param {rxm.cmd.triggerArgs} args - 消息绑定对象
             */
            RxmTab.prototype.bindRxmTabAdded = function (arg) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {};
                }
                !arg.hearFrom && (arg.hearFrom = "all");
                $('rxmTabAdded').rxmBindCmd(arg);
            };
            /**
             * 标签页删除开始消息绑定
             * @param {rxm.cmd.triggerArgs} args - 消息绑定对象
             */
            RxmTab.prototype.bindRxmTabClose = function (arg) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {};
                }
                !arg.hearFrom && (arg.hearFrom = "all");
                $('rxmTabClose').rxmBindCmd(arg);
            };
            /**
             * 标签页删除结束消息绑定
             * @param {rxm.cmd.triggerArgs} args - 消息绑定对象
             */
            RxmTab.prototype.bindRxmTabClosed = function (arg) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {};
                }
                !arg.hearFrom && (arg.hearFrom = "all");
                $('rxmTabClosed').rxmBindCmd(arg);
            };
            return RxmTab;
        }());
        return new RxmTab();
    };
    return ClsFactory;
});

/**
 * combo - css fed - weijy
 */
define("RxmCombo", ["require", "exports"], function (require, exports) {
    "use strict";
    /**
        // options
        var options = {
            id: "",                     // input
            key: {                      // key
                idKey: "id",            // idKey
                textKey: "text"         // textKey
            },
            multi: false,               // single select or multi select
            readonly: "",               // readonly
            placeholder: "",            // placeholder
            event: {},                  // events obj
            panelWidth: "",             // panelWidth
            panelMinWidth: "",          // panelMinWidth
            panelMaxWidth: "",          // panelMaxWidth
            panelHeight: "",            // panelHeight
            panelMinHeight: "",         // panelMinHeight
            panelMaxHeight: ""          // panelMaxHeight
        }
    
        // events
        var events = {
            onShowPanel: null,          // fire when drop down panel show
            onHidePanel: null,          // fire when drop down panel hide
            onChange: null,             // fire when the value is Changed and the drop down panel is hide
            onRemove: null,             // fire when remove one item
            onClear: null               // fire when clear all item
        }
    
        // methods
        var methods = {
            showPanel: null,            // show the drop down panel
            hidePanel: null,            // hide the drop down panel
            getPanel: null,             // return the drop down panel jqObj
            //readonly: null,             // readonly mode
            //destroy: null,              // destroy
            clear: null,                // clear the value
            //reset: null,                // reset the value
            setValue: null,             // set value
            getValue: null              // return value
        }
    
     */
    ///<amd-module name='RxmCombo'/>
    var defaultOpts = {
        id: "",
        key: {
            idKey: "id",
            textKey: "name" // textKey
        },
        multi: false,
        readonly: false,
        value: [],
        event: {},
        placeholder: "",
        panelWidth: "",
        panelMinWidth: "",
        panelMaxWidth: "",
        panelHeight: "",
        panelMinHeight: "100",
        panelMaxHeight: "260" // panelMaxHeight
    };
    // combo obj cache
    var cache = {};
    // event const
    var Constants = {
        EVENT_MOUSEUP: "mouseup",
        EVENT_FOCUS: "focus",
        EVENT_CLICK: "click"
    };
    //clsFactory(){}
    var clsFactory = function (options) {
        //
        var _vars = {};
        var _options = $.extend(true, defaultOpts, options);
        if (!options.id) {
            console.log("Combo: the id prop is required");
            return;
        }
        var Combo = /** @class */ (function () {
            function Combo() {
                this.render();
            }
            Combo.prototype.render = function () {
                var _this = this, options = _options;
                // _vars
                var vars = _vars = {};
                // $input
                var $input = vars.$input = $("#" + options.id);
                // readonly
                var readonly = vars.readonly = options.readonly || $input.is("input:disabled, input[readonly]");
                // component id
                var cid = vars.cid = "combo_" + options.id;
                // template
                if (!$input.parent().is(".cs-combo-wrapper")) {
                    // $wrap
                    $input.addClass("cs-combo-input").wrap('<div class="cs-combo-wrapper" id="' + cid + '"></div>');
                    var $wrap = vars.$wrap = $input.parent();
                    // $content
                    if (options.multi) {
                        $wrap.addClass("multi");
                        vars.$content = $('<div class="cs-combo-content"></div>').appendTo($wrap);
                    }
                    // $clear
                    if (readonly) {
                        $wrap.addClass("readonly");
                    }
                    else {
                        vars.$clear = $('<div class="cs-combo-clear"><i class="fa fa-trash-o"></i></div>').appendTo($wrap);
                    }
                    // $placeholder
                    if (options.placeholder) {
                        vars.$placeholder = $('<div class="cs-combo-placeholder"></div>').appendTo($wrap);
                    }
                    // $panel
                    vars.$panel = $('<div class="cs-combo-panel" data-for="' + cid + '"></div>').appendTo($(document.body));
                }
                else {
                    vars.$wrap = $input.parent();
                    vars.$content = vars.$wrap.find(".cs-combo-content");
                    vars.$clear = vars.$wrap.find(".cs-combo-clear");
                    vars.$placeholder = vars.$wrap.find(".cs-combo-placeholder");
                    vars.$panel = $(document.body).find(".cs-combo-panel[data-for=" + cid + "]");
                }
                // $placeholder
                if (vars.$placeholder) {
                    vars.$placeholder.html(options.placeholder);
                    vars.$placeholder.css("line-height", vars.$placeholder.height() + "px");
                }
                // $panel
                options.panelWidth ? vars.$panel.css("width", parseInt(options.panelWidth) + "px") : false;
                options.panelMinWidth ? vars.$panel.css("min-width", parseInt(options.panelMinWidth) + "px") : false;
                options.panelMaxWidth ? vars.$panel.css("max-width", parseInt(options.panelMaxWidth) + "px") : false;
                options.panelHeight ? vars.$panel.css("height", parseInt(options.panelHeight) + "px") : false;
                options.panelMinHeight ? vars.$panel.css("min-height", parseInt(options.panelMinHeight) + "px") : false;
                options.panelMaxHeight ? vars.$panel.css("max-height", parseInt(options.panelMaxHeight) + "px") : false;
                _this.panelZIndex();
                // init value
                _this.initValue();
                // bind event
                _this.bindEvent();
            };
            ;
            Combo.prototype.initValue = function () {
                var _this = this, options = _options, vars = _vars;
                var value = vars.value = [].concat(options.value);
                vars.lastValue = [].concat(options.value);
                /*
                if (value && value.length > 0) {
                    Combo.setValue.call(_this, value);
                }
                */
            };
            ;
            Combo.prototype.bindEvent = function () {
                var _this = this, options = _options, vars = _vars, readonly = vars.readonly, $wrap = vars.$wrap, $input = vars.$input, $content = vars.$content, $clear = vars.$clear, $placeholder = vars.$placeholder;
                if (!readonly) {
                    $input.on(Constants.EVENT_MOUSEUP, function (event) {
                        _this.togglePanel();
                    });
                }
                $input.on(Constants.EVENT_FOCUS, function (event) {
                    $input.blur();
                });
                if ($content) {
                    $content.on(Constants.EVENT_MOUSEUP, ".remove", function (event) {
                        event.stopPropagation();
                        if (!readonly)
                            _this.removeValue($(this).closest(".cs-combo-content-item").attr("data-id"));
                    });
                    $content.on(Constants.EVENT_MOUSEUP, function () {
                        $input[Constants.EVENT_MOUSEUP]();
                    });
                }
                $placeholder && $placeholder.on(Constants.EVENT_MOUSEUP, function (event) {
                    $input[Constants.EVENT_MOUSEUP]();
                    event.preventDefault();
                    return false;
                });
                $clear && $clear.on(Constants.EVENT_MOUSEUP, function (event) {
                    _this.clear();
                });
                $wrap.on("showPanel", function (e) {
                    typeof options.event.onShowPanel == "function" && options.event.onShowPanel();
                }).on("hidePanel", function (e) {
                    typeof options.event.onHidePanel == "function" && options.event.onHidePanel();
                }).on("onChange", function (e) {
                    typeof options.event.onChange == "function" && options.event.onChange(vars.value, vars.lastValue, options.id);
                }).on("isDataChanged", function (e) {
                    if (_this.isDataChanged()) {
                        $wrap.trigger("onChange");
                        // reset value
                        vars.lastValue = [].concat(vars.value);
                    }
                }).on("onRemove", function (e, value) {
                    typeof options.event.onRemove == "function" && options.event.onRemove(value);
                }).on("onClear", function (e) {
                    typeof options.event.onClear == "function" && options.event.onClear();
                });
            };
            ;
            Combo.prototype.bindDocumentEvent = function () {
                var _this = this, cid = _vars.cid, $wrap = _vars.$wrap, $panel = _vars.$panel;
                $(document).on(Constants.EVENT_MOUSEUP + "." + cid, function (event) {
                    if (!($wrap.is(event.target) || $wrap.has(event.target).length)
                        && !($panel.is(event.target) || $panel.has(event.target).length)) {
                        _this.hidePanel();
                    }
                });
            };
            ;
            Combo.prototype.unbindDocumentEvent = function () {
                var _this = this, cid = _vars.cid;
                $(document).off(Constants.EVENT_MOUSEUP + "." + cid);
            };
            ;
            Combo.prototype.bindWindowResizeEvent = function () {
                var _this = this, cid = _vars.cid;
                $(window).on("resize" + "." + cid, function () {
                    _this.panelPlaceAt();
                });
            };
            ;
            Combo.prototype.unbindWindowResizeEvent = function () {
                var _this = this, cid = _vars.cid;
                $(window).off("resize" + "." + cid);
            };
            ;
            Combo.prototype.bindWindowScrollEvent = function () {
                var _this = this, cid = _vars.cid;
                var t = null;
                $(document).on('DOMMouseScroll.' + cid + ' mousewheel.' + cid + ' scroll.' + cid, function () {
                    window.clearTimeout(t);
                    t = window.setTimeout(function () {
                        _this.panelPlaceAt();
                    }, 300);
                });
            };
            ;
            Combo.prototype.unbindWindowScrollEvent = function () {
                var _this = this, cid = _vars.cid;
                $(document).off('DOMMouseScroll.' + cid + ' mousewheel.' + cid + ' scroll.' + cid);
            };
            ;
            Combo.prototype.togglePanel = function () {
                var _this = this, $panel = _vars.$panel;
                $panel.is(":visible") ? _this.hidePanel() : _this.showPanel();
            };
            ;
            Combo.prototype.showPanel = function () {
                var _this = this, vars = _vars, $wrap = _vars.$wrap, $panel = _vars.$panel;
                _this.panelPlaceAt();
                $panel.show();
                $wrap.trigger("showPanel");
                _this.bindDocumentEvent();
                _this.bindWindowResizeEvent();
                _this.bindWindowScrollEvent();
                // set lastValue
                vars.lastValue = [].concat(vars.value);
            };
            ;
            Combo.prototype.hidePanel = function () {
                var _this = this, vars = _vars, $wrap = _vars.$wrap, $panel = _vars.$panel;
                $panel.hide();
                $wrap.trigger("hidePanel");
                _this.unbindDocumentEvent();
                _this.unbindWindowResizeEvent();
                _this.unbindWindowScrollEvent();
                $wrap.trigger("isDataChanged");
            };
            ;
            Combo.prototype.readonly = function (readonly) {
                var _this = this;
                // readonly = typeof readonly == "undefined" ? true : false;
            };
            ;
            Combo.prototype.panelPlaceAt = function () {
                var _this = this, options = _options, $panel = _vars.$panel, $input = _vars.$input;
                var position = $input.offset();
                var left = position.left;
                var top = position.top + $input.outerHeight() - 2; // -2
                $panel.css({
                    "left": left,
                    "top": top
                });
                // width auto
                options.panelWidth ? false : $panel.css("width", $input.outerWidth() + "px");
            };
            ;
            Combo.prototype.panelZIndex = function () {
                var _this = this, $panel = _vars.$panel;
                var index_highest = 0;
                $('div').each(function () {
                    var index_current = parseInt($(this).css('zIndex'), 10);
                    if (index_current > index_highest) {
                        index_highest = index_current;
                    }
                });
                $panel.css("z-index", index_highest + 10);
            };
            ;
            Combo.prototype.getPanel = function () {
                var _this = this, vars = _vars;
                return vars.$panel;
            };
            ;
            Combo.prototype.destroy = function () {
                var _this = this;
            };
            ;
            Combo.prototype.clear = function () {
                var _this = this, $wrap = _vars.$wrap;
                _this.setValue([]);
                $wrap.trigger("onClear");
            };
            ;
            Combo.prototype.setValue = function (value) {
                var _this = this, options = _options, vars = _vars, $panel = vars.$panel, $wrap = vars.$wrap;
                vars.value = value || [];
                _this.fillContent();
                if ($panel.is(":hidden")) {
                    $wrap.trigger("isDataChanged");
                }
            };
            ;
            Combo.prototype.fillContent = function () {
                var _this = this, options = _options, key = options.key, vars = _vars, value = vars.value, $content = vars.$content, $wrap = vars.$wrap, $input = vars.$input;
                value.length > 0 ? $wrap.addClass("hasValue") : $wrap.removeClass("hasValue");
                options.multi ? $content.empty() : false;
                var textArr = [];
                if (value && value.length > 0) {
                    var valueActual;
                    if (options.multi) {
                        valueActual = [].concat(value);
                    }
                    else {
                        valueActual = [].concat(value[0]); // get the first one
                    }
                    for (var i = 0; i < valueActual.length; i++) {
                        var v = valueActual[i];
                        textArr.push(v[key.textKey]);
                        if (options.multi) {
                            $content.append('<a class="cs-combo-content-item" data-id="' + v[key.idKey] + '">' + (v[key.textKey] || "") + '<span class="remove">x</span></a>');
                        }
                    }
                }
                $input.val(textArr.join(","));
            };
            ;
            Combo.prototype.removeValue = function (id) {
                var _this = this, key = _options.key, value = _vars.value, $wrap = _vars.$wrap;
                var valueCopy = [].concat(value);
                var target;
                for (var i = 0; i < valueCopy.length; i++) {
                    if (id == valueCopy[i][key.idKey]) {
                        target = valueCopy[i];
                        valueCopy.splice(i, 1);
                    }
                }
                _this.setValue(valueCopy);
                $wrap.trigger("onRemove", [target]);
            };
            ;
            Combo.prototype.getValue = function () {
                var _this = this, vars = _vars;
                return vars.value;
            };
            ;
            Combo.prototype.isDataChanged = function () {
                var _this = this, key = _options.key, vars = _vars, o = vars.lastValue, n = vars.value;
                if (o.length != n.length)
                    return true;
                var mapO = {}, mapN = {};
                for (var i = 0; i < o.length; i++) {
                    mapO[o[i][key.idKey]] = o[i];
                    mapN[n[i][key.idKey]] = n[i];
                }
                for (var j in mapO) {
                    if (typeof mapN[j] == "undefined")
                        return true;
                }
                return false;
            };
            ;
            return Combo;
        }());
        var combo = new Combo();
        cache[options.id] = combo;
        return combo;
    };
    // get combo from cache
    var clsf = clsFactory;
    clsf.getCombo = function (id) {
        return cache[id];
    };
    return clsFactory;
});

define("RxmComboTree", ["require", "exports", "ZTree", "ZTreeExhide", "css!ZTreeCss", "RxmCombo"], function (require, exports, tree, ze, cstree, Combo) {
    "use strict";
    /**
     * combotree - css fed - weijy
     *
     * dependencies
     * combo ztree
     */
    /**
        // options
        var options = {
            combo: {},                      // combo options
            ztree: {},                      // ztree options
            data: [],                       // local data for ztree
            data: {                         // the remote data config
                url: "",                    // the request url
                param: {},                  // the request param
                success: null,              // load data success
                error: null                 // load data error
            },
            //dataFilter: "",                 // define how to filter the data
            formatter: null,                  // define how to render the data
            value: "",                      // init value ("" ,)
            value: [""]                     // init value ([""])
            value: [{}],                    // init value ([{}]);
            search: {
                enable: false,              // enable the search or not
                //placeholder: "",            // placeholder
                fields: []                  // define what fields to search
            }
        }
    
        // events
        var events = {
            onSelect: null,                 // fire when user select a item
            onUnSelect: null,               // fire when user unSelect a item
            onLoadSuccess: null             // load remote data success
        }
    
        // methods
        var methods = {
            getCombo: null,                 // return the combo obj
            getZtree: null,                 // return the ztree obj
            //getData: null,                  // return the ztree data
            setData: null,                  // load local data for ztree
            loadData: null,                 // load remote data for ztreer
            clear: null,                    // clear the value
            //reset: null,                    // reset the value
            setValue: null                  // set value
        }
     */
    // event const
    var Constants = {
        EVENT_MOUSEUP: "mouseup",
        EVENT_KEYUP: "keyup",
        EVENT_FOCUS: "focus",
        EVENT_CLICK: "click"
    };
    // combo obj cache
    var cache = {};
    var defaultOpts = {
        combo: {},
        ztree: {
            data: {
                simpleData: {
                    enable: true
                }
            },
            check: {
                chkboxType: {
                    'Y': '',
                    'N': ''
                } // 默认不关联父子节点
            },
            callback: {}
        },
        data: [],
        dataFilter: "",
        formatter: "",
        search: {
            enable: false,
            placeholder: "搜索",
            fields: [] // define what fields to search
        }
    };
    var clsFactory = function (option) {
        var _options = $.extend(true, defaultOpts, option);
        var _vars = {};
        var _bindEvent = function () {
            var _this = this, options = _options, $search = _vars.$search;
            // 搜索事件
            if (options.search && options.search.enable) {
                var timeout = null;
                $search.on(Constants.EVENT_KEYUP, function () {
                    if (timeout)
                        window.clearTimeout(timeout);
                    timeout = window.setTimeout(function () {
                        _this.search();
                    }, 400);
                });
            }
        };
        //------------------------------------------
        var Combotree = /** @class */ (function () {
            function Combotree() {
            }
            Combotree.prototype.render = function () {
                var _this = this, options = _options, options_combo = _options.combo;
                // 备份用户设置的callback
                try {
                    var onCheckFun = _options.ztree.callback.onCheck;
                    var onClickFun = _options.ztree.callback.onClick;
                    var onAsyncSuccessFun = _options.ztree.callback.onAsyncSuccess;
                    var onRemoveFun = _options.combo.event.onRemove;
                    var onClearFun = _options.combo.event.onClear;
                    var onHidePanelFun = _options.combo.event.onHidePanel;
                }
                catch (e) { }
                _options = $.extend(true, _options, {
                    combo: {
                        event: {
                            onRemove: function (value) {
                                _this.onRemove(value);
                                // 执行用户设置的onRemove
                                typeof onRemoveFun == "function" && onRemoveFun(value);
                            },
                            onClear: function () {
                                _this.onClear();
                                // 执行用户设置的onClear
                                typeof onClearFun == "function" && onClearFun();
                            },
                            onHidePanel: function () {
                                _this.onHidePanel();
                                // 执行用户设置的onHidePanel
                                typeof onHidePanelFun == "function" && onHidePanelFun();
                            }
                        }
                    },
                    ztree: {
                        check: {
                            enable: _options.combo.multi // check由multi属性决定，不由用户设置的check决定
                        },
                        callback: {
                            onCheck: function (event, treeId, treeNode) {
                                //每次清空值，并重新渲染所有check的节点
                                var checkedNodes = _vars.treeObj.getCheckedNodes(true);
                                _this.onClear();
                                _this.checkNode(checkedNodes, true);
                                // 执行用户设置的onCheck
                                typeof onCheckFun == "function" && onCheckFun(event, treeId, treeNode);
                            },
                            onClick: function (event, treeId, treeNode, clickFlag) {
                                if (_vars.multi) { // 多选
                                    _vars.treeObj.checkNode(treeNode, !treeNode.checked, true, true);
                                }
                                else { // 单选
                                    if (false == treeNode.nocheck && false == treeNode.chkDisabled) { // 如果设置了nocheck或者chkDisabled，那么不进行选择
                                        _this.setValue(treeNode[_vars.idKey]);
                                    }
                                    _vars.combo.hidePanel();
                                }
                                // 执行用户设置的onClick
                                typeof onClickFun == "function" && onClickFun(event, treeId, treeNode, clickFlag);
                            },
                            onAsyncSuccess: function (event, treeId, treeNode, msg) {
                                _this.research();
                                // 执行用户设置的onAsyncSuccess
                                typeof onAsyncSuccessFun == "function" && onAsyncSuccessFun(event, treeId, treeNode, msg);
                            }
                        }
                    }
                });
                // key
                _vars.idKey = _options.combo.key.idKey;
                _vars.textKey = _options.combo.key.textKey;
                // multi
                _vars.multi = _options.combo.multi;
                // combo
                var combo = _vars.combo = Combo(options_combo);
                // combo $panel
                var $panel = combo.getPanel();
                // $combotree
                var $combotree = $('<div class="cs-combotree"></div>').appendTo($panel);
                // search
                if (options.search && options.search.enable) {
                    _vars.$search = $('<input class="form-control cs-combotree-search" />').appendTo($combotree);
                }
                // ztree id
                var treeid = _vars.treeid = "ztree_" + options_combo.id;
                // $ztree
                _vars.$ztree = $('<div id="' + treeid + '" class="ztree"></div>').appendTo($combotree);
                // render tree
                this.renderZtree();
            };
            Combotree.prototype.renderZtree = function () {
                var _this = this, options = _options;
                var data = _options.data;
                // async
                _vars.async = false;
                try {
                    _vars.async = _options.async.enable;
                }
                catch (e) { }
                // afterRender
                function afterRenderZtree() {
                    _bindEvent.call(_this);
                    if (options.value && options.value.length > 0)
                        _this.setValue(options.value);
                }
                if (typeof data == "undefined" || $.isArray(data)) {
                    data = data || [];
                    _this.setData(data);
                    afterRenderZtree();
                }
                else if (typeof data == "object") {
                    _this.loadData(data, function () {
                        afterRenderZtree();
                    });
                }
            };
            Combotree.prototype.setData = function (data, callback) {
                var $ztree = _vars.$ztree, treeid = _vars.treeid, options_tree = _options.ztree;
                data = _vars.data = [].concat(data);
                // destroy
                $.fn.zTree.destroy(treeid);
                // formatter
                this.format();
                //init
                _vars.treeObj = $.fn.zTree.init($ztree, options_tree, data);
            };
            Combotree.prototype.format = function () {
                var _this = this, options = _options, options_tree = _options.ztree, data = _vars.data;
                var formatter = _options.formatter;
                if (typeof formatter == "function" && data && data.length > 0) {
                    if (options_tree.data.simpleData.enable) {
                        for (var i = 0; i < data.length; i++) {
                            formatter(data[i]);
                        }
                    }
                    else {
                        var childKey = "children";
                        try {
                            childKey = options_tree.data.key.children;
                        }
                        catch (e) { }
                        var f = function (value) {
                            formatter(value);
                            var children = value[childKey];
                            if (children && children.length > 0) {
                                for (var i = 0; i < children.length; i++) {
                                    f(children[i]);
                                }
                            }
                        };
                        for (var i = 0; i < data.length; i++) {
                            f(data[i]);
                        }
                    }
                }
            };
            Combotree.prototype.loadData = function (data, f) {
                var _this = this;
                var remote = _vars.remote = $.extend({
                    url: "",
                    param: {},
                    success: null,
                    error: null // load data error
                }, data);
                $.ajax({
                    url: remote.url,
                    data: remote.param,
                    success: function (data) {
                        //console.log("dev load success");
                        // 执行开发人员自定义回调
                        typeof remote.success == "function" && remote.success(data);
                        // setData
                        _this.setData(data);
                        f && f();
                    },
                    error: function () {
                        console.log("combotree load data error");
                        typeof remote.error == "function" && remote.error();
                        f && f();
                    }
                });
            };
            /*
            Combotree.getData = getData () {
                var _this = this,
                    _vars = _this._vars;
        
                return _vars.data;
            }
            */
            Combotree.prototype.setValue = function (value) {
                var _this = this, treeObj = _vars.treeObj, idKey = _vars.idKey;
                value = value || [];
                // value
                _vars.value = [];
                // string
                if (typeof value == "string") {
                    value = value.split(",");
                }
                if ($.isArray(value)) {
                    if (value.length > 0) {
                        if (typeof value[0] == "string") {
                            // 将[""]转化成[{}]
                            for (var i = 0; i < value.length; i++) {
                                var v = {};
                                v[idKey] = value[i];
                                value[i] = v;
                            }
                        }
                        else if (typeof value[0] == "object") {
                        }
                        _vars.value = value;
                        // 通过查找ztree的node完善value（将ztree的treeNode给相应的value值）
                        if (treeObj) {
                            var map = {};
                            for (var i = 0; i < value.length; i++) {
                                var v = value[i];
                                map[v[idKey]] = true;
                            }
                            // node filter
                            var nodes = treeObj.getNodesByFilter(function (node) {
                                return map[node[idKey]];
                            });
                            // update value
                            if (nodes && nodes.length > 0)
                                _this.updateValue(nodes, true);
                        }
                    }
                    //渲染value之前应当取消勾选的树节点
                    _this.uncheckAllNodes();
                    // render value
                    _this.renderValue();
                }
                else {
                    console.log("conbotree setValue error!");
                }
            };
            //取消勾选所有树节点
            Combotree.prototype.uncheckAllNodes = function () {
                var _this = this;
                _vars.treeObj.checkAllNodes(false);
            };
            //重写checkNode
            Combotree.prototype.checkNode = function (nodes, status) {
                var _this = this;
                //for(var i=0; i<nodes.length; i++){
                //	var node = nodes[i];
                // set selectData
                this.updateValue(nodes, status);
                //}
                // render value
                _this.renderValue(status);
            };
            //更新value数组
            Combotree.prototype.updateValue = function (obj, status) {
                var _this = this, value = _vars.value || [], idKey = _vars.idKey;
                var map = {};
                for (var i = 0; i < value.length; i++) {
                    var v = value[i];
                    map[v[idKey]] = {
                        index: i,
                        value: v
                    };
                }
                // to []
                var objArr = [].concat(obj);
                if (status) {
                    var length = value.length;
                    for (var i = 0; i < objArr.length; i++) {
                        var obj = objArr[i];
                        if (obj.hasOwnProperty(idKey)) {
                            var index = length + i;
                            //为了使value框内元素按照获取所勾选的节点顺序显示，注释掉下面if代码
                            //                	if (map[obj[idKey]]) { // contain key
                            //                		index = map[obj[idKey]].index;
                            //                	}
                            map[obj[idKey]] = {
                                index: index,
                                value: obj
                            };
                        }
                    }
                }
                else {
                    for (var i = 0; i < objArr.length; i++) {
                        var obj = objArr[i];
                        delete map[obj[idKey]];
                    }
                }
                var temp = [];
                for (var key in map) {
                    temp.push(map[key]);
                }
                ;
                temp.sort(function (a, b) {
                    //return a.index > b.index;
                    return a.index - b.index;
                });
                _vars.value = [];
                for (var i = 0; i < temp.length; i++) {
                    _vars.value.push(temp[i].value);
                }
            };
            //渲染value，调用combo的setValue，并勾选value对应的树节点
            Combotree.prototype.renderValue = function (status) {
                var _this = this, value = _vars.value, combo = _vars.combo, treeObj = _vars.treeObj;
                // combo setValue
                combo.setValue(value);
                // tree checkNode
                if (treeObj) {
                    //为了实现自动勾选下级节点功能，注释掉下一行代码
                    //treeObj.checkAllNodes(false);
                    for (var i = 0; i < value.length; i++) {
                        //treeObj.checkNode(value[i], true);
                        treeObj.checkNode(value[i], status);
                    }
                }
            };
            Combotree.prototype.clearValue = function () {
                _vars.value = [];
            };
            Combotree.prototype.getTree = function () {
                return _vars.treeObj;
            };
            Combotree.prototype.getCombo = function () {
                return _vars.combo;
            };
            Combotree.prototype.clear = function () {
                this.clearValue();
                this.renderValue();
                this.uncheckAllNodes();
            };
            Combotree.prototype.onRemove = function (value) {
                this.updateValue(value, false);
                this.uncheckAllNodes();
                this.renderValue();
            };
            Combotree.prototype.onClear = function () {
                this.clearValue();
                this.renderValue();
                this.uncheckAllNodes();
            };
            Combotree.prototype.onHidePanel = function () {
                var _this = this, options = _options;
                if (options.search && options.search.enable) {
                    _this.cancelSearch();
                }
            };
            Combotree.prototype.search = function () {
                var _this = this, $search = _vars.$search;
                var content = $.trim($search.val());
                if (content) {
                    _vars.searching = true;
                    var nodes = _this.searchTreeNode(content);
                    _this.setTreeVisible(false);
                    if (nodes && nodes.length > 0) {
                        for (var i = 0; i < nodes.length; i++) {
                            _this.setNodeVisible(nodes[i]);
                        }
                    }
                }
                else {
                    _this.cancelSearch();
                }
            };
            Combotree.prototype.cancelSearch = function () {
                var _this = this, $search = _vars.$search;
                _vars.searching = false;
                $search.val('');
                _this.setTreeVisible(true);
            };
            Combotree.prototype.research = function () {
                var _this = this;
                if (_vars.searching) {
                    _this.search();
                }
            };
            Combotree.prototype.searchTreeNode = function (content) {
                var _this = this, options = _options, treeObj = _vars.treeObj, idKey = _vars.idKey, textKey = _vars.textKey;
                var fields = _options.search.fields;
                if (fields.length == 0) {
                    fields.push(textKey);
                }
                var nodes = [];
                for (var i = 0; i < fields.length; i++) {
                    nodes = nodes.concat(treeObj.getNodesByParamFuzzy(fields[i], content));
                }
                var map = {};
                for (var i = 0; i < nodes.length; i++) {
                    var node = nodes[i];
                    map[node[idKey]] = node;
                }
                var result = [];
                for (var key in map) {
                    result.push(map[key]);
                }
                return result;
            };
            Combotree.prototype.setNodeVisible = function (node) {
                var _this = this, treeObj = _vars.treeObj, $ztree = _vars.$ztree;
                // parent visible and expand
                var parentNode = node.getParentNode();
                if (parentNode) { // find parent node
                    treeObj.expandNode(parentNode, true);
                    treeObj.showNode(node); // show node
                    _this.setNodeVisible(parentNode); // show parent node
                }
                else {
                    treeObj.showNode(node); // show node
                }
            };
            Combotree.prototype.setTreeVisible = function (status) {
                var _this = this, treeObj = _vars.treeObj, $ztree = _vars.$ztree;
                var allNodes = treeObj.transformToArray(treeObj.getNodes());
                if (status) {
                    //$ztree.removeClass("hideNode");
                    if (!!treeObj.showNodes) {
                        treeObj.showNodes(allNodes);
                    }
                }
                else {
                    //$ztree.addClass("hideNode");
                    treeObj.hideNodes(allNodes);
                    // reset all treeNode
                    //$ztree.find("li.showNode").removeClass("showNode");
                }
            };
            return Combotree;
        }());
        //------------------------------------------
        var combotree = new Combotree();
        cache[_options.id] = combotree;
        if (!_options.notRender)
            combotree.render();
        return combotree;
    };
    var init = clsFactory;
    init.getCombotree = function (id) {
        return cache[id];
    };
    return clsFactory;
});

define("RxmLayoutForm", ["require", "exports", "RxmControl", "RxmComboTree", "JQuery.validate.extra", "JQuery.validate.message", "RxmAppTool", "RxmGrid", "RxmPageBase"], function (require, exports, control, ComboTree, extra, message, appTool, _RxmGrid, PageBase) {
    "use strict";
    var RxmGrid = _RxmGrid;
    // declare  let PageBase: any
    var fileInfo;
    var _document = document;
    /**
    * 引入类声明公共方法
    */
    var thisObj = appTool.thisObj;
    var forms = {};
    var ClsFactory = function (config) {
        var _initBor = false;
        var fileUpView;
        if (!config || !config.id) {
            //console.error('必须为form定义id')
        }
        var r = forms[config.id];
        if (!!r) {
            return r;
        }
        /**@type {String} */
        var _id = config.id;
        var _key = "";
        /**记录有没有同名的radio 和 checkbox */
        var _radioCheckboxNames;
        var formDirty = false;
        var _gt = {};
        /**是否初始化了 校验 */
        var validateTag = true;
        var jForm = $("#" + _id);
        var _name = $("#" + _id).attr('name');
        var jvalidator;
        var _selectorSubmitBtn = "[rxmformid='" + _id + "']button";
        var formVal;
        /**
         * 序列化表单元素为JSON对象
         * @param form          Form表单id或表单jquery DOM对象
         * @returns {{}}
         */
        var _serialize = function (form) {
            var $form = (typeof (form) == "string" ? $("#" + form) : form);
            var dataArray = $form.serializeArray(), result = {};
            $(dataArray).each(function () {
                if (result[this.name]) {
                }
                else {
                    var element = $form.find("[name='" + this.name + "']")[0];
                    var type = (element.type || element.nodeName).toLowerCase();
                    result[this.name] = (/^(select-multiple|checkbox|radio)$/i).test(type) ? _checkRadioInputValue(this.name) : this.value;
                }
            });
            return result;
        };
        /**代表表单的input 数据
         * @param  {String|HTMLElement} nameOrDom  名字或者dom 元素
         * @param  {Object}  value
         */
        var _checkRadioInputValue = function (nameOrDom, value) {
            //var value=[{value:true,chacked:true},{value:false,chacked:false}]
            var name;
            /**@type {rxm.jqueryobj} */
            var jqDom;
            $.isString(nameOrDom) && (name = nameOrDom) && (jqDom = $('#' + _id + ' ' + '[name=' + nameOrDom + ']'));
            $.isDom(nameOrDom) && (jqDom = $(nameOrDom)) && (name = jqDom.attr('name'));
            if (jqDom.length == 1) {
                $.isExist(value) && (typeof value == 'boolean') && (jqDom.prop('checked', value));
                return jqDom.prop('checked');
            }
            else if (jqDom.length > 1) {
                !_radioCheckboxNames && (_radioCheckboxNames = {});
                !_radioCheckboxNames[name] && (_radioCheckboxNames[name] = name);
                var it;
                if (value) {
                    //modify by hanchunxiao 2019-04-18 修改checkbox和radio初始化值格式
                    $.isString(value) && (value = value.split(','));
                    if ($.isArray(value)) {
                        var radioName = $.isString(nameOrDom) ? nameOrDom : jqDom.attr('name');
                        for (var i = 0; i < value.length; i++) {
                            it = value[i];
                            !!it && $('#' + _id + ' ' + '[name=' + radioName + '][value=' + it + ']').prop('checked', true);
                            //it.value && $('[value="' + it.value + '"]').prop('checked', it.checked) ; modify by wanghuan 2018-12-12 增加选择器，防止同一个页面下radio的value相同赋值干扰的问题
                            // it.value && $('#' + _id + ' ' + '[name=' + radioName + '][value=' + it.value + ']').prop('checked',it.checked)
                            // !it.value && $(jqDom[i]).prop('checked', it.checked)
                        }
                    }
                }
                //modify by hanchunxiao 2019-04-18 修改checkbox和radio值格式由[{}]改为逗号分隔的字符串
                // var ret = []
                // for (var i = 0; i < jqDom.length; i++) {
                //     var jq = $(jqDom[i])
                //     it = {
                //         value: jq.attr('value'),
                //         checked: jq.prop('checked')
                //     }
                //     ret.push(it)
                // }
                var ret = '';
                for (var i = 0; i < jqDom.length; i++) {
                    var jq = $(jqDom[i]);
                    if (jq.prop('checked')) {
                        if (ret == '') {
                            ret = jq.attr('value');
                        }
                        else {
                            ret = ret + "," + jq.attr('value');
                        }
                    }
                }
                return ret;
            }
        };
        var _radioCheckboxArrToString = function (data) {
            if (_radioCheckboxNames) {
                for (var name in _radioCheckboxNames) {
                    var tmp = data[name];
                    $.isArray(tmp) && (data[name] = JSON.stringify(tmp));
                }
            }
            return data;
        };
        /**
         * 设置或者取出  form 下的 checekbox 或者radio的值
         * @param {String|HTMLElement} nameOrDom
         * @param {*} value
         */
        /**默认的提交成功函数*/
        var onFormSubmitSuccess = function (data) {
            var args = {
                data: {
                    theform: {
                        _key: _key,
                        value: formVal
                    },
                    _gt: _gt
                },
                formid: _id,
                resultData: data
            };
            this.attrDirtied(false);
            PageBase.closePage(args);
        };
        /**输入框的值已经被转变激发函数*/
        var onInputValueChanged = function (e, data) { };
        /**默认表单被提交并且失败*/
        var onFormSubmitFail = function (e, data) {
            alert("表单提交失败");
        };
        /**接收slibar 传入的数据 */
        var _onSlidebarBegin = function (e, d) {
            !d.args && (d.args = {});
            !d.args.form && (d.args.form = {});
            d.args.form._pdata = $.extend(true, {}, {
                theform: {
                    _key: _key,
                    value: formVal
                },
                _gt: _gt
            });
            d.args.form._pdata.theform = undefined;
        };
        var _onbeforeunload = function (event) {
            if (formDirty) {
                var msg = "表单值已经修改，重新加载将失去数据";
                event.returnValue = msg;
                return msg;
            }
        };
        /**默认的表单提交函数*/
        var _onFormSubmit = function (e, data) {
            //     var expressionTag = _expressionCheck()
            //     if(!!expressionTag&&!expressionTag.tag){
            //         alert(expressionTag.msg)
            //         return
            //     }
            //     var serviceTag = _serviceCheck()
            //     if(!serviceTag){
            //         alert('不符合服务校验，请检查输入项')
            //         return
            //     }
            //    //因果校验 
            //     var causalTag = _causalCheck()
            //     if(!!causalTag && !causalTag.tag){
            //         alert(causalTag.msg)
            //         return
            //     }
            // if ($('div[inputname^="rxmvld"]').length > 0) {
            //     let rrr: any = window
            //     var rxmvRun = rrr.require('OrivRunMgr')
            //     var validateReturn = rxmvRun.RunValidate({ html: $('html')[0].outerHTML })
            //     for(let i = 0; i < validateReturn.length ; i++ ){
            //             if(!validateReturn[i].success){
            //                 if (!!validateReturn[i].message) {
            //                     alert(validateReturn[i].message)
            //                 } else {
            //                     alert('校验失败')
            //                 }
            //                 return                    }
            //         }
            // }
            if (data.url && data.url !== "/") {
                if (data.url.length == 0) {
                    // PageBase.closePage(data.data);
                }
                else {
                    $.ajax({
                        url: data.url,
                        data: data.data,
                        type: "post",
                        // the: this,
                        success: $.proxy(onFormSubmitSuccess, this),
                        error: $.proxy(onFormSubmitFail, this)
                    });
                }
            }
            else {
                var args = {
                    data: {
                        theform: {
                            _key: _key,
                            value: formVal
                        },
                        _gt: _gt,
                        dirtied: formDirty
                    },
                    formid: _id
                    //btndata: $(this.the.btn).data("submit")
                };
                this.attrDirtied(false);
                PageBase.closePage(args);
            }
        };
        /**表单被重置激发函数 */
        var _onFormReset = function (e, data) {
            window.location.reload();
        };
        /**
         * 规范url 为url +getServer
         * @param {String} path
         */
        var contextPath = function (path) {
            path.length > 0 && path.charAt(0) != '/' && (path = "/" + path);
            var tmp = getServer() + "/";
            path.indexOf(tmp) != 0 && (path = getServer() + path);
            return path;
        };
        var ruleCascadeSelect = function (d) {
            var temp;
            d && d.initData && (temp = d.initData.url) && (d.initData.url = contextPath(temp));
        };
        var _onparentselectchange = function (e, data) {
            /**级联父select change事件执行的方法*/
            ///<param name="e" value="event"></param>
            var $target = $(e.currentTarget);
            var value = e.currentTarget.value;
            var ormCascadeSelect = $target.attr('rxmcascadeselect');
            ormCascadeSelect = JSON.parse(ormCascadeSelect);
            ruleCascadeSelect(ormCascadeSelect);
            //加载子级联select optionValue
            _onLoadChildSelectValue.call(this, {
                ormCascadeSelect: ormCascadeSelect,
                parentValue: value
            });
        };
        /**初始化单选和多选数据*/
        var _initRadioAndCheckData = function () {
            var $radio = jForm.find('input[type="radio"]');
            if (!!$radio) {
                for (var i = 0; i < $radio.length; i++) {
                    var name = $($radio[i]).attr('name');
                    //初始化form的data
                    formVal[name] = $('input[name="' + name + '"]:checked').val();
                }
            }
            var $checkbox = jForm.find('input[type="checkbox"]');
            if (!!$checkbox) {
                for (var i = 0; i < $checkbox.length; i++) {
                    var name = $($checkbox[i]).attr('name');
                    var cvalue = [];
                    $('input[name="' + name + '"]').each(function (i, e) {
                        if ($(e).prop('checked') == true) {
                            cvalue.push($(e).val());
                        }
                    });
                    formVal[name] = cvalue;
                }
            }
        };
        /**子窗口关闭时，接收子窗口的数据*/
        var _onSubClose = function (e, data) {
            ///<param name=""  type=""></param>
            if (!!data && !!data.data && data.data.dirtied) {
                //console.info("_onSubClose")
                this.attrDirtied(data.data.dirtied);
                //关闭时候添加gt原有数据
                data.data._gt && ($.extend(true, _gt, data.data._gt));
                var id = data.formid;
                if (data.data.theform) {
                    var key = data.data.theform._key;
                    /**获取子页面form主键key值*/
                    var idStr = data.data.theform.value[key];
                    /**将子页面form数据保存至父页面数据对象*/
                    !_gt[id] && (_gt[id] = {
                        _key: key,
                        value: []
                    });
                    var its = _gt[id];
                    var it = data.data.theform.value;
                    if (it._op_type == "added") {
                        its.value.push(it);
                    }
                    else if (it._op_type == "modified") {
                        var i = 0;
                        var bpush = true;
                        for (i = 0; i < its.value.lenght; i++) {
                            if (its.value[i][key] == it[key]) {
                                $.extend(its.value[i], it[key]);
                                bpush = false;
                                break;
                            }
                        }
                        if (bpush) {
                            its.value.push(it);
                        }
                    }
                }
                ///**父页面存在表格，获取表格所有的数据进行刷新*/
                //这里先注释掉了
                var gridId = $("div[rxmformid='" + id + "']").attr("id");
                if (gridId) {
                    var gridObj = RxmGrid({ "id": gridId });
                    var data = { theform: { _key: _key, value: formVal }, _gt: _gt };
                    var gridAllData = gridObj.getAllData();
                    var key = data._gt[id]._key;
                    if (gridAllData.length > 0) {
                        //var nowKey = it[key];
                        var nowKey;
                        for (var j = 0; j < _gt[id].value.length; j++) {
                            var is = true;
                            nowKey = _gt[id].value[j][key];
                            for (var i = 0, l = gridAllData.length; i < l; i++) {
                                if (gridAllData[i][key] === nowKey) {
                                    gridAllData.splice(i, i + 1, _gt[id].value[j]);
                                    gridObj.reload(gridAllData);
                                    is = false;
                                    break;
                                }
                            }
                            if (is) {
                                //original表格
                                //gridObj.appendRow(it);
                                //originalM表格
                                gridAllData.unshift(_gt[id].value[j]);
                                gridObj.reload(gridAllData);
                            }
                        }
                    }
                    else {
                        gridObj.reload(_gt[id].value);
                    }
                }
            }
        };
        var _onWidgetClosed = function () {
            if (formDirty) {
                var msg = "表单值已经修改，关闭将失去数据";
                return window.confirm(msg);
            }
        };
        /**根据form 或者 rxmurl 的值 获取远程数据 */
        var _fetchInitValue = function () {
            var initForm = this.getInitForm();
            var optype = "";
            !!(initForm) && initForm.optype && (optype = initForm.optype);
            optype = ($.isExist(initForm) && initForm.optype &&
                (initForm.optype == "new" ||
                    initForm.optype == "add" ||
                    initForm.optype == "added" ||
                    initForm.optype == "insert") ? "added" : "");
            formVal._op_type = optype;
            var initdataIsEmpty = true;
            if (initForm && initForm.initData) {
                this.deserialize(initForm.initData, false);
                initdataIsEmpty = false;
                //formVal = _serialize(_id)
            }
            ;
            if (initForm && initForm.initLoad) {
                if (!!!initForm.initLoad.success) {
                    initForm.initLoad.success = $.proxy(_initLoadSuccess, this);
                }
                ;
                if (!!!initForm.initLoad.error) {
                    initForm.initLoad.error = $.proxy(_initLoadError, this);
                }
                $.ajax(initForm.initLoad);
                initdataIsEmpty = false;
            }
            if (initdataIsEmpty) {
                this.deserialize(undefined, false);
            }
        };
        /**
         * 序列化表单元素为JSON对象
         * @param {*} data          cls表单id或表单jquery DOM对象
         * @returns {*}
         */
        var _initLoadSuccess = function (data) {
            if (data != null) {
                (data.success && data.data) && (data = data.data);
                RxmLayoutFormImpl.prototype.deserialize(data, false);
                //formVal = _serialize(_id)
            }
        };
        var _initLoadError = function (a, b, c) {
        };
        /**生成校验规则以及提示信息*/
        var _getValidateRule = function () {
            var s = "#" + _id + " input," + "#" + _id + " select," + "#" + _id + " textarea";
            var validateRule = {};
            for (var j = 0; j < $(s).length; j++) {
                var $selector = $($(s)[j]);
                var enumTrueArr = ["rxmrequired", "rxmemail", "rxmurl", "rxmdate", "rxmnumber", "rxmdigits", "rxmcreditcard"];
                var enumValueArr = ["rxmequal", "rxmmaxlength", "rxmminlength", "rxmrangelength", "rxmmax", "rxmmin", "rxmrange"];
                if (!!!validateRule.rules) {
                    validateRule.rules = {};
                }
                if (!!!validateRule.messages) {
                    validateRule.messages = {};
                }
                //校验值为true的校验
                for (var i = 0; i < enumTrueArr.length; i++) {
                    if (typeof ($selector.attr(enumTrueArr[i])) != 'undefined') {
                        var name = $selector.attr('name');
                        var enumName = enumTrueArr[i].substring(3, enumTrueArr[i].length);
                        if (enumName == 'date')
                            enumName = 'dateISO';
                        validateRule.rules[name] = {};
                        validateRule.rules[name][enumName] = true;
                        var message = $selector.attr('rxmmessage');
                        if (!!message) {
                            validateRule.messages[name] = {};
                            validateRule.messages[name][enumName] = message;
                        }
                    }
                }
                //校验值为输入值的校验
                for (var i = 0; i < enumValueArr.length; i++) {
                    if (typeof ($selector.attr(enumValueArr[i])) != 'undefined') {
                        var name = $selector.attr('name');
                        var enumName = enumValueArr[i].substring(3, enumValueArr[i].length);
                        if (enumName == 'equal')
                            enumName = 'equalTo';
                        validateRule.rules[name] = {};
                        validateRule.rules[name][enumName] = $selector.attr(enumValueArr[i]);
                        var message = $selector.attr('rxmmessage');
                        if (!!message) {
                            validateRule.messages[name] = {};
                            validateRule.messages[name][enumName] = message;
                        }
                    }
                }
                //自定义正则表达式校验
                if (typeof ($selector.attr('rxmreg')) != 'undefined') {
                    //console.log($selector.attr('name'));
                    var name = $selector.attr('name');
                    var _validator = $;
                    _validator.validator.addMethod("rxmreg", function (value, element) {
                        var ormreg = new RegExp($(element).attr('rxmreg'));
                        return this.optional(element) || (ormreg.test(value));
                    }, function (params, element) {
                        var message = typeof $(element).attr('rxmmessage') == 'undefined' ? "请检查输入项" : $(element).attr('rxmmessage');
                        return "<font color='#a94442'>" + message + "</font>";
                    });
                }
            }
            return validateRule;
        };
        /**检测form状态，如果是view，则隐藏按钮并禁止输入内容*/
        var _formOptypeCheck = function () {
            var optype;
            if (!!(optype = appTool.getAppArgs()) && (optype = optype.form) && (optype = optype.optype) && (optype == 'view')) { //查看模式，输入框不可编辑并隐藏按钮
                jForm.find('input').attr('disabled', 'disabled');
                jForm.find('textarea').attr('disabled', 'disabled');
                jForm.find('select').attr('disabled', 'disabled');
                jForm.find('input[type=radio]').attr('disabled', 'disabled');
                jForm.find('input[type=checkbox]').attr('disabled', 'disabled');
                jForm.find('.orm-form-btnbar button').css('display', 'none');
            }
        };
        /**递归处理字符串中的[[]]标志，返回值替换后的字符串方法
         * @type  {String} dataStr 需要处理的字符串
         */
        var _getAttrValue = function (dataStr) {
            //var reg = '\\{\{(.*?)\}\\}';
            var reg = '\\[\\[(.*?)\\]\\]';
            var result = dataStr.match(reg);
            if (result == null) {
                return dataStr;
            }
            else {
                //进行替换处理
                var paramValue = '';
                if (result[1].indexOf('.') != -1) {
                    var paramFrom = result[1].split('.')[0];
                    var param = result[1].split('.')[1];
                    if (paramFrom == 'parent') {
                        //从parent中获取值
                        //从parent中获取值
                        var wArg = appTool.getAppArgs();
                        if (!!wArg && wArg.form && !!wArg.form.initData && !!wArg.form.initData[param]) {
                            paramValue = wArg.form.initData[param];
                        }
                    }
                    else if (paramFrom == 'form') {
                        //获取当前from中的值
                        paramValue = jForm.find('[name="' + param + '"]').val();
                    }
                    //判断paramValue类型
                    if (typeof (paramValue) == 'string') { //如果是字符串，则添加双引号
                        dataStr = dataStr.replace(result[0], '"' + paramValue + '"');
                    }
                    else if (typeof (paramValue) == 'number') { //如果是数字，直接替换
                        dataStr = dataStr.replace(result[0], paramValue);
                    }
                    else if (typeof (paramValue) == 'boolean') { //如果是布尔型，直接替换
                        dataStr = dataStr.replace(result[0], paramValue);
                    }
                    else if (typeof (paramValue) == 'object') { //如果是对象，直接替换
                        dataStr = dataStr.replace(result[0], JSON.stringify(paramValue));
                    }
                    else if (typeof (paramValue) == 'undefined') {
                        dataStr = dataStr.replace(result[0], '""');
                    }
                    dataStr = _getAttrValue(dataStr);
                    return dataStr;
                }
                else {
                    return dataStr;
                }
            }
        };
        var onValidatePlacement = function (error, element) {
            /**jquery 验证响应事件*/
            $(element).closest('div').append(error);
        };
        var _onSubmitBtn = function (e) {
            if (this.validateEach()) {
                var d = this.getSubmitData();
                //获取这个按钮的
                if ($.isExist(d)) {
                    var dom = e.currentTarget;
                    var it = $(dom).data("submit");
                    d = $.extend(true, d, it);
                    if ($.isFunction(this.submitFormat)) {
                        d = this.submitFormat(dom, d);
                    }
                    var rxmurl = $(dom).attr("rxmurl");
                    rxmurl.indexOf("/") != 0 && (rxmurl = "/" + rxmurl);
                    var data = {
                        btn: e,
                        url: getServer() + rxmurl,
                        data: d
                    };
                    $(_id + this.msgEnum.formSubmit).rxmTriggerCmd({ data: data });
                }
            }
        };
        /**初始化默认值select，后台请求的select，级联select*/
        var _initSelectValue = function () {
            var $wrap = jForm;
            var ormSelects = $wrap.find(".rxm-select");
            if (!!ormSelects && ormSelects.length > 0) { //存在下拉框
                for (var i = 0; i < ormSelects.length; i++) {
                    var $ormSelect = $(ormSelects[i]);
                    var initData = $ormSelect.attr('rxminitdata');
                    if (!!initData) { //存在默认值
                        initData = JSON.parse(initData.replace(/\'/g, '"'));
                        if ($.isArray(initData)) {
                            var optionHtml = '';
                            for (var j = 0; j < initData.length; j++) {
                                var option = initData[j];
                                if (option['value'] != null && option['text'] != null) {
                                    optionHtml += '<option value="' + option['value'] + '"';
                                    if (!!option['selected']) {
                                        optionHtml += ' selected="' + option['selected'] + '"';
                                        //设置form中select的值
                                        formVal[$ormSelect.attr('name')] = option['value'];
                                    }
                                    optionHtml += '>' + option['text'] + '</option>';
                                }
                            }
                            $ormSelect.append(optionHtml);
                        }
                    }
                    var initLoad = $ormSelect.attr('rxminitload');
                    if (!!initLoad) { //存在请求后台的默认值
                        initLoad = JSON.parse(initLoad);
                        if (!!initLoad['url']) { //存在url
                            var the = this;
                            initLoad['data'] = this.getAttrValue($ormSelect, 'fetchdata');
                            $.ajax({
                                url: initLoad['url'],
                                data: initLoad['data'],
                                type: 'post',
                                async: false,
                                success: function (data) {
                                    if (data != null && $.isFunction(the[$ormSelect.attr('name') + 'OptionFormat'])) {
                                        data = the[$ormSelect.attr('name') + 'OptionFormat'](data);
                                    }
                                    //设置option
                                    if (data != null) {
                                        var optionHtml = '';
                                        //设置默认选中值 modify by wanghuan 2019-03-06
                                        var defaultValue;
                                        var selectTag = false;
                                        for (var k = 0; k < data.length; k++) {
                                            if (data[k].value != null && data[k].text != null) {
                                                if (k == 0) {
                                                    defaultValue = data[k]['value'];
                                                }
                                                optionHtml += '<option value="' + data[k]['value'] + '"';
                                                if (!!data[k].selected) {
                                                    optionHtml += ' selected="' + data[k]['selected'] + '"';
                                                    formVal[$ormSelect.attr('name')] = data[k]['value'];
                                                    selectTag = true;
                                                }
                                                optionHtml += '>' + data[k]['text'] + '</option>';
                                            }
                                        }
                                        if (!selectTag) {
                                            formVal[$ormSelect.attr('name')] = defaultValue;
                                        }
                                        $ormSelect.append(optionHtml);
                                    }
                                }
                            });
                        }
                    }
                    var ormCascadeSelect = $ormSelect.attr('rxmcascadeselect');
                    if (!!ormCascadeSelect) { //存在级联关系的select
                        //绑定级联父select改变时事件
                        $ormSelect.on(this._formEvtEnum.change, "", $.proxy(_onparentselectchange, this));
                        //加载子级联select optionValue
                        var wArg = appTool.getAppArgs();
                        if (!wArg || !wArg.form) {
                            _onLoadChildSelectValue.call(this, {
                                ormCascadeSelect: JSON.parse(ormCascadeSelect),
                                parentValue: $ormSelect.val(),
                                childValue: '',
                                state: "added"
                            });
                        }
                        else if (!!wArg && wArg.form && wArg.form.optype != 'edit') {
                            _onLoadChildSelectValue.call(this, {
                                ormCascadeSelect: JSON.parse(ormCascadeSelect),
                                parentValue: $ormSelect.val(),
                                childValue: '',
                                state: wArg.form.optype
                            });
                        }
                    }
                }
            }
        };
        /**初始化日期选择器 */
        var _initDate = function () {
            //判断是移动端，调用原生日期插件
            var rrr = window;
            var isMobileOpen = rrr.require('RxmAppTool').isMobileOpen();
            if (isMobileOpen) {
                var $wrap = jForm;
                var rxmDate = $wrap.find(".rxm-date");
                if (!!rxmDate && rxmDate.length > 0) { //存在日期输入框
                    for (var i = 0; i < rxmDate.length; i++) {
                        var $rxmDate = $(rxmDate[i]);
                        var dateType = $rxmDate.attr("type");
                        //设置为文本输入框，输入框禁止软键盘弹出
                        $rxmDate.attr("type", "text");
                        $rxmDate.focus(function () {
                            _document.activeElement.blur();
                        });
                        //判断日期选择器类型 
                        //日期选择器
                        if (dateType == 'date') {
                            $rxmDate.tap(function (event) {
                                control.openDatePicker({
                                    callback: function (e, data) {
                                        data.year && data.month && data.day
                                            && $(event.target).val(data.year + "/" + data.month + "/" + data.day);
                                    }
                                });
                            });
                        }
                        //时间选择器
                        if (dateType == 'time') {
                            $rxmDate.tap(function (event) {
                                control.openTimePicker({
                                    callback: function (e, data) {
                                        data.hour && data.minute
                                            && $(event.target).val(data.hour + ":" + data.minute);
                                    }
                                });
                            });
                        }
                        //年月日时分
                        if (dateType == 'datetime-local') {
                            $rxmDate.tap(function (event) {
                                control.openDateAndTimePicker({
                                    callback: function (e, data) {
                                        // console.log(JSON.stringify(data))
                                        data.year && data.month && data.day && (data.hour) && (data.min)
                                            && $(event.target).val(data.year + "/" + data.month + "/" + data.day + " " + data.hour + ":" + data.min);
                                    }
                                });
                            });
                        }
                        //时分秒
                        if (dateType == 'second') {
                            $rxmDate.tap(function (event) {
                                control.openTimeAndSecondPicker({
                                    callback: function (e, data) {
                                        // console.log(JSON.stringify(data))
                                        data.hour && data.minute && data.second
                                            && $(event.target).val(data.hour + ":" + data.minute + ":" + data.second);
                                    }
                                });
                            });
                        }
                    }
                }
            }
        };
        /**初始化组织选择输入框 */
        var _initSelectOrg = function () {
            //判断是移动端
            var rrr = window;
            var isMobileOpen = rrr.require('RxmAppTool').isMobileOpen();
            if (isMobileOpen) {
                var $wrap = jForm;
                var rxmSelectOrg = $wrap.find(".rxm-selectOrg");
                if (!!rxmSelectOrg && rxmSelectOrg.length > 0) {
                    for (var i = 0; i < rxmSelectOrg.length; i++) {
                        var $rxmSelectOrg = $(rxmSelectOrg[i]);
                        $rxmSelectOrg.tap(function (event) {
                            _document.activeElement.blur();
                            //设置tagType
                            var tagType = $(event.target).attr('rxmtagtype');
                            (typeof tagType == 'string') && (tagType = JSON.parse(tagType.replace(/\'/g, '"')));
                            //设置是否多选
                            var multi = typeof $(event.target).attr('rxmmulti') != 'undefined';
                            //设置无数据时是否提交
                            var noDataCanSubmit = typeof $(event.target).attr('rxmnodatacansubmit') != 'undefined';
                            //设置treedata
                            var treeData = typeof $(event.target).attr('rxmtreedata') == 'string' ? JSON.parse(($(event.target).attr('rxmtreedata').replace(/\'/g, '"'))) : {};
                            //设置hideNode
                            var hideNode = typeof $(event.target).attr('rxmhidenode') == 'string' ? JSON.parse(($(event.target).attr('rxmhidenode').replace(/\'/g, '"'))) : {};
                            PageBase.OrgSelect({
                                hideNode: hideNode,
                                multi: multi,
                                treeData: treeData,
                                noDataCanSubmit: noDataCanSubmit,
                                tagType: tagType,
                                data: typeof $(event.target).attr('rxmdata') == 'string' ? JSON.parse($(event.target).attr('rxmdata')) : {},
                                callback: function (data) {
                                    if ((!!data) && (!!data.selectedAll)) {
                                        // var selData = []; // 画表格使用
                                        //names选择人员的名称，显示在input中
                                        var names = '';
                                        //selDataObj存储选择的信息，存入rxmdata，作为下次传入data
                                        var selDataObj = {};
                                        if (data.selectedAll.dept) {
                                            var deptList = [];
                                            $.each(data.selectedAll.dept, function (index, obj) {
                                                deptList.push(obj.deptUuid);
                                                names = names + obj.deptName + ",";
                                            });
                                            selDataObj.dept = deptList;
                                            // selData = selData.concat(data.selectedAll.dept);
                                        }
                                        if (data.selectedAll.user) {
                                            var userList = [];
                                            $.each(data.selectedAll.user, function (index, obj) {
                                                userList.push({
                                                    deptUuid: obj.deptUuid,
                                                    userUuid: obj.userUuid
                                                });
                                                names = names + obj.userName + ",";
                                            });
                                            selDataObj.user = userList;
                                            // selData = selData.concat(data.selectedAll.user);
                                        }
                                        if (data.selectedAll.role) {
                                            var roleList = [];
                                            $.each(data.selectedAll.role, function (index, obj) {
                                                roleList.push(obj.roleUuid);
                                                names = names + obj.roleName + ",";
                                            });
                                            selDataObj.role = roleList;
                                            // selData = selData.concat(data.selectedAll.role);
                                        }
                                        if (data.selectedAll.roleMember) {
                                            var roleMemberList = [];
                                            $.each(data.selectedAll.roleMember, function (index, obj) {
                                                roleMemberList.push(obj.userUuid);
                                                names = names + obj.userName + ",";
                                            });
                                            selDataObj.roleMember = roleMemberList;
                                            // selData = selData.concat(data.selectedAll.roleMember);
                                        }
                                        if (data.selectedAll.gw) {
                                            var gwList = [];
                                            $.each(data.selectedAll.gw, function (index, obj) {
                                                gwList.push({
                                                    deptUuid: obj.deptUuid,
                                                    gwUuid: obj.gwUuid
                                                });
                                                names = names + obj.gwName + ",";
                                            });
                                            selDataObj.gw = gwList;
                                            // selData = selData.concat(data.selectedAll.gw);
                                        }
                                        $(event.target).attr('rxmdata', JSON.stringify(selDataObj));
                                        names = names.substring(0, names.length - 1);
                                        $(event.target).val(names);
                                    }
                                    // else{
                                    //     (!!data)&&(!!data.type)&&(data.type=="submit")
                                    //     && ($(event.target).val(""))
                                    //     &&($(event.target).removeAttr('rxmdata'));
                                    // }
                                }
                            });
                        });
                    }
                }
            }
        };
        var _initRange = function () {
            jForm.find("[type='range']").bind('input', function (e) {
                var v = this.value;
                var max = parseInt($(e.target).attr("max"));
                var per = v / max * 100;
                $(e.target).css("background-size", per + "% 100%");
            });
        };
        /**
         * 初始化下上传方法
         */
        var _initFileUploader = function (editTag) {
            var _this_1 = this;
            var fileUploaders = jForm.find('.rxm-file-uploader');
            if (!!fileUploaders && fileUploaders.length > 0) {
                var rqr = window;
                rqr.require(["RxmFormUploader", "RxmFileInfo"], function (RxmFormUploader, f) {
                    //遍历form中的所有上传
                    fileInfo = f;
                    fileUpView = {};
                    for (var i = 0; i < fileUploaders.length; i++) {
                        var curSelect = $(fileUploaders[i]).parent().parent();
                        var curId = curSelect.attr('id');
                        var name = $(fileUploaders[i]).attr('name');
                        var _this = _this_1;
                        var onChange = function (data) {
                            var a = {
                                name: name,
                                value: data,
                                from: "userkey"
                            };
                            _this.inputValue(a);
                        };
                        fileUpView[name] = new RxmFormUploader({ id: curId, onChange: onChange });
                    }
                });
            }
        };
        /**加载子级联select的optionValue*/
        var _onLoadChildSelectValue = function (data) {
            ///<param  name="ormCascadeSelect"   type="Object"></param>
            ///<param name="parentValue" value="">父级联的选择值</param>
            ///<param name="childValue" value="">子级联的选择值</param>
            var ormCascadeSelect = data.ormCascadeSelect;
            var parentValue = data.parentValue;
            var childValue = data.childValue;
            var state = data.state;
            if (!!ormCascadeSelect['rxmChildSelectId'] && !!ormCascadeSelect['initLoad']) {
                var initLoad = ormCascadeSelect['initLoad'];
                var rxmChildSelectId = ormCascadeSelect['rxmChildSelectId'];
                if (!!initLoad['url']) {
                    //var data = {
                    //    parentValue: parentValue,
                    //}
                    initLoad['data'] = {};
                    var the = this;
                    var $select = jForm.find('#' + rxmChildSelectId).attr('name');
                    initLoad['data'] = this.getAttrValue(jForm.find('#' + rxmChildSelectId), 'fetchdata');
                    initLoad['data']['parentValue'] = parentValue;
                    $.ajax({
                        url: initLoad['url'],
                        type: 'post',
                        data: initLoad['data'],
                        async: false,
                        success: function (data) {
                            if (data != null && $.isFunction(the[$select + 'OptionFormat'])) {
                                data = the[$select + 'OptionFormat'](data);
                            }
                            if (data != null) {
                                var optionHtml = '';
                                for (var k = 0; k < data.length; k++) {
                                    if (data[k].value != null && data[k].text != null) {
                                        optionHtml += '<option value="' + data[k]['value'] + '"';
                                        if (!!data[k].selected) {
                                            optionHtml += ' selected="' + data[k]['selected'] + '"';
                                            formVal[$('#' + rxmChildSelectId).attr('name')] = data[k]['value'];
                                        }
                                        optionHtml += '>' + data[k]['text'] + '</option>';
                                    }
                                }
                                $('#' + rxmChildSelectId).empty();
                                $('#' + rxmChildSelectId).append(optionHtml);
                            }
                            else { //没有data，清空select的option
                                formVal[$('#' + rxmChildSelectId).attr('name')] = '';
                                $('#' + rxmChildSelectId).empty();
                            }
                            if (!!childValue) {
                                $('#' + rxmChildSelectId).val(childValue);
                            }
                            else if (!!state && state == 'new') {
                                //do nothing
                            }
                            else {
                                var a = {
                                    name: $('#' + rxmChildSelectId).attr("name"),
                                    value: $('#' + rxmChildSelectId).val(),
                                    trigger: false,
                                };
                                the.inputValue(a);
                            }
                        }
                    });
                }
            }
        };
        /**
         * 初始化下拉选择树方法
         * add by wanghuan 2019-01-17
         */
        var _initSelectTree = function (editTag) {
            var $wrap = jForm;
            var selectTrees = jForm.find('.rxm-select-tree');
            if (!!selectTrees && selectTrees.length > 0) {
                //遍历form中的所有下拉选择树
                for (var i = 0; i < selectTrees.length; i++) {
                    var curSelect = $(selectTrees[i]);
                    var curId = curSelect.attr('rxmselecttreeid');
                    if (!!!curId) { //未设置ID 直接返回
                        break;
                    }
                    //数据的ID
                    var curIdKey = curSelect.attr('rxmidkey');
                    //数据的父ID
                    var curPIdKey = curSelect.attr('rxmpidkey');
                    //数据的Text
                    var curTextKey = curSelect.attr('rxmtextkey');
                    var curMulti = curSelect.attr('rxmmulti') == 'true' ? true : false;
                    //本地数据
                    var curLocalData = curSelect.attr('rxmlocaldata');
                    //请求数据的URL
                    var curUrl = curSelect.attr('rxmurl');
                    //请求参数
                    var curParam = curSelect.attr('rxmparam');
                    var curPanelMinHeight = curSelect.attr('rxmpanelminh');
                    var curPanelMaxHeight = curSelect.attr('rxmpanelmaxh');
                    var curPanelHeight = curSelect.attr('rxmpanelh');
                    var curNodeopen = curSelect.attr('rxmnodeopen') == 'true' ? true : false;
                    var curCheckEP = curSelect.attr('checkep') == 'true' ? true : false;
                    var curCheckES = curSelect.attr('checkes') == 'true' ? true : false;
                    var curCancelEP = curSelect.attr('cancelep') == 'true' ? true : false;
                    var curCancelES = curSelect.attr('canceles') == 'true' ? true : false;
                    //获取初始化值
                    var curValue = curSelect.attr('rxmvalue');
                    if (!!curValue) {
                        //此功能是为了在html的rxmvalue属性中填写rxmvalue="2,3,4"或 rxmvalue="[2,3,4]"都可正常解析
                        try {
                            //例如 将rxmvalue的属性值为'[2,3,4]' 进而转换为数组[2,3,4]
                            curValue = JSON.parse(curValue).map(String);
                        }
                        catch (e) {
                            curValue = curValue.split(',');
                        }
                    }
                    else { //没有初始化值时，如果是编辑态，则置为false（为了防止编辑状态下，inputSelectTree内容为空的情况下，不会走onchange方法，第一次改变值无法保存的bug）
                        if (editTag) {
                            editTag = false;
                        }
                    }
                    var curSearch = curSelect.attr('rxmsearch');
                    var _this = this;
                    //拼接初始化对象
                    var combo = {};
                    combo.id = curId;
                    combo.multi = curMulti;
                    combo.key = {
                        idKey: curIdKey,
                        textKey: curTextKey
                    };
                    combo.event = {
                        onChange: function (data, lastValue, optionId) {
                            var str = [];
                            var id = $('#' + optionId).parents('[rxmtype]:first').attr('rxmidkey');
                            for (var j = 0; j < data.length; j++) {
                                str.push(data[j][id]);
                            }
                            var a = {
                                name: optionId,
                                value: str.join(','),
                                from: "userkey"
                            };
                            if (!editTag) { //非编辑态 触发form数据更改
                                _this.inputValue(a);
                            }
                            editTag = false;
                        }
                    };
                    if (!!curPanelHeight) {
                        combo.panelHeight = curPanelHeight;
                    }
                    if (!!curPanelMinHeight) {
                        combo.panelMinHeight = curPanelMinHeight;
                    }
                    if (!!curPanelMaxHeight) {
                        combo.panelMaxHeight = curPanelMaxHeight;
                    }
                    var ztree = {};
                    ztree.data = {
                        simpleData: {
                            enable: true,
                            idKey: curIdKey,
                            pIdKey: curPIdKey
                        },
                        key: {
                            name: curTextKey
                        }
                    };
                    var checkStr = '';
                    var cancelStr = '';
                    if (curCheckEP) {
                        checkStr += 'p';
                    }
                    if (curCheckES) {
                        checkStr += 's';
                    }
                    if (curCancelEP) {
                        cancelStr += 'p';
                    }
                    if (curCancelES) {
                        cancelStr += 's';
                    }
                    ztree.check = {
                        chkboxType: {
                            'Y': checkStr,
                            'N': cancelStr
                        }
                    };
                    var comboTree = {
                        combo: combo,
                        ztree: ztree
                    };
                    if (!!curUrl) {
                        comboTree.data = {
                            url: curUrl,
                            param: typeof (curParam) != 'undefined' ? JSON.parse(curParam) : ''
                        };
                    }
                    else {
                        if (!!curLocalData) {
                            comboTree.data = JSON.parse(curLocalData);
                        }
                    }
                    if (!!curNodeopen) {
                        comboTree.formatter = function (node) { node.open = true; };
                    }
                    if (!!curValue) {
                        comboTree.value = curValue;
                    }
                    if (!!curSearch) {
                        comboTree.search = {
                            enable: curSearch,
                            fields: [curTextKey]
                        };
                    }
                    //生成下拉选择树
                    ComboTree(comboTree);
                }
            }
        };
        //初始化自定义校验参数
        var _getValidateOption = function () {
            var rrr = window;
            var options = {
                errorElement: 'span',
                errorClass: 'rxm-warn-block',
                highlight: function (target) {
                    var fg = $(target).closest('.rxm-form-group');
                    //直接是输入框时，修改输入框的边框样式，比如table中的输入框验证
                    fg.length ? fg.addClass('has-error') : $(target).addClass('cs-error-border');
                    $(target).parents('.rxm-form-group').addClass('rxm-validate');
                    var vType = $(target).attr('type');
                    if (!!vType) {
                        if (vType == 'checkbox' || vType == 'radio') { //多选输入框
                            var $error = $(target).siblings('.rxm-warn-block');
                            $error.css('clear', 'left');
                            $error.css('left', '15px');
                            $(target).parents(':eq(1)').append($error);
                        }
                    }
                },
                success: function (message) {
                    var fg = message.closest('.rxm-form-group');
                    fg.length ? fg.removeClass('has-error') : message.prev().removeClass('cs-error-border');
                    message.parents('.rxm-form-group').removeClass('rxm-validate');
                    // $('.rxm-warn-block').parents('.rxm-form-group').removeClass('rxm-validate');
                    // $('.rxm-warn-block').parents('.rxm-form-group').removeClass('has-error');
                    message.remove();
                }
            };
            return options;
        };
        /**
         * @class
         * @constructor
         * @param {} config
         */
        var RxmLayoutFormImpl = /** @class */ (function () {
            function RxmLayoutFormImpl() {
                /**获取 checkbox 和radio值，可视化编辑重写onchanpe方法使用 modified by hanchunxiao 2019-04-24*/
                this.checkRadioInputValue = _checkRadioInputValue;
                //定义cfg 默认
                this._cfgDefault = {
                    id: "",
                    data: {
                        theform: {
                            _key: "",
                            value: {
                                _op_type: "",
                            }
                        },
                        _gt: {}
                    },
                    dirtied: false,
                    validateTag: true
                };
                this._cls = function (config) { };
                /**控件事件枚举对象*/
                this.msgEnum = {
                    /**数据将要被改变*/
                    inputValueChanging: "inputValueChanging",
                    /**表单被重置*/
                    formReset: "formReset",
                    /**表单被提交服务器端，并且返回成功*/
                    //formSubmitSuccess: "formSubmitSuccess",
                    /**form中input输入框值被转变*/
                    formValueChanged: "formValueChanged",
                    /**表单被选择*/
                    formSelect: "formSelect",
                    /**表单被提交*/
                    formSubmit: "formSubmit",
                    /**表单被提交并且失败*/
                    // formSubmitFail: "formSubmitFail",
                    /**输入框的值已经被转变*/
                    inputValueChanged: "inputValueChanged",
                };
                // /**表单布局*/
                //  attrLayout(value:string):string {
                //     if (!!value) {
                //         this_cfg.layout = value;
                //     }
                //     return this._cfg.layout;
                // }
                // /**表单的提交地址*/
                //  attrActionUrl(value:string):string {
                //     if (!!value) {
                //         this._cfg.actionUrl = value;
                //     }
                //     return this._cfg.actionUrl;
                // }
                this._formEvtEnum = {
                    //onblur    script  元素失去焦点时运行的脚本。
                    blur: "blur",
                    //onchange  script  在元素值被改变时运行的脚本。
                    change: "change",
                    //oncontextmenu script  当上下文菜单被触发时运行的脚本,。
                    contextmenu: "contextmenu",
                    //onfocus   script  当元素获得焦点时运行的脚本。,
                    focus: "focus",
                    //onformchange  script  在表单改变时运行的脚本。
                    formchange: "formchange",
                    //onforminput   script  当表单获得用户输入时运行的脚本。
                    forminput: "forminput",
                    //oninput   script  当元素获得用户输入时运行的脚本。
                    input: "input",
                    //oninvalid script  当元素无效时运行的脚本。
                    invalid: "invalid",
                    //onreset   script  当表单中的重置按钮被点击时触发。HTML5 中不支持。
                    reset: "reset",
                    //onselect  script  在元素中文本被选中后触发。
                    select: "select",
                    //onsubmit  script  在提交表单时触发。
                    submit: "submit",
                    //onbeforeunload
                    beforeunload: "beforeunload"
                };
                forms[config.id] = this;
                this._cls(config);
                _initBor = false;
            }
            /**校验每个input 输入值是否正确*/
            RxmLayoutFormImpl.prototype.validateEach = function () {
                if (typeof jvalidator === "undefined")
                    return true; //不需要校验
                var s = "#" + _id + " input," + "#" + _id + " select";
                var inputs = $(s);
                var b = true;
                var bFirstFinded = false;
                var validateRule = {};
                for (var i = 0; i < inputs.length; i++) {
                    var it = inputs[i];
                    b = this.validateOne(it);
                    if (!b && !bFirstFinded) {
                        $(it).focus();
                        bFirstFinded = true;
                    }
                }
                return !bFirstFinded;
            };
            /**校验单个input */
            RxmLayoutFormImpl.prototype.validateOne = function (it) {
                if (typeof jvalidator === "undefined")
                    return true; //不需要校验
                return jvalidator.element(it);
            };
            /**得到form gt的值 主要用于处理表格的值 reload*/
            RxmLayoutFormImpl.prototype.gtValue = function (args) {
                var initGt = $.extend(true, {}, _gt);
                var resultGt = $.extend(true, {}, _gt);
                var argsYuan = args;
                if (args) {
                    //处理修改的数据
                    for (var formid in resultGt) {
                        for (var i = 0; i < resultGt[formid].value.length; i++) {
                            var dataId = resultGt[formid].value[i][resultGt[formid]._key];
                            for (var formid2 in args) {
                                if (formid == formid2) {
                                    for (var j = 0; j < args[formid2].length; j++) {
                                        var dataId2 = args[formid2][j][resultGt[formid]._key];
                                        //主键key相同,即为数据修改
                                        if (dataId == dataId2) {
                                            //替换数据
                                            resultGt[formid].value[i] = args[formid2][j];
                                            //设置数据类型为"modified"
                                            resultGt[formid].value[i]._op_type = "modified";
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //处理数据 数筛选出新增、删除数据
                    for (var formid in initGt) {
                        for (var i = 0; i < initGt[formid].value.length; i++) {
                            var dataId = initGt[formid].value[i][initGt[formid]._key];
                            for (var formid2 in argsYuan) {
                                if (formid == formid2) {
                                    for (var j = 0; j < argsYuan[formid2].length; j++) {
                                        var dataId2 = argsYuan[formid2][j][initGt[formid]._key];
                                        //主键key相同,数据修改
                                        if (dataId == dataId2) {
                                            //处理新增的数据 将传入的数据数组修改的数据删除 筛选出新增数据
                                            argsYuan[formid2].splice(j, 1);
                                            //处理删除数据 将原有_gt数据修改的数据删除  筛选出删除数据
                                            initGt[formid].value.splice(i, 1);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //处理新增数据 将传入的数据数组筛选出的新增数据 添加至gt
                    for (var formid in resultGt) {
                        for (var formid2 in args) {
                            if (formid == formid2) {
                                if (args[formid2].length > 0) {
                                    for (var i = 0; i < args[formid2].length; i++) {
                                        //将数据状态设置为"added"
                                        args[formid2][i]._op_type = "added";
                                    }
                                }
                                resultGt[formid].value = resultGt[formid].value.concat(args[formid2]);
                            }
                        }
                    }
                    //处理删除数据 将原有_gt数据筛选出删除数据 添加至gt
                    for (var formid in resultGt) {
                        for (var i = 0; i < resultGt[formid].value.length; i++) {
                            var dataId = resultGt[formid].value[i][resultGt[formid]._key];
                            for (var formid2 in initGt) {
                                if (formid == formid2) {
                                    for (var j = 0; j < initGt[formid2].value.length; j++) {
                                        var dataId2 = initGt[formid2].value[j][resultGt[formid]._key];
                                        //主键key相同,数据修改
                                        if (dataId == dataId2) {
                                            resultGt[formid].value[i]._op_type = "deleted";
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //表单设标志位
                    //console.info('表单设标志位')
                    this.attrDirtied(true);
                }
                //console.info(resultGt);
                return resultGt;
            };
            /**得到form表单全部的input值*/
            RxmLayoutFormImpl.prototype.getFormData = function () {
                var ret = formVal;
                ret = _radioCheckboxArrToString(ret);
                this.formatFormData && (ret = this.formatFormData(ret));
                return ret;
            };
            RxmLayoutFormImpl.prototype.formatFormData = function (data) {
                ret = data;
                // ret = _radioCheckboxArrToString(data)
                return ret;
            };
            /**
             * 属性  Dirtied
             * @param {Boolean} dirtied 可选  设置是否dirtied的值  undefined 是获取Dirtied值
             * @returns {Boolean}
             */
            RxmLayoutFormImpl.prototype.attrDirtied = function (dirtied) {
                //console.info('attrDirtied')
                if ($.isExist(dirtied)) {
                    formDirty = dirtied;
                    if (dirtied) {
                        $(_selectorSubmitBtn).attr("disable", "disable");
                    }
                    else {
                        $(_selectorSubmitBtn).removeAttr("disable");
                    }
                }
                return formDirty;
            };
            // /**
            //  * 设置serialize 是否只是获取 form下的input 和select 值  false 获取转变的值
            //  * @param  value 
            //  */
            // attrRxmInputOnly(value?: Boolean): Boolean {
            //     ///<param name="" type="Boolean">boolean true 或者false</param>
            //     var ret: any
            //     if ($.isExist(value)) {
            //         if (!value) {
            //             ret = false
            //             jForm.removeAttr("rxminputonly");
            //         } else {
            //             ret = true
            //             jForm.attr("rxminputonly", "rxminputonly")
            //         }
            //     } else {
            //         ret = jForm.attr("rxminputonly");
            //         ret = $.isExist(jForm.attr("rxminputonly")) ? false : true;
            //     }
            //     return ret;
            // }
            /**得到form表单需要提交的数据数据*/
            RxmLayoutFormImpl.prototype.getSubmitData = function () {
                var ret;
                if (formDirty) {
                    /*处理 form表单中的数据 */
                    ret = {};
                    var it = this.getFormData();
                    var itn = _name;
                    if (it._op_type.length > 0 &&
                        (ret[it._op_type] = ret[it._op_type] || {}) &&
                        (ret[it._op_type][itn] = ret[it._op_type][itn] || [])) {
                        var itc = $.extend(true, {}, it);
                        itc._op_type = undefined;
                        ret[it._op_type][itn].push(itc);
                    }
                    /**处理 事物相关表的数据 */
                    var its = _gt;
                    for (var i in its) {
                        itn = i;
                        for (var j in its[i].value) {
                            var it = its[i].value[j];
                            if (it && it._op_type && it._op_type.length > 0 &&
                                (ret[it._op_type] = ret[it._op_type] || {}) &&
                                (ret[it._op_type][itn] = ret[it._op_type][itn] || [])) {
                                var itc = $.extend(true, {}, it);
                                itc._op_type = undefined;
                                ret[it._op_type][itn].push(itc);
                            }
                        }
                    }
                }
                this.formatSubmitData && (ret = this.formatSubmitData(ret));
                return ret;
            };
            /**格式化提交后台的数据 */
            RxmLayoutFormImpl.prototype.formatSubmitData = function (data) {
                var ret = data;
                return ret;
            };
            /**设置或者改变input  select  值
             * @param  {String} name   名字，必选
             * @param  {*}  value   值  ，可选 undefined 时，获取 name input 的值
             * @param  {Boolean}  trigger  可选  ，是否发送 消息 formValueChanged
             * @param  {String} from  可选  设置者
             */
            RxmLayoutFormImpl.prototype.inputValue = function (name, value, trigger, from) {
                var rradio = /^(?:radio)$/i, rcheck = /^(?:checkbox)$/i, rselect = /^(?:option|select-one|select-multiple)$/i, rvalue = /^(?:button|color|date|datetime|datetime-local|email|hidden|month|number|password|range|reset|search|submit|tel|text|textarea|time|url|week)$/i;
                /**@type {jQuery}*/
                var $target;
                if (!!name.name) {
                    value = name.value;
                    from = name.from;
                    trigger = name.trigger;
                    name = name.name;
                }
                ;
                if ($.isExist(name) && !$.isExist(value)) {
                    //返回一个值
                    //返回整个form表单的所有值
                    return formVal[name];
                }
                !$.isExist(trigger) && (trigger = true);
                var fromkey = typeof from != "undefined" && from == 'userkey';
                if (typeof value === "undefined")
                    return formVal[name];
                if ($.isDom(name)) {
                    $target = $(name);
                }
                else if ($.isString(name)) {
                    var attr = "[name=" + name + "]";
                    $target = jForm.find(attr);
                }
                else if (!!name.jquery) {
                    $target = name;
                }
                ;
                if ($target.length == 0)
                    return;
                var type = $target[0];
                type = (type.type || type.nodeName).toLowerCase();
                var property = null;
                var it = formVal;
                if (rvalue.test(type)) {
                    var old = formVal[name];
                    if (old !== value) {
                        !fromkey && ($target[0].value = value);
                        var data = {
                            old: old,
                            cur: value,
                            dom: $target[0]
                        };
                        it[name] = value;
                        if (trigger) {
                            //console.info('1')
                            this.attrDirtied(true);
                            it._op_type.length == 0 && (it._op_type = "modified");
                            $target.trigger(this.msgEnum.inputValueChanged, data);
                            jForm.trigger(this.msgEnum.formValueChanged, data);
                        }
                    }
                }
                else if (rradio.test(type)) {
                    property = "radio";
                    var old = formVal[name];
                    if (old !== value) {
                        //             !fromkey && ($target[0].value = value);
                        if (!fromkey) { //初始化
                            var name = $($target).attr('name');
                            //$('input[name="' + name + '"][value="' + value + '"]').prop('checked', true);
                            value = _checkRadioInputValue(name, value);
                        }
                        else {
                            value = _checkRadioInputValue(name);
                        }
                        var data = {
                            old: old,
                            cur: value,
                            dom: $target[0]
                        };
                        it[name] = value;
                        if (trigger) {
                            //inputValue.info('2')
                            this.attrDirtied(true);
                            it._op_type.length == 0 && (it._op_type = "modified");
                            $target.trigger(this.msgEnum.inputValueChanged, data);
                            jForm.trigger(this.msgEnum.formValueChanged, data);
                        }
                    }
                }
                else if (rcheck.test(type)) {
                    property = "check";
                    var old = formVal[name];
                    if (old !== value) {
                        //!fromkey && ($target[0].value = value);
                        if (!fromkey) { //初始化
                            var name = $($target).attr('name');
                            if (typeof value != "undefined") {
                                //先默认都不选中
                                // $('input[name="' + name + '"]').prop('checked', false);
                                // value = JSON.parse(value);
                                // for (var i = 0; i < value.length; i++) {
                                //     $('input[name="' + name + '"][value="' + value[i] + '"]').prop('checked', true);
                                // }
                                value = _checkRadioInputValue(name, value);
                            }
                        }
                        else {
                            value = _checkRadioInputValue(name);
                        }
                        var data = {
                            old: old,
                            cur: value,
                            dom: $target[0]
                        };
                        it[name] = value;
                        // $('input[name="' + name + '"]').each(function (i, e) {
                        //     if ($(e).prop('checked') == true) {
                        //         it[name].push($(e).val());
                        //     }
                        // });
                        //modify by wangh 修复多选框选中后再取消选中校验信息位置错误 2019-06-25
                        if ($('[name=' + name + ']').eq(0).length > 0) {
                            var $error = $('[name=' + name + ']').eq(0).siblings('.rxm-warn-block');
                            if ($error.length > 0) {
                                $error.css('clear', 'left');
                                $error.css('left', '15px');
                                $('[name=' + name + ']').eq(0).parents(':eq(1)').append($error);
                            }
                        }
                        if (trigger) {
                            //inputValue.info('3')
                            this.attrDirtied(true);
                            it._op_type.length == 0 && (it._op_type = "modified");
                            $target.trigger(this.msgEnum.inputValueChanged, data);
                            jForm.trigger(this.msgEnum.formValueChanged, data);
                        }
                    }
                }
                else if (rselect.test(type)) {
                    property = "selected";
                    var old = formVal[name];
                    if (old !== value) {
                        !fromkey && ($target[0].value = value);
                        it[name] = value;
                        var data = {
                            old: old,
                            cur: value,
                            dom: $target[0]
                        };
                        if (trigger) {
                            //inputValue.info('4')
                            this.attrDirtied(true);
                            it._op_type.length == 0 && (it._op_type = "modified");
                            $target.trigger(this.msgEnum.inputValueChanged, data);
                            jForm.trigger(this.msgEnum.formValueChanged, data);
                        }
                    }
                    var oc = $($target).attr('rxmcascadeselect');
                    if (!!oc) {
                        oc = JSON.parse(oc);
                        ruleCascadeSelect(oc);
                        if (!!oc['rxmChildSelectId'] && !!oc['initLoad']) {
                            _onLoadChildSelectValue.call(this, {
                                ormCascadeSelect: oc,
                                parentValue: $target[0].value,
                                childValue: it[oc['rxmChildSelectId']]
                            });
                        }
                    }
                }
                return value;
            };
            /**数据将要被改变事件绑定*/
            RxmLayoutFormImpl.prototype.bindInputValueChanging = function (arg, scope) {
                // if (typeof arg == "boolean" || typeof arg == "undefined") {
                //     arg = {
                //         fn: this._onInputValueChanging,
                //     };
                //     scope = this;
                // }
                var the = this;
                if ($.isExist(scope)) {
                    the = scope;
                }
                if (!!arg.callback) {
                    arg.fn = arg.callback;
                }
                var cb = arg.fn || arg.callback || function () { };
                if (!arg.one) {
                    jForm.on(this.msgEnum.inputValueChanging, arg.data, $.proxy(cb, the));
                }
                else {
                    jForm.one(this.msgEnum.inputValueChanging, arg.data, $.proxy(cb, the));
                }
            };
            // /**数据将要被改变激发函数*/
            //  _onInputValueChanging = function _onInputValueChanging(e, data) {
            //     ///<param  name="e"  value="event"></param>
            //     ///<param  name="data"   type="Object"></param>
            // }
            /**form中input输入框值被转变事件绑定*/
            RxmLayoutFormImpl.prototype.bindFormValueChanged = function (arg, scope) {
                // ///<param  name="arg"  type="vo.orm.bindMsg.arg"></param>
                // if (typeof arg == "boolean" || typeof arg == "undefined") {
                //     arg = {
                //         fn: this._onFormValueChanged,
                //     };
                //     scope = this;
                // }
                var the = this;
                if ($.isExist(scope)) {
                    the = scope;
                }
                if (!!arg.callback) {
                    arg.fn = arg.callback;
                }
                var cb = arg.fn || arg.callback || function () { };
                if (!arg.one) {
                    jForm.on(this.msgEnum.formValueChanged, arg.data, $.proxy(cb, the));
                }
                else {
                    jForm.one(this.msgEnum.formValueChanged, arg.data, $.proxy(cb, the));
                }
            };
            /**表单被选择事件绑定*/
            RxmLayoutFormImpl.prototype.bindFormSelect = function (arg, scope) {
                ///<param  name="arg"  type="vo.orm.bindMsg.arg"></param>
                // if (typeof arg == "boolean" || typeof arg == "undefined") {
                //     arg = {
                //         fn: this._onFormSelect,
                //     };
                //     scope = this;
                // }
                var the = this;
                if ($.isExist(scope)) {
                    the = scope;
                }
                var cb = arg.fn || arg.callback || function () { };
                if (!arg.one) {
                    jForm.on(this.msgEnum.formSelect, arg.data, $.proxy(cb, the));
                }
                else {
                    jForm.one(this.msgEnum.formSelect, arg.data, $.proxy(cb, the));
                }
            };
            /**表单被提交事件绑定*/
            RxmLayoutFormImpl.prototype.bindFormSubmit = function (arg, scope) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {
                        fn: _onFormSubmit,
                    };
                    scope = this;
                }
                var the = this;
                if ($.isExist(scope)) {
                    the = scope;
                }
                var cb = arg.fn || arg.callback || function () { };
                $(_id + this.msgEnum.formSubmit).rxmBindCmd({
                    callback: $.proxy(cb, the)
                });
                //jForm.on(RxmLayoutForm.msgEnum.formSubmit, arg.data, $.proxy(arg.fn, the), arg.one);
            };
            /**输入框的值已经被转变事件绑定*/
            RxmLayoutFormImpl.prototype.bindInputValueChanged = function (arg, scope) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {
                        fn: onInputValueChanged,
                    };
                    scope = this;
                }
                else if (!!arg.callback)
                    return;
                var the = this;
                if ($.isExist(scope)) {
                    the = scope;
                }
                /**@type {string}*/
                var selector;
                if (arg.id) {
                    selector = "#" + arg.id;
                }
                else if (arg.name) {
                    selector = "[name=" + arg.name + "]";
                }
                var cb = arg.fn || arg.callback || function () { };
                if (!!selector) {
                    if (!arg.one) {
                        jForm.on(this.msgEnum.inputValueChanged, selector, arg.data, $.proxy(cb, the));
                    }
                    else {
                        jForm.one(this.msgEnum.inputValueChanged, selector, arg.data, $.proxy(cb, the));
                    }
                }
                else {
                    jForm.on(this.msgEnum.inputValueChanged, arg.data, $.proxy(cb, the), arg.one);
                }
            };
            /**表单id*/
            RxmLayoutFormImpl.prototype.attrId = function (value) {
                if (!!value) {
                    _id = value;
                }
                return _id;
            };
            /**表单name*/
            RxmLayoutFormImpl.prototype.attrName = function (value) {
                if (!!value) {
                    $("#" + _id).attr("name", value);
                }
                return $("#" + _id).attr("name");
            };
            /**表单项有转变 */
            RxmLayoutFormImpl.prototype.onchange = function (e, data) {
                ///<param name="e" value="event"></param>
                //console.info('onchange')
                //this.attrDirtied(true)
                // if(!_validateEach()){
                //     return
                // }
                //因果校验中的必填校验和显隐校验判断 add by wangh 2019-05-21
                /*
                var causalArr = $('div[name^="rxmcausal"][rxmvaltype="必填校验"],[rxmvaltype="显隐校验"]')
                for(var i=0;i<causalArr.length;i++){
                    //_expressionCheck
                    var $tmp = causalArr.eq(i)
                    var rxmvaltype = $tmp.attr('rxmvaltype')
                    var rxmexphidden = $tmp.attr('rxmexphidden')
                    var resultmsg = $tmp.attr('resultmsg')
                    this.requireAndShowCheck(rxmvaltype,rxmexphidden,resultmsg)
                }
                */
                var type = (e.target.type || e.target.nodeName).toLowerCase();
                var name = $(e.target).attr("name");
                var value = (/^(select-multiple|checkbox|radio)$/i).test(type) ? _checkRadioInputValue(name) : $(e.target).val();
                var a = {
                    name: name,
                    value: value,
                    from: "userkey"
                };
                this.inputValue(a);
            };
            RxmLayoutFormImpl.prototype.init = function (args) {
                if (!args || (args && !args.reloadForm)) {
                    if (_initBor)
                        return;
                }
                _initBor = true;
                /**初始化函数,对象运行入口*/
                var $wrap = jForm;
                //注解的都是无效的事件，在chrome下测试
                //document.getElementById(_id).addEventListener(RxmLayoutForm._formEvtEnum.blur, $.proxy(this._onblur, this));
                jForm.change($.proxy(this.onchange, this));
                //不起作用，本想做个叫回函数控制页面卸载不保存的问题
                window.onbeforeunload = $.proxy(_onbeforeunload, this);
                PageBase.bindClosePage({
                    id: _id,
                    callback: _onWidgetClosed
                }, this);
                var btnWrap = $(_selectorSubmitBtn);
                btnWrap.tap($.proxy(_onSubmitBtn, this));
                //this.bindFormReset(true);
                this.bindFormSubmit(true);
                formVal = _serialize(_id);
                formVal._op_type = "";
                //初始化select
                _initSelectValue.call(this);
                //初始化日期选择器
                _initDate();
                //初始化组织选择输入框
                _initSelectOrg();
                //初始化上传
                _initFileUploader.call(this);
                //设置范围输入框样式
                _initRange();
                //初始化radio和checkbox
                //_initRadioAndCheckData();
                //初始化校验规则
                //修改校验规则，将判断注释
                // if (validateTag) {
                this.initValidate();
                // }
                //检测form的状态 是否是只读
                _formOptypeCheck();
                // if ($('div[inputname^="rxmvld"]').length > 0) {
                //     let rrr: any = window
                //     var rxmvRun = rrr.require('OrivRunMgr')
                //     rxmvRun.init($('html')[0].outerHTML)
                // }
                //初始化校验插件
                _fetchInitValue.call(this);
                cssOrm.on({
                    msgType: "slidebarBegin",
                    callback: $.proxy(_onSlidebarBegin, this)
                });
                cssOrm.on({
                    msgType: "slidebarSubClose",
                    callback: $.proxy(_onSubClose, this)
                });
                //取带有rxmkey的input对象
                var key = $wrap.find("input[rxmkey='']");
                //将theform中的_key赋值
                (!!key[0]) && (_key = key.attr("name"));
            };
            //  _onResetBtn = function (e, data) {
            //     jForm.trigger(RxmLayoutForm.msgEnum.formReset);
            // }
            // serialize(data: any): any {
            //     if (this.attrRxmInputOnly())
            //         return this.inputValue();
            //     return this.getSubmitData();
            // }
            /**
             * 设置表单值
             * @param trigger       是否激活input change 事件，undefined，true 激活，false 不激活
             * @param data          json对象，多选时为数组
             * 代码实现参考此开源项目https://github.com/kflorence/jquery-deserialize/
             */
            RxmLayoutFormImpl.prototype.deserialize = function (data, trigger) {
                var _fn = this;
                _fn.formatInitData && (data = _fn.formatInitData(data));
                !$.isExist(trigger) && (trigger = true);
                var formId = _id;
                var attr = "";
                var editTag = false;
                if (data) {
                    for (var index in data) {
                        var it = data[index];
                        if (index == formId) {
                            this.deserialize(it);
                        }
                        ;
                        attr = "[name=" + index + "]";
                        var input = jForm.find(attr);
                        if (input.length > 0) {
                            if (input.hasClass("orm-input-grid")) { //处理列表
                            }
                            else if (input.hasClass("orm-input-tree")) { // 处理树
                            }
                            else if (input.hasClass("rxm-select-tree-input")) { //处理下拉树
                                //设置初始化值，在初始化下拉选择树时用到该自定义属性 add by wanghuan 2019-01-17
                                input.parents('.rxm-select-tree').attr('rxmvalue', it);
                                //编辑态标志
                                editTag = true;
                                this.inputValue(index, it, trigger);
                            }
                            else if (input.hasClass("rxm-file-uploader")) {
                                //初始化上传队列
                                it.opType = '';
                                // "+index+".addFile(new fileInfo(it));
                                fileUpView[index].addFile(new fileInfo(it));
                            }
                            else {
                                this.inputValue(index, it, trigger);
                            }
                        }
                        else { }
                    }
                }
                _initSelectTree.call(this, editTag);
                //$.isExist(trigger)&&!trigger&&_serialize(formVal)
            };
            /**获取加载时数据初始化信息，可以重写改变初始化信息*/
            RxmLayoutFormImpl.prototype.getInitForm = function () {
                ///<returns type="vo.orm.clsLayoutBtstrpForm.cfgformInit" ></returns>
                var wArg = appTool.getAppArgs();
                var r;
                !!wArg && (r = wArg.form);
                if ($.isArray(r)) {
                    for (var i = 0; i < r.length; i++) {
                        if (r[i].id = _id)
                            return r[i];
                    }
                }
                return r;
            };
            /**初始化校验参数 */
            RxmLayoutFormImpl.prototype.initValidate = function (validateArgs) {
                validateTag = false;
                var v = {
                    Onubmit: false
                };
                if (typeof validateArgs != "undefined") {
                    v = validateArgs;
                    v.Onubmit = false;
                    v.onfocusout = false;
                    v.onkeyup = false;
                    v.onclick = false;
                    v = $.extend(true, {}, v, validateArgs, _getValidateRule());
                    if (typeof v.errorPlacement === "undefined") {
                        v.errorPlacement = $.proxy(onValidatePlacement, this);
                    }
                    if (!v.highlight) {
                        v.highlight = function (target) {
                            var fg = $(target).closest('.form-label-input');
                            fg = fg.length == 0 ? $(target).closest('.form-group') : fg;
                            //直接是输入框时，修改输入框的边框样式，比如table中的输入框验证
                            fg.length > 0 ? fg.addClass('has-error') : $(target).addClass('cs-error-border');
                        };
                    }
                    if (!v.success) {
                        v.success = function (message) {
                            var fg = message.closest('.form-label-input');
                            fg = fg.length == 0 ? message.closest('.form-group') : fg;
                            fg.length > 0 ? fg.removeClass('has-error') : message.prev().removeClass('cs-error-border');
                            message.remove();
                        };
                    }
                    ;
                }
                else {
                    v = $.extend(true, {}, v, _getValidateRule());
                }
                if (!!jvalidator) {
                    if (!!v.rules) {
                        jvalidator.settings.rules = v.rules;
                    }
                    if (!!v.messages) {
                        jvalidator.settings.messages = v.messages;
                    }
                }
                //获取自定义校验
                if (!!_getValidateOption()) {
                    var options = _getValidateOption();
                    if (($('script[rxm_validate]').length > 0) && (!!rrr.rxm_validate)) {
                        var rxmvRun = rrr.require('OrivRunMgr');
                        rxmvRun.init(rrr.rxm_validate, function (data) {
                            options = rxmvRun.RunValidate(_id, options);
                            v = $.extend(true, {}, v, options);
                            jvalidator = jForm.validate(v);
                        });
                    }
                    else {
                        v = $.extend(true, {}, v, options);
                        jvalidator = jForm.validate(v);
                    }
                }
                else {
                    jvalidator = jForm.validate(v);
                }
            };
            /**当前窗口表格数据删除通过表格id获取表格对象*/
            RxmLayoutFormImpl.prototype.gridDelete = function (gridId) {
                var gridObj = RxmGrid({ "id": gridId });
                /**获取表格当前选中的数据*/
                //original表格获取获取row数据
                // var rows = gridObj.getSelectedRow();
                // if (!rows || rows.length < 1) {
                //     alert("请选择一行数据");
                //     return;
                // }
                //originalM表格获取获取row数据
                var rows = gridObj.getSelectedData();
                var len = 0;
                for (var key in rows)
                    len++;
                if (!rows || len < 1) {
                    alert("请选择一行数据");
                    return false;
                }
                /**表格全部数据*/
                var all = gridObj.getAllData();
                /**gt数据处理*/
                var id = $("div[id='" + gridId + "']").attr("rxmformid");
                !_gt[id] && (_gt[id] = {
                    _key: "",
                    value: []
                });
                var its = _gt[id];
                /**表格json数组数据删除*/
                $.each(rows, function (j, row) {
                    for (var i = 0; i < all.length; i++) {
                        if (JSON.stringify(all[i]) == JSON.stringify(row) && all[i]._op_type !== "added") {
                            all.splice(i, 1);
                            row._op_type = "deleted";
                            its.value.push(row);
                        }
                        if (JSON.stringify(all[i]) == JSON.stringify(row) && all[i]._op_type === "added") {
                            all.splice(i, 1);
                            its.value.splice($.inArray(row, all), 1); //待确认
                        }
                    }
                });
                this.attrDirtied(true);
                gridObj.reload({
                    "data": all
                });
            };
            RxmLayoutFormImpl.prototype.getAttrValue = function (name, attrName) {
                /**将包含[[]]的属性转换为json*/
                ///<param name="name" value="">以下三种形式均可：1.dom对象；2.需要选择的标签name；3.jquery对象</param>
                ///<param name="attrName" value="string">标签属性</param>
                var $selector;
                var str;
                if ($.isDom(name)) {
                    $selector = $(name);
                }
                else if ($.isString(name)) {
                    $selector = jForm.find("[name='" + name + "']");
                }
                else if (!!name.jquery) {
                    $selector = name;
                }
                ;
                str = $selector.attr(attrName);
                if (!!str) {
                    //将字符串中所有所有单引号替换为双引号 不然JSON.parse报错
                    str = _getAttrValue(str.replace(/\'/g, '"'));
                    return JSON.parse(str);
                }
                else {
                    return {};
                }
            };
            RxmLayoutFormImpl.prototype.clear = function () {
                _key = "";
                formVal = {
                    _op_type: ""
                };
                _gt = {};
                this.attrDirtied(false);
            };
            return RxmLayoutFormImpl;
        }());
        var ret = thisObj(config, new RxmLayoutFormImpl());
        var rrr = window;
        rrr.require('RxmPageBase').bindPageReady({ callback: $.proxy(ret.init, ret), one: false });
        forms[_id] = ret;
        return ret;
    };
    return ClsFactory;
});

define("RxmLRLayout", ["require", "exports", "RxmAppTool"], function (require, exports, appTool) {
    "use strict";
    /**
     * 引入类声明公共方法
     * @type {rxm.AppTool}
     * */
    var thisObj = appTool.thisObj;
    var clsFactory = function (cfg) {
        //查找已有布局实例，有则直接返回
        if (thisObj(cfg.id)) {
            return thisObj(cfg.id);
        }
        var _id = cfg.id;
        var $panel = $("#" + cfg.id);
        var $hideMenu = $("[pid=" + cfg.id + "]");
        //定栏div宽度
        var dingWidth = $hideMenu.width();
        //当前滑动panel对象
        var $curSwipeObj;
        //滑动距离界定
        var viewWidth = 75;
        //默认滑动方向 左侧为定栏 右滑
        var curSwipeStr = 'Right';
        //反方向
        var curSwipeFanStr = 'Left';
        //乘数 控制动画方向 默认为正
        var num = 1;
        if ($panel.hasClass("rxm-content-right")) {
            curSwipeStr = "Left";
            curSwipeFanStr = 'Right';
            num = -1;
        }
        var RxmLRLayout = /** @class */ (function () {
            function RxmLRLayout() {
                /**
                 * 设定滑动panel过渡效果参数 初始化
                 * @param {Object} $obj - 滑动布局对象
                 */
                this._setTransition = function ($obj) {
                    $obj.css({
                        '-webkit-transition-property': '-webkit-transform',
                        '-webkit-transition-duration': '200ms',
                        '-webkit-transition-timing-function': 'ease-out' //速度效果的速度曲线（过渡效果）
                    });
                };
                /**
                 * 设定完成过渡效果需要多少秒或毫秒
                 * @param {Object} $obj - 滑动布局jquery对象
                 * @param {String} time - 过渡时间
                 */
                this._setTraDur = function ($obj, time) {
                    $obj.css('-webkit-transition-duration', time);
                };
                /**
                 * 显示隐藏菜单动画样式设置
                 */
                this._initViewPosition = function () {
                    console.info(num * dingWidth);
                    $panel.css('-webkit-transform', 'translate3d(' + num * dingWidth + 'px, 0px, 0px)');
                    $hideMenu.css('-webkit-transform', 'translate3d(0px, 0px, 0px)');
                };
            }
            /**
             * 隐藏菜单动画样式设置
             */
            RxmLRLayout.prototype._initHidePosition = function () {
                $panel.css('-webkit-transform', 'translate3d(0px, 0px, 0px)');
                $hideMenu.css('-webkit-transform', 'translate3d(' + (-1 * num * dingWidth) + 'px, 0px, 0px)');
            };
            /**
             * panel区域滑动事件绑定函数
             */
            RxmLRLayout.prototype._bindPanelSwipe = function () {
                var the = this;
                //panel区域绑定touchStart触屏开始事件
                $panel.touchStart(function (e, data) {
                    // 记录当前布局滑动对象区域
                    $curSwipeObj = $(this);
                    // 当前滑动数据行设定过渡效果设置 初始化 
                    the._setTransition($curSwipeObj);
                });
                //panel区域绑定touchMove触屏移动事件
                $panel.touchMove(function (e, data) {
                    //滑动距离  当前滑动横向坐标减去起始横向坐标
                    var moveDis = data.position.delta[0].moved;
                    //滑动方向
                    var curSwipe = data.curSwipe;
                    console.info("curSwipe==============" + curSwipe);
                    //右滑，滑动距离在定栏宽度值之内，定栏随着右滑距离逐渐显示
                    if (curSwipe == curSwipeStr && $curSwipeObj.data("position") != "view") {
                        console.info("moveDis=======" + moveDis);
                        //大于定栏宽度值后定栏与panel区域不再滑动
                        if (moveDis >= dingWidth) {
                            console.info("hahh=======");
                            //完全显示菜单
                            the._initViewPosition();
                        }
                        else { //移动距离小于隐藏菜单的宽度 隐藏菜单一直显示
                            $curSwipeObj.css('-webkit-transform', 'translate3d(' + num * moveDis + 'px, 0px, 0px)');
                            //隐藏菜单 动画移动距离
                            var hide = dingWidth - moveDis;
                            $hideMenu.css('display', 'block');
                            $hideMenu.css('-webkit-transform', 'translate3d(' + -1 * num * hide + 'px, 0px, 0px)');
                        }
                    }
                    //右滑完全显示按钮区域，标识隐藏菜单位置为显示
                    if (moveDis >= dingWidth && curSwipe == curSwipeStr) {
                        $curSwipeObj.data("position", "view");
                    }
                    //左滑,隐藏菜单逐渐隐藏
                    if (curSwipe == curSwipeFanStr && $curSwipeObj.data("position") == "view") {
                        if (moveDis >= dingWidth) {
                            //完全隐藏菜单
                            the._initHidePosition();
                            //解决隐藏菜单 进行隐藏时候 背景变为白板的问题
                            setTimeout(function () {
                                $hideMenu.css('display', 'none');
                                the._setTraDur($hideMenu, '');
                            }, 300);
                        }
                        else {
                            var chazhi = dingWidth - moveDis;
                            $curSwipeObj.css('-webkit-transform', 'translate3d(' + num * chazhi + 'px, 0px, 0px)');
                            //隐藏菜单 动画移动距离
                            var hide = dingWidth - moveDis;
                            $hideMenu.css('-webkit-transform', 'translate3d(' + -1 * num * moveDis + 'px, 0px, 0px)');
                        }
                    }
                });
                //panel区域绑定touchEnd触屏结束事件
                $panel.touchEnd(function (e, data) {
                    //滑动方向
                    var curSwipe = data.curSwipe;
                    if (curSwipe != "") {
                        //移动距离  结束时横向坐标减去起始横向坐标
                        var moveDis = data.position.delta[0].moved;
                        if (curSwipe == curSwipeStr) {
                            //当滑动结束时，右滑距离大于设置距离数值，直接显示隐藏区域
                            if (moveDis > viewWidth && curSwipe == curSwipeStr && $curSwipeObj.data("position") !== 'view') {
                                //完全显示隐藏的菜单 设置动画效果
                                the._setTraDur($hideMenu, '360ms');
                                the._setTraDur($curSwipeObj, '500ms');
                                the._initViewPosition();
                                //设置状态 显示状态 
                                $curSwipeObj.data("position", "view");
                                $curSwipeObj.tap(function () {
                                    if ($curSwipeObj.data("position") == 'view') {
                                        //解决隐藏菜单 进行隐藏时候 背景变为白板的问题
                                        the._setTraDur($hideMenu, '400ms');
                                        the._setTraDur($curSwipeObj, '300ms');
                                        //完全显示隐藏菜单
                                        the._initHidePosition();
                                        //将隐藏菜单的-webkit-transition-duration属性还原 不然再次右滑两个div会显示白色间隙
                                        setTimeout(function () {
                                            the._setTraDur($hideMenu, '');
                                            the._setTraDur($curSwipeObj, '200ms');
                                        }, 400);
                                        //
                                        $curSwipeObj.removeData("position");
                                        //解除绑定
                                        $curSwipeObj.off('tap');
                                    }
                                });
                            }
                            else if (moveDis < viewWidth && curSwipe == curSwipeStr && $curSwipeObj.data("position") !== "view") {
                                the._setTraDur($hideMenu, '250ms');
                                the._setTraDur($curSwipeObj, '200ms');
                                //完全隐藏菜单
                                the._initHidePosition();
                                //解决隐藏菜单 进行隐藏时候 背景变为白板的问题
                                setTimeout(function () {
                                    $hideMenu.css('display', 'none');
                                    the._setTraDur($hideMenu, '');
                                }, 300);
                            }
                        }
                        else if (curSwipe == curSwipeFanStr) {
                            if (moveDis >= viewWidth) {
                                //完全隐藏菜单
                                the._initHidePosition();
                                setTimeout(function () {
                                    $hideMenu.css('display', 'none');
                                    the._setTraDur($hideMenu, '');
                                }, 400);
                                $curSwipeObj.removeData("position");
                                //解除绑定
                                $curSwipeObj.off('tap');
                            }
                            else if (moveDis < viewWidth) {
                                the._setTraDur($hideMenu, '200ms');
                                the._setTraDur($curSwipeObj, '250ms');
                                //完全显示菜单
                                the._initViewPosition();
                                setTimeout(function () {
                                    the._setTraDur($hideMenu, '360ms');
                                    the._setTraDur($curSwipeObj, '500ms');
                                }, 300);
                            }
                        }
                    }
                });
            };
            /**
             * 隐藏菜单区域滑动事件绑定函数
             */
            RxmLRLayout.prototype._bindHideMenuSwipe = function () {
                var the = this;
                //定栏区域绑定touchStart触屏开始事件
                $hideMenu.touchStart(function (e, data) {
                    // 记录当前触屏的行对象 
                    $curSwipeObj = $(this);
                    // 当前滑动数据行设定过渡效果设置
                    the._setTransition($curSwipeObj);
                    the._setTransition($panel);
                });
                //定栏区域绑定touchMove触屏移动事件
                $hideMenu.touchMove(function (e, data) {
                    //滑动距离  当前滑动横向坐标减去起始横向坐标
                    var moveDis = data.position.delta[0].moved;
                    //当前手指滑动方向
                    var curSwipe = data.curSwipe;
                    //左滑，距离在75之内，隐藏菜单区域随着右滑距离逐渐显示，大于75后隐藏菜单区域不变
                    var chazhi = dingWidth - moveDis;
                    if (curSwipe == curSwipeFanStr) {
                        if (moveDis <= dingWidth) {
                            $panel.css('-webkit-transform', 'translate3d(' + 1 * num * chazhi + 'px, 0px, 0px)');
                            $curSwipeObj.css('-webkit-transform', 'translate3d(' + -1 * num * moveDis + 'px, 0px, 0px)');
                            if (moveDis == dingWidth) {
                                $panel.removeData("position");
                            }
                        }
                        else {
                            $panel.removeData("position");
                        }
                    }
                    else if (curSwipe == curSwipeStr) {
                        if (moveDis <= dingWidth) {
                        }
                        else {
                        }
                    }
                });
                //定栏区域绑定touchEnd触屏结束事件
                $hideMenu.touchEnd(function (e, data) {
                    //滑动方向
                    var curSwipe = data.curSwipe;
                    if (curSwipe != "") {
                        //移动距离  结束时横向坐标减去起始横向坐标
                        var moveDis = data.position.delta[0].moved;
                        console.info('touchEnd===moveDis===' + moveDis);
                        //当滑动结束时，左滑距离大于设置距离数值，显示按钮区域
                        if (moveDis > viewWidth && curSwipe == curSwipeFanStr) {
                            //大于设定的滑动距离 直接隐藏菜单
                            the._initHidePosition();
                            setTimeout(function () {
                                $curSwipeObj.css('display', 'none');
                            }, 300);
                            $panel.off('tap');
                            $panel.removeData("position");
                        }
                        else if (moveDis < viewWidth && curSwipe == curSwipeFanStr) {
                            //显示隐藏菜单 回到显示位置   
                            //完全显示菜单
                            the._initViewPosition();
                        }
                    }
                });
            };
            /**
             * 左右栏布局初始化函数 绑定手势事件
             */
            RxmLRLayout.prototype._init = function () {
                //移动设备中绑定滑动事件
                if (appTool.isMobileOpen()) {
                    this._bindPanelSwipe();
                    this._bindHideMenuSwipe();
                }
            };
            return RxmLRLayout;
        }());
        var ret = thisObj(_id, new RxmLRLayout());
        var rqr = window;
        rqr.require('RxmPageBase').bindPageReady({ callback: $.proxy(ret._init, ret), one: true });
        return ret;
    };
    return clsFactory;
});

define("RxmSlidePanel", ["require", "exports"], function (require, exports) {
    "use strict";
    var clsdef = {
        rxmPath: 'RxmSlidePanel',
        clsName: 'rxm-layout-slide-panel',
        juryFn: 'rxmSlidePanel'
    };
    var clsDefault = {
        pageChanged: "pageChanged",
        groupChanged: "groupChanged",
        tapIconArea: "tapIconArea",
        tapPageControl: "tapPageControl"
    };
    var _onSlidePanelScroll = function () {
        var jId = $(this);
        var data = jId.data('rxm_slide_panel_scroll') || {};
        data.lastLeft = data.curLeft;
        data.curLeft = jId.scrollLeft();
        jId.data('rxm_slide_panel_scroll', data);
        console.info(data);
    };
    /**
     *
     * @param {TouchEvent} e
     * @param {*} data
     */
    var _onTouchStart = function (e, data) {
        var jId = $(this);
        if (jId.length == 0)
            return;
        jId.scroll(_onSlidePanelScroll);
        jId.stop(true, false);
        jId.css({
            '-webkit-transition-duration': '0ms'
        });
        var beginleft = jId.scrollLeft();
        jId.data('rxm_slide_panel_scroll', {
            beginLeft: beginleft,
            curLeft: beginleft,
            scrollWidth: this.scrollWidth,
            slidePanelWidth: jId.outerWidth(),
            slideItemWidth: jId.find('.rxm-slide-item').outerWidth()
        });
        //把左右没有显示的显示出来
        /**@type {rxm.jquery} */
        var jqItem = $(e.target).closest('.rxm-slide-item');
        jqItem.prev().css('visibility', "visible");
        jqItem.next().css('visibility', "visible");
    };
    var _onTouchMove = function (e, data) {
    };
    /**
     *
     * @param {TouchEvent} e
     * @param {*} data
     */
    var _onTouchEnd = function (e, data) {
        var jId = $(this);
        if (jId.length == 0)
            return;
        jId.off('scroll', _onSlidePanelScroll);
        var data = jId.data('rxm_slide_panel_scroll') || {};
        data.lastLeft = data.curLeft;
        data.curLeft = jId.scrollLeft();
        jId.data('rxm_slide_panel_scroll', data);
    };
    /**
     *
     * @param {rxm.slidePanel.config} config
     */
    var clsFactory = function (config) {
        /**控件id
         * @type  {String}
        */
        var _id;
        /** #_id
         * @type {String}
         */
        var _jqid;
        /**
         * @constructor
         * @class
         * @param {rxm.router} config
         * @param {rxm.page.loadargs2} args
         * @version  1.0.0
         */
        var RxmSlidePanel = /** @class */ (function () {
            function RxmSlidePanel() {
            }
            return RxmSlidePanel;
        }());
        return new RxmSlidePanel();
    };
    $(document.body).touchStart('.' + clsdef.clsName, _onTouchStart);
    $(document.body).touchEnd('.' + clsdef.clsName, _onTouchEnd);
    return clsFactory;
});

define("RxmPopMenu", ["require", "exports", "RxmAppTool"], function (require, exports, appTool) {
    "use strict";
    /**
     * 弹出菜单定义，创建王勇 用于 buttonmenu 和 contextmenu的创建
     * 弹出菜单 在界面上永远是全局唯一的
     */
    var clsdef = {
        rxmPath: 'RxmPopMenu',
        clsName: 'rxm-cmd-dropdown-btnbar',
        juryFn: 'rxmPopMenu'
    };
    /**设置默认值 */
    var clsDefault = {
        //背景板的设置
        backPanelColor: ''
    };
    /* 菜单枚举控件事件枚举对象 */
    var msgEnum = {
        menuShowing: 'showMenuing',
        menuShown: 'menuShown',
        menuHiding: 'menuHiding',
        menuHidden: 'menuHidden'
    };
    var tapAroundDisable = {
        no: 'no',
        round: 'round',
        upDown: 'updown',
        leftRight: 'leftRight'
    };
    var _bindTouchEnd = function (fun, bind) {
        var msType = appTool.isAppOpen() ? 'tap' : 'click';
        bind && $('body').on(msType, fun);
        !bind && $('body').off(msType, fun);
    };
    /**
     * @param {*} args
     * @constructor
     * @extends {rxm.menu}
     */
    function juryExt(args) {
        var rr = window;
        function juryOne(args) {
            if (!this.hasClass(args.clsName))
                return;
            var id = this.attr('id');
            if (!id) {
                id = args.id || args.templateId || appTool.uuid();
                this.attr('id', id);
            }
            args.id = id;
            var r = rr.require(args.rxmPath)(args);
            return r;
        }
        if (this instanceof jQuery) {
            var r = appTool;
            r = juryOne.call(this, clsdef);
            return r;
        }
    }
    var thisObj = appTool.thisObj;
    var ClsFactory = function (cfg) {
        var _id = '';
        cfg.id && (_id = cfg.id);
        if (thisObj(cfg.id)) {
            return thisObj(cfg.id);
        }
        var _data = cfg.data;
        /**@type  {String} */
        var jqId = '#' + _id;
        var _parent;
        var _popmenuArgs;
        if (cfg.positionIn == 'touchPosition')
            _parent = $(jqId).parent();
        /**
         * @param {MouseEvent} ee
         * @param {rxm.jqueryobj}  $menu
         */
        var getPosition = function () {
            /**@type {MouseEvent}*/
            var e = event;
            var $menu = $('#' + _id);
            //!(e = ee) && (e = event)
            var mouseX = e.clientX;
            var mouseY = e.clientY;
            var boundsX = $(window).width();
            var boundsY = $(window).height();
            var menuWidth = $menu.outerWidth();
            var menuHeight = $menu.outerHeight();
            var tp = { 'position': "absolute" };
            var Y, X, parentOffset;
            if (mouseY + menuHeight > boundsY) {
                Y = { 'top': mouseY }; // - menuHeight + $(window).scrollTop() }
            }
            else {
                Y = { 'top': mouseY }; //+ $(window).scrollTop() }
            }
            if ((mouseX + menuWidth > boundsX) && ((mouseX - menuWidth) > 0)) {
                X = { 'left': mouseX }; // - menuWidth + $(window).scrollLeft() }
            }
            else {
                X = { 'left': mouseX }; // + $(window).scrollLeft() }
            }
            parentOffset = $menu.offsetParent().offset();
            X.left = mouseX; // X.left - parentOffset.left
            Y.top = mouseY; //Y.top - parentOffset.top
            return $.extend(tp, Y, X);
        };
        /**
         * 点击在区域slient panel 之外的区域
         * @param {MouseEvent} e
        */
        var _onTapInMenu = function (e, data) {
            var oriEvent;
            _data && (oriEvent = e.originalEvent || e) && (oriEvent.rxmCmdData = _data);
            var close = true;
            var the = this;
            var mode = the.attrTapAroundDisable();
            switch (mode) {
                case tapAroundDisable.no:
                    {
                        close = true;
                    }
                    ;
                    break;
                case tapAroundDisable.round:
                    {
                        close = true;
                    }
                    ;
                    break;
                case tapAroundDisable.upDown:
                    {
                        //点在 菜单展开方向
                    }
                    break;
                case tapAroundDisable.leftRight: {
                }
            }
            //let ths:any=this
            close && this.close && this.close();
        };
        var listenClose = function (e) {
            if (!(e.which == 1 && e.target && ($(e.target).parents('[rxmcmdid]').length > 0 || $(e.target).attr('rxmcmdid')))) {
                var ele;
                //获取cmd的消息名称
                e.target && !!$(e.target).attr('rxmcmdid') && (ele = $(e.target).attr('rxmcmdid'));
                e.target && !$(e.target).attr('rxmcmdid') && (ele = $(e.target).parents('[rxmcmdid]').attr('rxmcmdid'));
                //触发消息
                ele && $(ele).rxmTriggerCmd({ data: _data });
                var tmp = ClsFactory({ id: _id });
                tmp.close && tmp.close();
            }
        };
        var PopMenuImpl = /** @class */ (function () {
            function PopMenuImpl() {
            }
            PopMenuImpl.prototype.popMenu = function (args) {
                _popmenuArgs = args;
                //if (this._jurys) return this._jurys(args)
                var curMenu = $(jqId);
                if (args) {
                    if (args.positionIn == 'touchPosition') {
                        _parent = $(jqId).parent();
                        // curMenu.remove()
                        curMenu.appendTo(document.body);
                        curMenu.css(getPosition());
                    }
                    args.data && (_data = $.extend(true, {}, cfg.data, args.data));
                }
                var mode;
                mode = args && (mode = args.tapAroundDisable);
                mode = this.attrTapAroundDisable(mode);
                if (args.hiddenIds) {
                    var tmpslr = args.hiddenIds.join(',');
                    $(tmpslr).addClass('rxm-display-none');
                }
                curMenu.find('');
                if (mode == tapAroundDisable.no) {
                    curMenu.removeClass('rxm-display-none');
                }
                else {
                }
                _bindTouchEnd($.proxy(_onTapInMenu, this), true);
                // this.body = document.body
                document.body.addEventListener('mousedown', listenClose, true);
                document.body.addEventListener('mousewheel', listenClose, true);
            };
            /**
             * 关闭菜单,将菜单放置在template div内，对象并不随之消失,调用slientpanel 的销毁，
             * @param {} args
             */
            PopMenuImpl.prototype.close = function () {
                _bindTouchEnd(_onTapInMenu, false);
                document.body.removeEventListener('mousedown', listenClose, true);
                document.body.removeEventListener('mousewheel', listenClose, true);
                var curMenu = $(jqId);
                var mode = this.attrTapAroundDisable();
                if (mode == tapAroundDisable.no) {
                    curMenu.addClass('rxm-display-none');
                }
                var args = _popmenuArgs;
                if (args && args.hiddenIds) {
                    var tmpslr = args.hiddenIds.join(',');
                    $(tmpslr).removeClass('rxm-display-none');
                }
                if (_parent) {
                    curMenu.remove();
                    curMenu.appendTo(_parent);
                }
                else {
                }
            };
            PopMenuImpl.prototype.attrTapAroundDisable = function (mode) {
                var value = $(jqId).attr('rxmtaparonuddisable');
                if (typeof mode !== "undefined") {
                    value != mode && (value = mode) && $(jqId).attr('rxmtaparonuddisable', mode);
                }
                !value && (value = tapAroundDisable.no);
                return value;
            };
            return PopMenuImpl;
        }());
        /**
         * 监听弹出子菜单，子菜单是点击 '.rxm-slient-panel'类的结果
         * 2018-06-06
         * @param {MouseEvent} e
         * @param {String} data
         */
        var _onChildrenMenu = function (e, data) {
            //弹出子菜单的几种情况
            //1. btn bar 中的button弹出 以下拉的形态 呈现 
            //2. 菜单中的button 孩子菜单，应该以 左右侧的形态弹出
            // 要判断 是不是存在现有菜单
            if (!data)
                return;
            /**@type  {String} */
            var curBtn;
            if ((curBtn = $(e.target).css('display')) && curBtn.indexOf('inline') != -1) {
                //1、down 或up  button 是按行排列的 
                curBtn = data;
                var pop = $('#' + curBtn).rxmPopMenu();
                pop.popMenu({});
            }
            else {
                // left or  right
            }
        };
        return new PopMenuImpl();
    };
    if (!$.fn.rxmPopMenu) {
        $.fn.rxmPopMenu = juryExt;
        //绑定子菜单函数的命令
    }
    return ClsFactory;
});

define("RxmGrid", ["require", "exports", "RxmGridDocument", "RxmArtTemplate", "text!RxmTemplateDir/rxmGridRowTmpl.html", "RxmAppTool", "RxmUtil"], function (require, exports, doc, artTemplate, rowTmpl, appTool, Util) {
    "use strict";
    //苹果设备设置避免回弹效果
    if (appTool.isIOS()) {
        //调整后调用的接口
        rxm_page.forbidBounce(0, 1);
    }
    /**
     * 引入类声明公共方法
     */
    var thisObj = appTool.thisObj;
    var ClsFactory = function (cfg) {
        //查找已有grid实例，有则直接返回
        if (thisObj(cfg.id)) {
            return thisObj(cfg.id);
        }
        //表格对象id
        var _id = cfg.id;
        //全部的私有变量 18-05-22
        var _touchRowInfo = {
            totalIndex: 1,
            //x坐标
            x: 0,
            //y坐标
            y: 0,
            left: 0,
            top: 0,
            scrollPos: 0
        };
        var _loadingImg = getServer() + "/www/rxm/utils/img/Loading.gif";
        var _upArrowImg = getServer() + "/www/rxm/utils/img/uparrow.png";
        var _downArrowImg = getServer() + "/www/rxm/utils/img/downarrow.png";
        //到顶或者到底后 滑动位置坐标值startYMove（默认为0）
        var _startYMove = 0;
        //包裹器高度 设置默认高度为设备屏幕可用高度
        var _wrapHeight = document.body.scrollHeight.toString();
        //全选状态标志  默认为true
        var _allChecked = true;
        //长按状态标志  默认为false
        var _pressFlag = false;
        var _footerOffset = 0;
        //真分页时，后端返回数据类型结构为此结构即可
        var _pageInfo = {
            curPage: 1,
            pageData: [],
            dataCount: 0,
            pageCount: 0 //总页数
        };
        //排序参数(必须保留,后台取数据必要字段)
        // var  _sortParam = {
        //     field: "",
        //     order: ""
        // };
        //表格包裹器对象定义
        var $gridWrap = $("#" + _id);
        if ($gridWrap.length == 0) {
            console.error("id=" + _id + "表格不存在");
        }
        //Document全局对象 new doc(_config, $gridWrap)
        var _doc;
        //标题栏 
        var $titlebar = $("");
        //工具栏
        var $toolbar = $("");
        //顶部刷新栏
        var $topRefreshbar = $("");
        //底部刷新栏
        var $bottomRefreshbar = $("");
        //搜索栏
        var $searchbar = $("");
        //表格内容数据包裹器
        var $gridContent = $("");
        //表格主体
        var $tableBody = $("");
        //分页区域（桌面版）
        var $pagination = $("");
        //表格tbody
        var $tBody = $("");
        //表格是否reload加载
        var _isRender = false;
        /**滑动菜单全局变量定义*/
        //当前左滑的对象
        var slideCurSwipeTr;
        //上一个左滑的对象
        var slideLastSwipeTr;
        var btnAreaWidth;
        ///this.dataParNum = _config.layout.length;
        var scrollDivWidth;
        var dataDivWidth;
        var _iconMargin;
        //行数据中具有icon列
        var _hasIcon = false;
        //当前数据页缓存数组
        var _viewData = [];
        //是否为buffer grid
        var _isBuffer;
        //buffer grid reload函数 加载表格
        var _bufferLoad = function (arg) {
            _isBuffer = true;
            var me = ClsFactory({ id: _id });
            if (arg) {
                _viewData = arg;
                _config.data = arg;
                _config.param.data = arg;
                //_pageInfo对象添加数据  
                _pageInfo.pageData = arg;
                _pageInfo.dataCount = arg.length;
            }
            me.refresh();
        };
        //获取radio值函数
        var getRadioValue = function (arg) {
            var radioValue = false;
            if (typeof arg == "boolean") {
                radioValue = arg;
            }
            else if (typeof arg == "string") {
                radioValue = (arg == "true");
            }
            return radioValue;
        };
        /**
        * 获取html表格属性 重组config对象
        * @param {String} wrapId  - 表格包裹器ID
        * @returns {Object} gridCfg - config对象
        */
        var getHtmlAttr = function (wrapId) {
            //表格config对象定义
            var gridCfg = {};
            //表格包裹器对象
            var $gwAttr = $("#" + wrapId);
            //获取表格每列属性值与名称  
            //可以设置  在移动端 桌面端显示哪些列  默认列可同时显示
            var tabth = $("#" + wrapId + " .rxm-table-head th[rxmmdview],th[rxmmview]").not("[rxmhidden]");
            //表格layout
            var layout = [];
            if (isDesktop(wrapId)) {
                //桌面端 排除具有hidden属性的列
                tabth = $("#" + wrapId + " .rxm-table-head th[rxmmdview],th[rxmdview]").not("[rxmhidden]");
            }
            for (var i = 0; i < tabth.length; i++) {
                //layout属性设定
                if (typeof ($(tabth[i]).attr("fieldvalue")) != "undefined") {
                    var lo = {};
                    lo.name = $(tabth[i]).text().replace(/^\s+|\s+$/g, "");
                    lo.field = $(tabth[i]).attr("fieldvalue");
                    if (typeof ($(tabth[i]).attr("rxmtap")) != "undefined") {
                        lo.rxmtap = true;
                    }
                    layout.push(lo);
                }
            }
            //设置layout 数据列定义
            gridCfg.layout = layout;
            //判断列表是否显示索引号列 桌面端 默认显示序号
            if ($("#" + wrapId + " .rxm-table-head").find("th[class~='rxmindex']").length == 0) {
                gridCfg.index = false;
            }
            else {
                gridCfg.index = true;
            }
            //判断列表是否显示多选框列 移动、桌面端 单选[radio]还是多选[checkbox],默认checkbox 默认不显示
            if ($("#" + wrapId).find("th[class~='rxmmulti']").length !== 0) {
                if ($("#" + wrapId).find("th[class~='rxmmulti']").find("input").length == 0) {
                    gridCfg.multi = false;
                }
                else {
                    gridCfg.multi = true;
                }
            }
            //移动端multi 不存在不显示 默认为多选框
            if (!isDesktop(wrapId)) {
                if (typeof gridCfg.multi == 'undefined') {
                    gridCfg.multi = true;
                }
            }
            //行数据是否省略多余字符 属性设置 true 省略多余字符,其他字符用三个点代替,false 换行显示所有内容,默认省略多余字符
            if ($gwAttr.hasClass("rxm-s-grid-ellipsis")) {
                gridCfg.textEllipsis = true;
            }
            else {
                gridCfg.textEllipsis = false;
            }
            // //表格主键字段
            // if (typeof ($gwAttr.attr("fieldkey")) != "undefined") {
            //     gridCfg.fieldkey = $gwAttr.attr("fieldkey");
            // }
            //modify 20181108 表格请求数据 ajax请求url dataurl改为rxmurl
            if (typeof ($gwAttr.attr("rxmurl")) != "undefined") {
                var gridDataUrl = $gwAttr.attr("rxmurl");
                //rxmurl处理 判断地址首字符是否添加斜杠 
                if (gridDataUrl.substring(0, 1) != "/") {
                    gridDataUrl = "/" + gridDataUrl;
                }
                //数据服务添加getServer() 解决本地加载模式无法获取表格数据
                gridCfg.data = {
                    "type": "URL",
                    "value": getServer() + gridDataUrl
                };
            }
            //add 20190122 表格请求数据参数 ajax请求url的参数
            if (typeof ($gwAttr.attr("rxmparam")) != "undefined") {
                var dataParam = $gwAttr.attr("rxmparam");
                //将字符串中所有所有单引号替换为双引号 不然JSON.parse报错
                gridCfg.queryParam = JSON.parse(dataParam.replace(/\'/g, '"'));
            }
            //获取分页状态 分页 才获取页数
            if (typeof ($gwAttr.find(".rxm-s-grid-pagination").attr("rxmpaging")) != "undefined" && $gwAttr.find(".rxm-s-grid-pagination").attr("rxmpaging") == "true") {
                gridCfg.pagination = true;
                if (isDesktop(wrapId)) {
                    gridCfg.pageSize = $gwAttr.find(".rxm-s-grid-pagination").attr("rxmpagesize");
                }
                else {
                    //每页数据显示条目数
                    if (typeof ($gwAttr.attr("rxmpagesize")) != "undefined") {
                        gridCfg.pageSize = $gwAttr.attr("rxmpagesize");
                    }
                    //表格下拉刷新数据提示语
                    if (typeof ($gwAttr.find(".rxm-s-grid-pagination").attr("rxmtoptipbegin")) != "undefined") {
                        gridCfg.refreshTip.topTipBegin = $gwAttr.attr("rxmtoptipbegin");
                    }
                    //表格下拉松开刷新提示语
                    if (typeof ($gwAttr.find(".rxm-s-grid-pagination").attr("rxmtoptiprefresh")) != "undefined") {
                        gridCfg.refreshTip.topTipRefresh = $gwAttr.attr("rxmtoptiprefresh");
                    }
                    //表格下拉加载中提示语 
                    if (typeof ($gwAttr.find(".rxm-s-grid-pagination").attr("rxmtoptiploading")) != "undefined") {
                        gridCfg.refreshTip.topTipLoading = $gwAttr.attr("rxmtoptiploading");
                    }
                    //表格下拉刷新失败提示语
                    if (typeof ($gwAttr.find(".rxm-s-grid-pagination").attr("rxmtoptiperror")) != "undefined") {
                        gridCfg.refreshTip.topTipError = $gwAttr.attr("rxmtoptiperror");
                    }
                    //表格上拉分页加载失败提示语
                    if (typeof ($gwAttr.find(".rxm-s-grid-pagination").attr("rxmbottomtiperror")) != "undefined") {
                        gridCfg.refreshTip.bottomTipError = $gwAttr.attr("rxmbottomtiperror");
                    }
                    //上拉分页没有更多提示语
                    if (typeof ($gwAttr.find(".rxm-s-grid-pagination").attr("rxmbottomtipend")) != "undefined") {
                        gridCfg.refreshTip.bottomTipEnd = $gwAttr.attr("rxmbottomtipend");
                    }
                }
            }
            else {
                gridCfg.pagination = false;
            }
            //最大缓存页数
            if (typeof ($gwAttr.attr("rxmcachemaxlen")) != "undefined") {
                gridCfg.param.cacheMaxLen = $gwAttr.attr("rxmcachemaxlen");
            }
            //最大显示页数
            if (typeof ($gwAttr.attr("rxmviwemaxlen")) != "undefined") {
                gridCfg.param.viweMaxLen = $gwAttr.attr("rxmviwemaxlen");
            }
            //表格暂无数据提示语
            if (typeof ($gwAttr.attr("rxmnodatatip")) != "undefined") {
                gridCfg.refreshTip.nodataTip = $gwAttr.attr("rxmnodatatip");
            }
            //数据行图标区域宽度
            if (typeof ($gwAttr.attr("rxmrowiconwidth")) != "undefined") {
                gridCfg.trRowParam.iconWidth = $gwAttr.attr("rxmrowiconwidth");
            }
            //数据行数据字段单个高度
            if (typeof ($gwAttr.attr("rxmrowparheight")) != "undefined") {
                gridCfg.trRowParam.parHeight = $gwAttr.attr("rxmrowparheight");
            }
            //数据行数据显示div距离上下边距
            if (typeof ($gwAttr.attr("rxmrowdatamargin")) != "undefined") {
                gridCfg.trRowParam.dataMargin = $gwAttr.attr("rxmrowdatamargin");
            }
            //数据行距离屏幕左右边距
            if (typeof ($gwAttr.attr("rxmrowtrmargin")) != "undefined") {
                gridCfg.trRowParam.trMargin = $gwAttr.attr("rxmrowtrmargin");
            }
            //左滑菜单每个选项默认宽度
            if (typeof ($gwAttr.attr("rxmleftbtnwidth")) != "undefined") {
                gridCfg.leftSlideParam.btnWidth = $gwAttr.attr("rxmleftbtnwidth");
            }
            //左滑出现菜单区域的最小距离值，小于此值则隐藏 
            if (typeof ($gwAttr.attr("rxmviwemaxlen")) != "undefined") {
                gridCfg.leftSlideParam.viewWidth = $gwAttr.attr("rxmviwemaxlen");
            }
            //左滑菜单滑动隐藏时间设定 
            if (typeof ($gwAttr.attr("rxmleftaduration")) != "undefined") {
                gridCfg.leftSlideParam.traDuration = $gwAttr.attr("rxmleftaduration");
            }
            return gridCfg;
        };
        /**
      * 判断是否为桌面版
      * @param {String} wrapId - 表格包裹器ID
      * @returns {Boolean} - 桌面版状态值
      */
        var isDesktop = function (wrapId) {
            var $gw = $("#" + wrapId);
            if ($gw.is(".rxm-grid-desktop")) {
                return true;
            }
            else if ($gw.is(".rxm-grid-mobile")) {
                return false;
            }
            else if ($gw.is(".rxm-grid-mobile-desktop")) {
                //判断body中是否存在rxm-desktop
                if ($(document.body).is(".rxm-desktop")) {
                    return true;
                }
                else {
                    return false;
                }
            }
            return true;
        };
        var RxmGridMsg = {
            msgEnum: {
                swipeInTopEndAfter: "swipeInTopEndAfter",
                swipeInBottomAfter: "swipeInBottomAfter",
                loadSucsess: "loadSucsess",
                loadComplete: "loadComplete",
                appendRow: "append",
                insertRow: "insert",
                deleteRow: "delete",
                updateRow: "update",
                ormRereshGridView: "ormRereshGridView",
                swipeInTop: "swipeInTop",
                swipeInBottom: "swipeInBottom",
                swipeInTopBegin: "swipeInTopBegin",
                swipeInBottomBegin: "swipeInBottomBegin",
                swipeInTopEnd: "swipeInTopEnd",
                swipeInBottomEnd: "swipeInBottomEnd",
                tapLineElement: "tapLineElement",
                pressLineElement: "pressLineElement",
                slideInLine: "slideInLine"
            }
        };
        var _calTableBodyHeight = function () {
            //计算table-body坐标值
            var tBodyHeight = $gridWrap.find(".rxm-table-body")[0].getBoundingClientRect();
            var $wParent = $gridWrap.parent();
            if ($wParent.hasClass("rxm-content-panel") || $wParent.hasClass("rxm-left-panel") || $wParent.hasClass("rxm-top-panel")) {
                if (_config.pagination) {
                    tBodyHeight = $gridWrap.height() - tBodyHeight.top;
                }
                else {
                    tBodyHeight = "auto";
                }
            }
            else {
                if (_config.pagination) {
                    //计算table-body高度 总高度减去div上沿高度
                    tBodyHeight = $('html').height() - tBodyHeight.top - _footerOffset;
                }
                else {
                    tBodyHeight = "auto";
                }
            }
            return tBodyHeight;
        };
        /**
      * 重新设置tbody高度
      */
        var _resize = function (action, height) {
            var _tbodyHeight = _calTableBodyHeight();
            if (action == "add") {
                _tbodyHeight = _tbodyHeight + height;
            }
            else {
                _tbodyHeight = _tbodyHeight - height;
            }
            $tableBody.css("height", _tbodyHeight + "px");
        };
        var _config = {
            //gridWrap 唯一id
            id: appTool.unid() + "",
            //是否分页 默认分页
            pagination: true,
            //每页数据条目数  默认30
            pageSize: 30,
            //数据选中 单选[radio]还是多选[checkbox],默认不显示
            //multi: true,
            //数据是否换行，还是隐藏多余字符(true 省略多余字符,其他字符用三个点代替  false 换行显示所有内容 ) 默认省略多余字符
            textEllipsis: true,
            //兼容使用原始ajax的情况,0.9.8版本新增     改变返回数据returnData的key值
            key: {
                "allDataCount": "dataCount",
                "curPageData": "pageData"
            },
            //查询参数
            queryParam: {},
            //行（列）头信息
            layout: [],
            //行点击事件
            rowevent: [],
            slidemenu: false,
            height: 0,
            data: {
                type: "",
                value: "",
                //-1 上一页  -2 下一页  0 config当前页进行刷新，>0 从pageSize页开始取数据，每次只是取1页
                pageSize: 1,
                loadComplete: ""
            },
            //缓存数据参数
            param: {
                //单位为页
                data: [],
                //缓存首页面
                cacheBegin: 1,
                //最大缓存页数
                cacheMaxLen: 30,
                //显示首页面 从0 开始
                viewBegin: 0,
                //最大显示页数
                viweMaxLen: 10
            },
            //上拉、下拉刷新提示语参数
            refreshTip: {
                topTipBegin: "下拉刷新数据...",
                topTipRefresh: "松开即可刷新...",
                topTipLoading: "加载中...",
                topTipSuccess: "数据刷新成功",
                topTipError: "数据刷新失败",
                bottomTipLoading: "加载中...",
                bottomTipError: "数据加载失败",
                bottomTipEnd: "没有更多了",
                nodataTip: "暂无数据！"
            },
            invalidMode: {
                up: 1,
                down: 0
            },
            leftSlideParam: {
                btnWidth: 60,
                viewWidth: 60,
                traDuration: "200",
                traFunction: "ease-out" //开始到结束的过渡效果 默认以慢速结束的过渡效果
            },
            trRowParam: {
                iconWidth: 55,
                parHeight: 21,
                dataMargin: 16,
                trMargin: 20 //tr距离屏幕左右边距
            }
        };
        var RxmGridImpl = /** @class */ (function () {
            function RxmGridImpl() {
                /**
                 * 表格绑定滑动至顶部事件(兼容工作流)
                 */
                this.callbackSwipeInTop = RxmGridImpl.prototype.bindSwipeInTop;
                /**
                 * 表格绑定滑动至底部事件(兼容工作流)
                 */
                this.callbackSwipeInBottom = RxmGridImpl.prototype.bindSwipeInBottom;
                /**
                 * 表格绑定滑动至顶部开始事件(兼容工作流)
                 */
                this.callbackSwipeInTopBegin = RxmGridImpl.prototype.bindSwipeInTopBegin;
                /**
                 * 表格绑定滑动至底部开始事件(兼容工作流)
                 */
                this.callbackSwipeInBottomBegin = RxmGridImpl.prototype.bindSwipeInBottomBegin;
                /**
                 * 表格绑定滑动至顶部结束事件(兼容工作流)
                 */
                this.callbackSwipeInTopEnd = RxmGridImpl.prototype.bindSwipeInTopEnd;
                /**
                 * 表格绑定滑动至底部结束事件(兼容工作流)
                 */
                this.callbackSwipeInBottomEnd = RxmGridImpl.prototype.bindSwipeInBottomEnd;
                /**
                 * 表格行绑定tap事件(兼容工作流)
                 */
                this.callbackTapLineElement = RxmGridImpl.prototype.bindTapLineElement;
                /**
                 * 表格行绑定长按事件(兼容工作流)
                 */
                this.callbackPressLineElement = RxmGridImpl.prototype.bindPressLineElement;
                /**
                 * 表格绑定数据追加事件(兼容工作流)
                 */
                this.callbackDataAppend = RxmGridImpl.prototype.bindDataAppend;
                /**
                 * 表格绑定reload完成后事件(兼容工作流)
                 */
                this.callbackLoadComplete = RxmGridImpl.prototype.bindLoadComplete;
                //获取html定义属性生成表格config对象
                var htmlCfg = getHtmlAttr(cfg.id);
                //config对象 以js配置对象优先级最高
                _config = $.extend(true, _config, cssOrm.default.clsGridMobile, htmlCfg, cfg);
                if (isDesktop(cfg.id)) {
                    //如果是桌面版 设置cacheMaxLen与viweMaxLen值均为1 分页显示最新一页
                    _config.param.cacheMaxLen = 1;
                    _config.param.viweMaxLen = 1;
                }
                _doc = new doc(_config, $gridWrap);
                _doc._pageInfo = _pageInfo;
            }
            /**
         * 表格初始化配置对象
         */
            ///所有的自定义消息 
            /**
            * 根据domelement信息获取所在的视图行索引
            * @param {String} domElement - dom选择器
            * @returns {Number} index - 视图行索引
            */
            RxmGridImpl.prototype.getRowViewIndex = function (domElement) {
                var $tr = $(domElement).closest("tr");
                var index = $tBody.find("tr").index($tr);
                return index;
            };
            /**
            * 设置或者获取手指正在触摸的行信息
            * @param {event|Number} arg - event或者行索引值
            * @returns {Object} - 触摸行坐标信息对象
            */
            RxmGridImpl.prototype.touchRowInfo = function (arg) {
                var viewIndex;
                var cf = _config;
                if (arg) {
                    var viewIndex;
                    if (!!arg.target) {
                        viewIndex = this.getRowViewIndex(arg.target);
                        _touchRowInfo.domTr = $(arg.target).closest('tr')[0] || _touchRowInfo.domTr || $($tBody.find("tr:last"))[0];
                    }
                    else if ($.isNumeric(arg)) {
                        _touchRowInfo.domTr = $tBody.find("tr")[arg] || _touchRowInfo.domTr;
                        viewIndex = arg;
                    }
                    //输入的是视图索引
                    //viewIndex = arg.totalIndex;
                    _touchRowInfo.totalIndex = (cf.param.cacheBegin + cf.param.viewBegin - 1) * cf.pageSize + viewIndex;
                    _touchRowInfo.oldPos = _touchRowInfo.domTr.getBoundingClientRect();
                }
                else {
                    //console.info(_touchRowInfo.domTr);
                    var viewIndex_1 = _touchRowInfo.totalIndex - (cf.param.cacheBegin + cf.param.viewBegin - 1) * cf.pageSize;
                    var domTr = $tBody.find("tr")[viewIndex_1];
                    if (!!domTr && !!_touchRowInfo.oldPos) {
                        var firstPos = $tBody.find("tr")[0].getBoundingClientRect();
                        var newPos = domTr.getBoundingClientRect();
                        var scrolltop = newPos.top - firstPos.top;
                        _touchRowInfo.scrollPos = scrolltop - _touchRowInfo.oldPos.top + newPos.height;
                    }
                    else {
                        _touchRowInfo.scrollPos = 0;
                    }
                }
                return _touchRowInfo;
            };
            /**
            * 获取当前表格所有数据
            * @param {Boolean} bClone - true取缓存中的全部，undefined，false 取视图数据，此为默认
            * @param {Boolean} bCache - true克隆数据，undefined，false 返回 view 数据此为默认
            * @returns {Object} - 表格所有数据对象
            */
            RxmGridImpl.prototype.getAllData = function (bClone, bCache) {
                var cf = _config;
                bClone = bClone || false;
                bCache = bCache || false;
                if (bCache) {
                    if (bClone) {
                    }
                    else {
                        return cf.param.data;
                    }
                }
                else {
                    var ret = [];
                    var dataLen;
                    if ((cf.param.viewBegin + cf.param.viweMaxLen) >= Math.ceil(cf.param.data.length / cf.pageSize)) {
                        dataLen = cf.param.data.length;
                    }
                    else {
                        dataLen = cf.param.viweMaxLen * cf.pageSize;
                    }
                    for (var j = cf.param.viewBegin * cf.pageSize; j < dataLen; j++) {
                        if (bClone) {
                            ret.push($.extend(true, {}, cf.param.data[j]));
                        }
                        else {
                            ret.push(cf.param.data[j]);
                        }
                    }
                    return ret;
                }
            };
            ;
            /**
            * 获取当前选择行索引
            * @returns {Array} selectedIdxArr - 索引数组
            */
            RxmGridImpl.prototype.getSelectedRow = function () {
                var selectedIdxArr = [];
                var $tableBodyRow = $gridWrap.find(".rxm-s-grid-table tbody");
                //获取表格所有tr对象 限定tr范围 表格tbody内的tr才是数据行 modify by xiangcq 20180112
                var $gridTr = $tBody.find("tr");
                $tableBodyRow.find("input:checked").each(function () {
                    var index = $gridTr.index($(this).closest("tr"));
                    selectedIdxArr.push(index);
                });
                return selectedIdxArr;
            };
            ;
            /**
            * 获取选中行数据
            * @param {Boolean} bClone - true取缓存中的全部，undefined，false 取视图数据，此为默认
            * @returns {Object} rd - 选中数据对象
            */
            RxmGridImpl.prototype.getSelectedData = function (bClone) {
                var rows = this.getSelectedRow();
                var rd = _doc.getRowDataByViewIndexs(rows, bClone);
                return rd;
            };
            ;
            /**
            * 获取滑动行数据
            * @param {String} domElement - dom选择器
            * @returns {Object} rd - 当前滑动行数据对象
            */
            RxmGridImpl.prototype.getSlideRowData = function (domElement, bClone) {
                var rows = this.getRowViewIndex(domElement);
                var rd = _doc.getRowDataByViewIndexs(rows, bClone);
                return rd;
            };
            ;
            RxmGridImpl.prototype.checkRow = function (viewIndexs) {
                //获取表格中所有checkbox  jquery对象
                var $checkTr = $gridWrap.find("input[name='s_gird_multi_" + _config.id + "']");
                //参数为数字,选中单行
                if ($.isNumeric(viewIndexs)) {
                    $($checkTr[viewIndexs]).prop("checked", true);
                }
                else if ($.isArray(viewIndexs)) {
                    //参数为数组,选中多行
                    $.each(viewIndexs, function (index, it) {
                        $($checkTr[it]).prop("checked", true);
                    });
                }
                else {
                    //参数为为空,全选
                    $checkTr.prop("checked", true);
                }
            };
            ;
            /**
            * 通过index取消选中一行、多行或者全部
            * @param {Number|Array} viewIndexs - 行索引 此参数可为数字、数组、空
            */
            RxmGridImpl.prototype.uncheckRow = function (viewIndexs) {
                //获取表格中所有checkbox  jquery对象
                var $checkTr = $gridWrap.find("input[name='s_gird_multi_" + _config.id + "']");
                //参数为数字,选中单行
                if ($.isNumeric(viewIndexs)) {
                    $($checkTr[viewIndexs]).prop("checked", false);
                }
                else if ($.isArray(viewIndexs)) {
                    //参数为数组,选中多行
                    $.each(viewIndexs, function (index, it) {
                        $($checkTr[it]).prop("checked", false);
                    });
                }
                else {
                    //参数为为空,全选
                    $checkTr.prop("checked", false);
                }
            };
            ;
            /**
            * 追加数据
            * @param {Array} rows - 当前页数据
            * @param {Number} beginPageNum - 起始页面码数
            */
            RxmGridImpl.prototype.appendRow = function (rows, forceLoad) {
                ///<param name="beginPageNum" type="number">起始页面码数</param>
                _doc.viewAppendRow(rows, forceLoad);
            };
            ;
            /**
            * 插入数据
            * @param {Array} arg - 插入数据数组
            * @param {Boolean} forceLoad - true 到服务器端,重新取数据
            */
            RxmGridImpl.prototype.insertRow = function (arg, forceLoad) {
                _doc.viewInsertRow(arg, forceLoad);
            };
            ;
            /**
            * 删除数据
            * @param {Array} arg - 删除数据的行索引数组
            * @param {Boolean} forceLoad - true 到服务器端,重新取数据
            */
            RxmGridImpl.prototype.deleteRow = function (viewIndexs, forceLoad) {
                ///<summary> 删除数据 </summary>
                ///<param  name ="viewIndexs"  type="Array">删除数据的行索引数组<param>
                if (_isBuffer) {
                    var dArr_1 = _config.data;
                    var cf = _config;
                    if ($.isNumeric(viewIndexs)) {
                        var t = viewIndexs;
                        viewIndexs = [];
                        viewIndexs.push(t);
                    }
                    viewIndexs.sort(function (a, b) {
                        return b - a;
                    });
                    var trs = $tBody.find("tr");
                    $.each(viewIndexs, function (index, it) {
                        var cache = it;
                        dArr_1.splice(cache, 1);
                        $(trs[it]).remove();
                    });
                    this.refresh();
                }
                else {
                    if ($.isNumeric(viewIndexs)) {
                        var t = viewIndexs;
                        viewIndexs = [];
                        viewIndexs.push(t);
                    }
                    viewIndexs.sort(function (a, b) {
                        return b - a;
                    });
                    this.touchRowInfo(viewIndexs[viewIndexs.length - 1]);
                    _doc.viewDeleteRow(viewIndexs, forceLoad);
                }
            };
            ;
            /**
            * 更新行数据
            * @param {Array} arg - 更新数据的行索
            * @param {Boolean} forceLoad - true 到服务器端,重新取数据
            */
            RxmGridImpl.prototype.updateRow = function (arg, forceLoad) {
                _doc.viewUpdateRow(arg, forceLoad);
            };
            ;
            /**
            * 获取page信息
            * @returns {Object}  - page信息对象
            */
            RxmGridImpl.prototype.getPageInfo = function () {
                return _pageInfo;
            };
            ;
            /**
            * 重新加载表格(数据更新)
            * @param {Object} arg - 共有三个参数：type,value,page
            */
            RxmGridImpl.prototype.reload = function (arg) {
                if (!_isRender) {
                    var the = this;
                    //ajax请求参数格式化 可以重写
                    if (the.formatDataBeforeAjax) {
                        _doc.formatDataBeforeAjax = the.formatDataBeforeAjax;
                    }
                    //ajax请求返回数据格式化 可以重写
                    if (the.formatDataAfterAjaxSuccess) {
                        _doc.formatDataAfterAjaxSuccess = the.formatDataAfterAjaxSuccess;
                    }
                    //判断是否为桌面版
                    if (isDesktop(_config.id)) {
                        this._renderPc();
                    }
                    else {
                        this._render();
                    }
                    _isRender = true;
                }
                if (!arg) {
                    //_config.param && _doc.reload()
                    //!_config.param && _bufferLoad()
                    if (_config.param) {
                        //桌面端表格，直接reload()  直接返回第一页数据
                        if (isDesktop(_config.id)) {
                            _config.param.viewBegin = 0;
                            _pageInfo.curPage = 1;
                        }
                        _isBuffer = false;
                        _doc.reload();
                    }
                    if (!_config.param) {
                        _isBuffer = true;
                        _bufferLoad();
                    }
                }
                else {
                    if (arg instanceof Object) {
                        if ($.isArray(arg.data)) {
                            _isBuffer = true;
                            _bufferLoad(arg.data);
                        }
                        else {
                            _isBuffer = false;
                            _doc.reload(arg);
                        }
                    }
                    //$.isArray(arg) &&  _bufferLoad(arg)
                    //           $.isString(arg) && _doc.reload({
                    //               "type": "URL",
                    //               "value": arg
                    //           })
                    //arg.value && _doc.reload(arg)
                    if ($.isArray(arg)) {
                        _isBuffer = true;
                        _bufferLoad(arg);
                    }
                    if ($.isString(arg)) {
                        _isBuffer = false;
                        _doc.reload({
                            "type": "URL",
                            "value": arg
                        });
                    }
                    if (arg.value) {
                        _isBuffer = false;
                        _doc.reload(arg);
                    }
                }
            };
            /**
            * 刷新表格（视图更新）_doc.reload调用
            */
            RxmGridImpl.prototype.refresh = function (arg) {
                ///<param  name ="arg"  type="Array"><param>
                var cf = _config;
                //清空表格中所有数据
                $tBody.empty();
                var trHeight = 40;
                if (isDesktop(_config.id)) {
                    //表格包裹器设置高度
                    var $selPageSize = $gridWrap.find(".rxm-page-size select option:selected").val();
                    $gridWrap.find(".rxm-table-body").css("height", trHeight * $selPageSize + "px");
                    //桌面端 设置分页数据以及绑定分页按钮事件
                    this._setPaginationDataEvent();
                }
                //  var baseIndex = (parseInt(_pageInfo.curPage) - 1) * parseInt(_config.pageSize);
                //  var begin = cf.param.viewBegin * cf.pageSize;
                //  var cacheD = cf.param.data.length ;
                //  var viewD = (cf.param.viweMaxLen+cf.param.viewBegin)*cf.pageSize;
                //  var end = cacheD < viewD ? cacheD : viewD;
                //循环迭代数据创建表格行
                //var i=0;
                //reload 返回数据即画表格，若无数据则提示"暂无数据！"'
                var end = _viewData.length;
                if (end > 0) {
                    for (var j = 0; j < end; j++) {
                        var item = _viewData[j];
                        //ajax动态表格
                        if (item._rxm_baseIndex) {
                            $tBody.append(this._createRow(item, item._rxm_baseIndex, item._rxm_baseIndex2));
                        }
                        else { //buffer grid
                            var baseIndex = (parseInt(_pageInfo.curPage.toString()) - 1) * parseInt(_config.pageSize);
                            $tBody.append(this._createRow(item, j + 1, baseIndex));
                        }
                    }
                }
                else {
                    //桌面版表格,无数据时需要设置colspan
                    if (isDesktop(cf.id)) {
                        var thLen = $gridWrap.find(".rxm-table-body th").length;
                        $tBody.append($("<tr class='rxm-nodata-tip-tr'><td class='rxm-nodata-tip' colspan = '" + thLen + "'>" + _config.refreshTip.nodataTip + "</td></tr>"));
                    }
                    else {
                        $tBody.append($("<tr class='rxm-nodata-tip-tr'><td class='rxm-nodata-tip'>" + _config.refreshTip.nodataTip + "</td></tr>"));
                    }
                }
                //点击checkbox防止触发行事件
                if (_config.slidemenu) {
                    //左滑行 checkbox的input框放在div中
                    $gridWrap.find(".rxm-multi-check").closest("div").tap(function () {
                        return false;
                    });
                }
                else {
                    //普通行 checkbox的input框放在td中
                    $gridWrap.find(".rxm-multi-check").closest("td").tap(function () {
                        return false;
                    });
                }
                var touchInfo = this.touchRowInfo();
                $tableBody.scrollTop(touchInfo.scrollPos);
                if (_pressFlag) {
                    this.initPress();
                }
                //add by xiangcq 2017.10.27 判断苹果设备 去除高度  去除scroll样式
                if (appTool.isIOS()) {
                    $("#rxm_content").css("height", "auto").removeClass('content-class');
                }
            };
            ;
            /**
            * 计算表格 包裹器高度
            * @description 用户可以自己设置高度 默认通过表格分页属性 设置表格包裹器高度  分页 表格高度为100% 自动撑开；不分页设置为auto
            * @returns {Number} index - 视图行索引
            */
            RxmGridImpl.prototype._calWrapHeight = function () {
                var wrapHeight;
                if (!!_config.height) { //表格config对象 height设置
                    wrapHeight = _config.height;
                }
                else if (_config.pagination) { //判断是否分页
                    wrapHeight = "100%";
                }
                else {
                    wrapHeight = "auto";
                }
                return wrapHeight;
            };
            /**
            * 移动端 加载视图内所有属性（表格、标题栏、工具栏、搜索栏、刷新栏)
            */
            RxmGridImpl.prototype._render = function () {
                //首先检查根据ID判断表容器$gridWrap是否存在，若存在即设置容器
                //$gridWrap.attr("dataurl")为undefined 兼容原有表格 只定义包裹器div即可
                if (!this._isHtmlAttrCfg()) { //false
                    $gridWrap.addClass("rxm-s-grid").empty();
                }
                _config.textEllipsis && $gridWrap.addClass("rxm-s-grid-ellipsis");
                //获取包裹器高度
                _wrapHeight = this._calWrapHeight();
                //初始化包裹器表格高度值,表格config对象 height属性设置的高度最优先, 其次为html div包裹器设置的高度,如果都不设置默认取屏幕可用高度
                //  if(!!_config.height){//表格config对象 height设置
                //      _wrapHeight = _config.height;
                //  }else if($gridWrap.height() !== 0 && $gridWrap.height() !== 100 && !_config.height){//html div包裹器高度设置
                //     var otherHeight = 0;
                //      for(var i=0;i<$gridWrap.siblings().length;i++){
                //          if($($gridWrap.siblings()[i]).css("display")!="none"  &&  $($gridWrap.siblings()[i]).css("visibility")!="hidden"){
                //              otherHeight += $($gridWrap.siblings()[i]).height();
                //          }
                //      }
                //      _wrapHeight = $gridWrap.height() - otherHeight;
                //      _config.height = parseInt(_wrapHeight);
                //  }else if($gridWrap.height()==0 && !_config.height){//未设置高度，默认取屏幕可用高度
                //      var otherHeight = 0;
                //      for(var i=0;i<$gridWrap.siblings().length;i++){
                //          if($($gridWrap.siblings()[i]).css("display")!="none"  &&  $($gridWrap.siblings()[i]).css("visibility")!="hidden"){
                //              otherHeight += $($gridWrap.siblings()[i]).height();
                //          }
                //      }
                //      _wrapHeight = _wrapHeight - otherHeight;
                //      _config.height = _wrapHeight;
                //  }
                //表格包裹器设置高度
                $gridWrap.css("height", _wrapHeight);
                //判断htm文件中表格包裹器div是否存在定制titlebar
                if ($gridWrap.find(".rxm-s-grid-titlebar").length == 0) {
                    $gridWrap.append($('<div class="rxm-s-grid-titlebar"></div>'));
                    $gridWrap.find(".rxm-s-grid-titlebar").css("display", "none");
                }
                ;
                //从整个html页面中选择toolbar
                $toolbar = $(".rxm-s-grid-toolbar[ormgrid=" + _config.id + "]");
                //判断html文件中是否存在定制toolbar,如果没有添加默认
                if ($toolbar.length === 0) {
                    //判断html文件中是否存在定制toolbar
                    $gridWrap.find(".rxm-s-grid-titlebar").after($('<div class="rxm-s-grid-toolbar" ormgrid=' + _config.id + '></div>'));
                    $gridWrap.find(".rxm-s-grid-toolbar").css("display", "none");
                    //重新定义toolbar
                    $toolbar = $(".rxm-s-grid-toolbar[ormgrid=" + _config.id + "]");
                }
                //判断html文件中表格包裹器div是否存在定制searchbar
                if ($gridWrap.find(".rxm-s-grid-searchbar").length == 0) {
                    $gridWrap.append($('<div class="rxm-s-grid-searchbar"></div>'));
                    $gridWrap.find(".rxm-s-grid-searchbar").css("display", "none");
                }
                ;
                //判断html文件中是否存在定制topRefreshbar
                if ($gridWrap.find(".rxm-s-grid-topRefreshbar").length == 0) {
                    $gridWrap.append($('<div class="rxm-s-grid-topRefreshbar"></div>'));
                    $gridWrap.find(".rxm-s-grid-topRefreshbar").css("display", "none");
                }
                //判断html文件中是否存在定制表格
                if ($gridWrap.find(".rxm-s-grid-content").length == 0) {
                    $gridWrap.append($('<div class="rxm-s-grid-content"><div class="rxm-s-grid-table"></div></div>'));
                }
                ;
                //判断html文件中是否存在定制s_grid_bottomRefreshbar
                if ($gridWrap.find(".rxm-s-grid-bottomRefreshbar").length == 0) {
                    $gridWrap.append($('<div class="rxm-s-grid-bottomRefreshbar"></div>'));
                    $gridWrap.find(".rxm-s-grid-bottomRefreshbar").css("display", "none");
                }
                //判断操作系统为IOS系统，添加s_grid_content样式 padding-top:1px 解决IOS未定制搜索框、操作栏场景下 下拉刷新失效的问题
                if (appTool.isIOS()) {
                    $gridWrap.find(".rxm-s-grid-content").css("padding-top", "1px");
                }
                $titlebar = $("#" + _config.id + " .rxm-s-grid-titlebar");
                //$toolbar = $("#" + _config.id + " .rxm-s-grid-toolbar");   
                $searchbar = $("#" + _config.id + " .rxm-s-grid-searchbar");
                $topRefreshbar = $("#" + _config.id + " .rxm-s-grid-topRefreshbar");
                $gridContent = $("#" + _config.id + " .rxm-s-grid-content");
                $bottomRefreshbar = $("#" + _config.id + " .rxm-s-grid-bottomRefreshbar");
                $gridWrap.on(RxmGridMsg.msgEnum.ormRereshGridView, $.proxy(this._onRefreshView, this));
                //加载表格  标题栏、工具栏、搜索栏、表格数据、顶部刷新栏、底部刷新栏
                this.renderTitleBar();
                this.renderToolbar();
                this.renderSearchBar();
                this._renderTable();
                if (!this._isHtmlAttrCfg()) {
                    this.renderTopRefreshbar();
                    this.renderBottomRefreshbar();
                }
            };
            /**
            * 计算表格table-body高度
            * @returns {Number} tBodyHeight - 表格table-body高度值
            */
            /**
             * 设置页面底部补偿
             * @returns {Number} value - 底部补偿值
             */
            RxmGridImpl.prototype.attrFooterOffset = function (value) {
                if (typeof value != "undefined") {
                    _footerOffset = value;
                    $gridWrap.attr("footeroffset", _footerOffset);
                }
                else {
                    if ($('body').find(".rxm-footerOffset").length > 0) {
                        _footerOffset = $('body').find(".rxm-footer").outerHeight();
                    }
                }
                return _footerOffset;
            };
            /**
             * 移动端 渲染表格
             */
            RxmGridImpl.prototype._renderTable = function () {
                var the = this;
                var _tBodyHeight;
                var $table = $gridWrap.find(".rxm-s-grid-table table tbody").empty();
                if (!this._isHtmlAttrCfg()) {
                    $table = $gridWrap.find(".rxm-s-grid-table").empty();
                }
                //清除id为mCSB_1 div的tabindex属性 消除行点击事件表格出现黄色的边线
                $gridWrap.find("#mCSB_1").removeAttr("tabindex");
                //计算总页数
                _pageInfo.pageCount = Math.ceil(_pageInfo.dataCount / _config.pageSize);
                //数据表格高度样式以及滚动条设置 modify by xiangcq 20180109 设置table-body高度
                //  if (!!_config.title || $titlebar.css("display")!='none') {   
                //      _config.height = _config.height - 50;
                //  }
                //  if (!!_config.toolbar && $toolbar.css("display")!='none') {
                //      _config.height = _config.height - 50;
                //  }
                //  if (!!_config.searchbar || $searchbar.css("display")!='none') {
                //      _config.height = _config.height - $searchbar.outerHeight();
                //  }
                if (!this._isHtmlAttrCfg()) {
                    //表格table-body设置高度  此高度小于等于包裹器高度
                    // var style = 'style="overflow-x:hidden;overflow-y:auto;' + (_tBodyHeight && "height:" + _tBodyHeight +"px") + '"';
                    var $tableBodyOne = $('<div class="rxm-table-body"><table class="table table_hover"><tbody></tbody></table></div>');
                    $table.append($tableBodyOne);
                    _tBodyHeight = _calTableBodyHeight();
                    $gridWrap.find(".rxm-table-body").css("height", _tBodyHeight);
                    $gridWrap.find(".rxm-table-body").css("overflow-x", "hidden");
                    $gridWrap.find(".rxm-table-body").css("overflow-y", "auto");
                }
                else {
                    _tBodyHeight = _calTableBodyHeight();
                    //表格table-body设置高度  此高度小于等于包裹器高度
                    $gridWrap.find(".rxm-table-body").css("height", _tBodyHeight);
                    $gridWrap.find(".rxm-table-body").css("overflow-x", "hidden");
                    $gridWrap.find(".rxm-table-body").css("overflow-y", "auto");
                }
                $tableBody = $gridWrap.find(".rxm-table-body");
                $tBody = $gridWrap.find("tbody");
                //上滑手势事件绑定
                $tableBody.swipeUpMove($.proxy(this._onSwipeUpMove, this));
                //下滑手势事件绑定
                $tableBody.swipeDownMove($.proxy(this._onSwipeDownMove, this));
                //上滑结束手势事件绑定
                $tableBody.swipeUpEnd($.proxy(this._onSwipeUpEnd, this));
                //下滑结束手势事件绑定
                $tableBody.swipeDownEnd($.proxy(this._onSwipeDownEnd, this));
                //点击事件绑定
                $tableBody.tap("tr", $.proxy(this._onTapLine, this));
                //长按事件绑定
                $tableBody.press("tr", $.proxy(this._onPressLine, this));
                //上拉到底即激发事件   隐藏底部loading信息
                this.callbackLoadSucsess({
                    fn: function (e, data) {
                        if (data.loadParam.type == "bottom") {
                            if (data.status == "sucsess") {
                                setTimeout(function () {
                                    $bottomRefreshbar.css("display", "none");
                                }, 800);
                            }
                            else {
                                setTimeout(function () {
                                    $bottomRefreshbar.empty();
                                    var $tip = $('<span>' + _config.refreshTip.bottomTipError + '</span>');
                                    $bottomRefreshbar.append($tip);
                                    setTimeout(function () {
                                        $bottomRefreshbar.css("display", "none");
                                        //重置数据加载中提示信息
                                        $bottomRefreshbar.empty();
                                        //                          var $loading = $('<span class="rxm-grid-loading"/>&nbsp;&nbsp;&nbsp;<span>' + _config.refreshTip.bottomTipLoading + '</span>');
                                        //                          $bottomRefreshbar.append($loading);
                                        the.renderBottomRefreshbar();
                                    }, 500);
                                }, 2000);
                            }
                        }
                    }
                }, this);
                var clkFun;
                var preFun;
                for (var i = 0; i < _config.rowevent.length; i++) {
                    if (!!_config.rowevent[i].click) {
                        clkFun = _config.rowevent[i].click;
                    }
                    if (!!_config.rowevent[i].press) {
                        preFun = _config.rowevent[i].press;
                    }
                }
                //绑定数据列表配置的所有事件
                if (!!clkFun) {
                    this.bindTapLineElement({ fn: clkFun }, this);
                }
                if (!!preFun) {
                    this.bindPressLineElement({ fn: preFun }, this);
                }
            };
            /**
             * 桌面端 渲染表格
             *
             */
            RxmGridImpl.prototype._plusViewBegin = function () {
                var cf = _config;
                var scrollHight = $tableBody[0].scrollHeight;
                var scrollTop = $tableBody.scrollTop();
                //$tableBody高度
                var tableHight = $tableBody.height();
                var b = scrollHight - scrollTop - tableHight < 200;
                // console.info("_downViewBegin" + $tableBody.scrollTop());
                //if (b) { console.info("_plusViewBegin++" + cf.param.viewBegin); };
                if (b && (cf.param.viewBegin + cf.param.viweMaxLen) * cf.pageSize < cf.param.data.length) {
                    cf.param.viewBegin++;
                    //console.info("_plusViewBegin++" + cf.param.viewBegin);
                    this.refresh();
                    return true;
                }
                return false;
            };
            RxmGridImpl.prototype._minViewBegin = function () {
                var cf = _config;
                var b = $tableBody.scrollTop() < 200;
                if (b && cf.param.viewBegin > 0) {
                    cf.param.viewBegin--;
                    //console.info("_minViewBegin--" + cf.param.viewBegin);
                    this.refresh();
                    return true;
                }
                return false;
            };
            /**
             * 上滑手势监听函数(上拉分页)
             * @param {event} evt - jquery event对象
             * @param {Object} data - 滑动位置数据对象
             */
            RxmGridImpl.prototype._onSwipeUpMove = function (evt, data) {
                //当前移动中tartY值
                var startYMove = data.position.delta[0].startY;
                this.touchRowInfo(evt);
                // if(this._plusViewBegin())return;
                //判定是否到底 如果处于长按状态不可上拉下拉
                if (this._isOnBottom() && _pressFlag == false) {
                    if (_startYMove == 0) {
                        $gridWrap.trigger(RxmGridMsg.msgEnum.swipeInBottom, 0);
                        $gridWrap.trigger(RxmGridMsg.msgEnum.swipeInBottomBegin);
                        //从到底位置作为起始记录startY值
                        _startYMove = startYMove;
                    }
                    else {
                        //滑动距离  滑动中startY与到底位置起始记录startY值做差
                        var swipeDIF = startYMove - _startYMove;
                        //判断到底后只激发一次
                        //$gridWrap.trigger(RxmGridMsg.msgEnum.swipeInBottom,swipeDIF);
                    }
                }
            };
            ;
            /**
             * 下滑手势监听函数(下拉刷新)
             * @param {event} evt - jquery event对象
             * @param {Boolean} data - 滑动位置数据对象
             */
            RxmGridImpl.prototype._onSwipeDownMove = function (evt, data) {
                //当前移动中tartY值
                this.touchRowInfo(evt);
                if (this._minViewBegin())
                    return;
                var startYMove = data.position.delta[0].startY;
                //判断是否到顶 如果处于长按状态不可上拉下拉
                if (this._isOnTop() && _pressFlag == false) {
                    if (_startYMove == 0) {
                        $gridWrap.trigger(RxmGridMsg.msgEnum.swipeInTop, 0);
                        $gridWrap.trigger(RxmGridMsg.msgEnum.swipeInTopBegin);
                        _startYMove = startYMove;
                    }
                    else {
                        var swipeDIF = startYMove - _startYMove;
                        //判断到顶后持续激发 阻尼下拉效果      
                        $gridWrap.trigger(RxmGridMsg.msgEnum.swipeInTop, swipeDIF);
                    }
                }
            };
            /**
             * 上滑手势结束监听函数(上拉分页)
             */
            RxmGridImpl.prototype._onSwipeUpEnd = function () {
                //滚动距离总长(注意不是滚动条的长度)
                var scrollHight = $tableBody[0].scrollHeight;
                //滚动到的当前位置
                var scrollTop = $tableBody.scrollTop();
                //$tableBody高度
                var tableHight = $tableBody.height();
                //判断是否到底，上拉分页
                if (scrollTop + tableHight >= scrollHight) {
                    $gridWrap.trigger(RxmGridMsg.msgEnum.swipeInBottomEnd);
                }
            };
            /**
             * 下滑手势结束监听函数(下拉刷新)
             */
            RxmGridImpl.prototype._onSwipeDownEnd = function () {
                //判断是否到顶，如果处于长按状态不可上拉下拉
                if (this._isOnTop() && _pressFlag == false) {
                    $gridWrap.trigger(RxmGridMsg.msgEnum.swipeInTopEnd);
                }
            };
            ;
            /**
             * 向表格中追加一行数据
             * @param {Object} row - 行数据
             * @param {Number} rowIndex - 行索引
             * @param {Number} baseIndex - true克隆数据，undefined，false 返回 view 数据此为默认
             * @returns {Object} $tr - 行对象
             */
            RxmGridImpl.prototype._createRow = function (row, rowIndex, baseIndex) {
                //渲染表格行前触发
                if (typeof (_config.onBeforeRenderRow) == "function") {
                    //可对行数据进行处理
                    row = _config.onBeforeRenderRow.apply(this, [row]) || row;
                }
                //配置tr rowevent
                var $tr = $("<tr></tr>");
                if (!!_config.rowevent && _config.rowevent.length > 0) {
                    for (var i = 0, length = _config.rowevent.length; i < 1; i++) {
                        var item = _config.rowevent[i];
                        $tr = $("<tr class='" + item.field + "'></tr>");
                    }
                }
                if (isDesktop(_config.id)) {
                    $tr = this.createRowInPc(row, $tr, rowIndex, baseIndex);
                }
                else {
                    if (!!_config.slidemenu && _config.slidemenu.length > 0) {
                        $tr = this.createSlideRow(row, $tr);
                    }
                    else {
                        $tr = this.createRow(row, $tr);
                    }
                }
                return $tr;
            };
            /**
             * 创建左滑菜单行
             * @param {Object} row - 行数据
             * @param {Object} $tr - 表格行对象
             * @returns {Object} $tr - 表格行对象 jquery对象
             */
            RxmGridImpl.prototype.createSlideRow = function (row, $tr) {
                //创建表格行数据   共4列  icon 数据内容 (标题+内容)   复选框(默认隐藏)  
                var the = this;
                var $td = $('<td width="100%" style="padding:0px"></td>');
                var $wrapperDiv = $('<div class="rxm-slide-wrapper clearfix"></div>');
                var $scrollDiv = $('<div class="rxm-slide-scroll-wrapper clearfix"></div>');
                var $iconDiv = $('<div class="rxm-icon-div clearfix"></div>');
                var $dataDiv = $('<div class="rxm-data-div clearfix"></div>');
                var $slideBtnDiv = $('<div class="rxm-slide-btn-div clearfix"></div>');
                var $checkboxDiv = $('<div class="rxm-td-checkbox fix" style="display:none;float:left" ></div>');
                //数据字段个数
                var parNum = _config.layout.length;
                var firstField = '1';
                //循环创建icon与数据列
                for (var j = 0, item = void 0; item = _config.layout[j++]; j < item.length) {
                    var tdName = item.name;
                    var tdValue = item.format ? item.format({ "row": row }) : row[item.field];
                    if (item.field == "icon") {
                        _hasIcon = true;
                        parNum = parNum - 1;
                        tdValue = (tdValue || tdValue == 0) ? "" + tdValue : "";
                        $iconDiv.append(tdValue);
                        $scrollDiv.append($iconDiv);
                    }
                    else {
                        tdValue = (tdValue || tdValue == 0) ? "" + tdValue : "";
                        if (firstField === '1') {
                            if (tdName !== "" && tdName !== null) {
                                $dataDiv.append("<span class='rxm-col-name'>" + tdName + '&nbsp;:&nbsp;' + "</span><span class='rxm-col-value'>" + tdValue + "</span>");
                                firstField = '2';
                            }
                            else {
                                $dataDiv.append("<span class='rxm-col-value'>" + tdValue + "</span>");
                                firstField = '2';
                            }
                        }
                        else {
                            if (tdName !== "" && tdName !== null) {
                                //其他字段换行
                                $dataDiv.append("</br><span class='rxm-col-name'>" + tdName + '&nbsp;:&nbsp;' + "</span><span class='rxm-col-value'>" + tdValue + "</span>");
                            }
                            else {
                                //其他字段换行
                                $dataDiv.append("</br><span class='rxm-col-value'>" + tdValue + "</span>");
                            }
                        }
                    }
                    $scrollDiv.append($dataDiv);
                }
                //创建checkbox列   multi属性配置为true：多选框      false：单选按钮
                if (typeof _config.multi != "undefined") {
                    $checkboxDiv.append('<input class="rxm-multi-check" type="' + (_config.multi ? 'checkbox' : 'radio') + '" name="s_gird_multi_' + (_config.id) + '" ' + (row["_checked"] ? "checked" : "") + '>');
                    $scrollDiv.append($checkboxDiv);
                }
                $scrollDiv.append($slideBtnDiv);
                $wrapperDiv.append($scrollDiv);
                $td.append($wrapperDiv);
                $tr.append($td);
                //设置tr中各个部分的div高度值、宽度值
                this._attrSlideRowStyle($slideBtnDiv, $dataDiv, $scrollDiv, $iconDiv, parNum);
                //数据行绑定touchStart触屏开始事件
                this._bindTrSlideEvent($scrollDiv);
                return $tr;
            };
            /**
             * 设置左滑行内div高度与宽度
             * @param {Number} parNum - 单个字段高度值
             */
            RxmGridImpl.prototype._attrSlideRowStyle = function ($slideBtnDiv, $dataDiv, $scrollDiv, $iconDiv, parNum) {
                //数据div高度
                var dataDivHeight = parNum * _config.trRowParam.parHeight;
                //滑动菜单div设置高度
                //$slideBtnDiv.height(dataDivHeight + _config.trRowParam.dataMargin);
                //滑动按钮区域div高度值
                var slideBtnDivHeight = dataDivHeight + _config.trRowParam.dataMargin / 2;
                //ios处理菜单div高度少4px的问题
                if (appTool.isIOS()) {
                    slideBtnDivHeight = dataDivHeight + _config.trRowParam.dataMargin / 2 + 4;
                }
                $slideBtnDiv.height(slideBtnDivHeight);
                if (_hasIcon) {
                    _iconMargin = dataDivHeight / 2 + _config.trRowParam.dataMargin / 2 - 20;
                    $iconDiv.css("margin-top", _iconMargin);
                }
                //tr宽度
                var screenWidth = $(window).width() - _config.trRowParam.trMargin;
                //数据显示div宽度 tr宽度 减去 icon宽度
                var dataWidth = screenWidth;
                //判断是否具有icon列,若有即减去icon列宽度
                if (_hasIcon) {
                    dataWidth = screenWidth - _config.trRowParam.iconWidth;
                }
                //数据显示div设置宽度
                $dataDiv.width(dataWidth);
                //获取左滑按钮的数量，计算左滑按钮区域面积
                var itemWidth = 0;
                for (var i = 0, length = _config.slidemenu.length; i < length; i++) {
                    var item = _config.slidemenu[i];
                    var $btnWrap = $('<div class="rxm-slide-btn"></div>');
                    //滑动菜单绑定事件
                    $btnWrap.tap(this, item.callback);
                    var $btn = $('<div></div>');
                    //滑动菜单内容垂直居中设置
                    $btn.css("line-height", slideBtnDivHeight + "px");
                    //按钮图标
                    if (!!item.icon) {
                        var $btnIcon = $("<i></i>");
                        $btnIcon.attr("class", item.icon);
                        $btn.append($btnIcon);
                    }
                    //按钮名称
                    if (!!item.name) {
                        $btn.append(item.name);
                    }
                    //按钮文字大小
                    if (!!item.fontSize) {
                        $btn.css("font-size", item.fontSize);
                    }
                    //按钮文字颜色
                    if (!!item.fontSize) {
                        $btn.css("color", item.fontColor);
                    }
                    //按钮背景色
                    if (!!item.color) {
                        $btn.css("background-color", item.color);
                    }
                    //按钮样式表
                    $btn.addClass(item.class);
                    //按钮宽度
                    if (!!item.width) {
                        $btn.width(item.width);
                    }
                    $btnWrap.append($btn);
                    $slideBtnDiv.append($btnWrap);
                    itemWidth += item.width ? parseInt(item.width) : _config.leftSlideParam.btnWidth;
                    //console.info(btnAreaWidth);
                }
                //滑动菜单区域div宽度 每个按钮宽度之和
                btnAreaWidth = itemWidth;
                //滑动按钮div设置宽度  默认宽度每个60  可配置
                $slideBtnDiv.width(btnAreaWidth);
                //具有滚动条div宽度 tr宽度 加上 隐藏按钮宽度
                var scrollWidth = screenWidth + btnAreaWidth;
                //滚动条div设置宽度  
                $scrollDiv.width(scrollWidth);
                scrollDivWidth = scrollWidth;
                dataDivWidth = dataWidth;
            };
            /**
             * 绑定表格行左滑事件
             * @param {Object} $slideTr - 表格行对象
             */
            RxmGridImpl.prototype._bindTrSlideEvent = function ($slideTr) {
                var the = this;
                //数据行绑定touchStart触屏开始事件
                $slideTr.touchStart(function (e, data) {
                    if (!_pressFlag) {
                        // 记录当前触屏的行对象 
                        slideCurSwipeTr = this;
                        // 当前滑动数据行设定过渡效果设置  1、过渡效果的 CSS 属性的名称   2、完成过渡效果需要多少秒或毫秒  3、速度效果的速度曲线（过渡效果）
                        the._setTransition($(slideCurSwipeTr));
                        // 点击除当前左滑对象之外的任意其他位置
                        if (slideLastSwipeTr && slideCurSwipeTr != slideLastSwipeTr) {
                            $(slideCurSwipeTr).removeData("position");
                            $(slideLastSwipeTr).removeData("position");
                            // 上一个左滑对象设定过渡效果设置  1、过渡效果的 CSS 属性的名称   2、完成过渡效果需要多少秒或毫秒  3、速度效果的速度曲线（过渡效果）
                            the._setTransition($(slideLastSwipeTr));
                            // 隐藏上一个左滑对象按钮
                            the._resetStatus($(slideLastSwipeTr));
                            // 清空上一个左滑的对象
                            slideLastSwipeTr = null;
                        }
                    }
                });
                //数据行绑定touchMove触屏移动事件
                $slideTr.touchMove(function (e, data) {
                    if (!_pressFlag) {
                        //滑动距离  当前滑动横向坐标减去起始横向坐标
                        var moveDis = data.position.delta[0].moved;
                        //滑动方向
                        var curSwipe = data.curSwipe;
                        //console.info('moveDis==='+moveDis);
                        //左滑，距离在75之内，按钮区域随着左滑距离逐渐显示，大于75后按钮区域不变
                        console.info('btnAreaWidth===' + btnAreaWidth);
                        if (moveDis <= btnAreaWidth && curSwipe == "Left" && $(slideCurSwipeTr).data("position") != "view") {
                            $(slideCurSwipeTr).css('-webkit-transform', 'translate3d(' + -moveDis + 'px, 0px, 0px)');
                        }
                        //左滑完全显示按钮区域，标识词条数据位置为显示
                        if (moveDis > btnAreaWidth && curSwipe == "Left") {
                            $(slideCurSwipeTr).data("position", "view");
                            console.info('position===' + slideCurSwipeTr);
                        }
                        //右滑，按钮区域直接隐藏
                        if (curSwipe == "Right") {
                            the._resetStatus($(slideCurSwipeTr));
                        }
                    }
                });
                //数据行绑定touchEnd触屏结束事件
                $slideTr.touchEnd(function (e, data) {
                    if (!_pressFlag) {
                        // 点击除当前左滑对象之外的任意其他位置
                        if (slideLastSwipeTr && slideCurSwipeTr != slideLastSwipeTr) {
                            // 右滑隐藏按钮
                            the._resetStatus($(slideLastSwipeTr));
                            // 清空上一个左滑的对象
                            slideLastSwipeTr = null;
                        }
                        //滑动方向
                        var curSwipe = data.curSwipe;
                        if (curSwipe != "") {
                            //移动距离  结束时横向坐标减去起始横向坐标
                            var moveDis = data.position.delta[0].moved;
                            console.info('moveDis===' + moveDis);
                            //当滑动结束时，左滑距离大于设置距离数值，显示按钮区域
                            if (moveDis > _config.leftSlideParam.viewWidth && curSwipe == "Left") {
                                //显示按钮区域
                                $(slideCurSwipeTr).css('-webkit-transform', 'translate3d(' + (-1 * btnAreaWidth) + 'px, 0px, 0px)');
                                $(slideCurSwipeTr).data("position", "view");
                                slideLastSwipeTr && slideLastSwipeTr != slideCurSwipeTr &&
                                    $(slideLastSwipeTr).css('-webkit-transform', 'translate3d(0px, 0px, 0px)'); // 已经左滑状态的按钮右滑
                                slideLastSwipeTr = slideCurSwipeTr; // 记录上一个左滑的对象
                            }
                            else if (moveDis < _config.leftSlideParam.viewWidth && curSwipe == "Left") {
                                the._resetStatus($(slideCurSwipeTr));
                                if (slideCurSwipeTr == slideLastSwipeTr) {
                                    // 右滑
                                    the._resetStatus($(slideCurSwipeTr));
                                    // 清空上一个左滑的对象
                                    slideLastSwipeTr = null;
                                }
                            }
                        }
                    }
                });
            };
            /**
             * 渲染表格行数据(可重写)
             * @param {Object} row - 行数据
             * @param {Object} $tr - 表格行对象
             * @returns {Object} $tr - 表格行对象 jquery对象
             */
            RxmGridImpl.prototype.createRow = function (row, $tr) {
                //模板数据
                var _rowData = {
                    gridId: _config.id,
                    layout: _config.layout,
                    rowData: row,
                    multi: _config.multi
                };
                //判断heml是否存在createRow模板 不存在使用默认
                if ($("#template-" + _config.id).length !== 0) {
                    $tr.append(artTemplate("template-" + _config.id, _rowData));
                }
                else {
                    //art模板compile加载默认html模板
                    var renderRow = artTemplate.compile(rowTmpl);
                    $tr = renderRow(_rowData);
                }
                return $tr;
            };
            /**
             * 渲染表格标题栏(可重写)
             */
            RxmGridImpl.prototype.renderTitleBar = function () {
                if (_config.title) {
                    $titlebar.css("display", "");
                    $titlebar.empty().append(_config.title);
                }
            };
            /**
             * 渲染表格搜索栏(可重写)
             */
            RxmGridImpl.prototype.renderSearchBar = function () {
                if (!!_config.searchbar) {
                    $searchbar.css("display", "");
                }
            };
            /**
             * 移动端 渲染表格工具栏(可重写) 以config配置对象中的配置为主
             */
            RxmGridImpl.prototype.renderToolbar = function () {
                //html页面中已经定义工具栏，并且将默认按钮绑定默认事件
                var liBtn = $toolbar.find("ul li");
                for (var i = 0; i < liBtn.length; i++) {
                    if ($(liBtn[i]).is(".rxm-default-delete")) {
                        $(liBtn[i]).tap($.proxy(this.bindDeleteBtn, this));
                    }
                    if ($(liBtn[i]).is(".rxm-default-all-select")) {
                        $(liBtn[i]).tap($.proxy(this.bindSelectAllBtn, this));
                    }
                    if ($(liBtn[i]).is(".rxm-default-cancel")) {
                        $(liBtn[i]).tap($.proxy(this.bindCancelBtn, this));
                    }
                }
                if (!!_config.toolbar && _config.toolbar.length > 0) {
                    var $ul = $("<ul style='width:330px;'></ul>");
                    for (var i = 0, length = _config.toolbar.length; i < length; i++) {
                        var item = _config.toolbar[i];
                        var $li = $('<li></li>');
                        $li.tap(this, item.callback);
                        $li.attr("style", item.style);
                        var $a = $('<a></a>');
                        var $i = $('<i></i>');
                        $i.attr("class", item.icon);
                        $i.appendTo($a);
                        $a.append(item.name);
                        $a.appendTo($li);
                        $li.appendTo($ul);
                    }
                    $toolbar.empty().append($ul);
                }
            };
            ;
            /**
             * 渲染表格顶部刷新栏(可重写)
             */
            RxmGridImpl.prototype.renderTopRefreshbar = function () {
                var $loading = $('<img class = "rxm-top-loading-arrow" src="' + _downArrowImg + '"/>&nbsp;&nbsp;&nbsp;<span>' + _config.refreshTip.topTipBegin + '</span>');
                $topRefreshbar.append($loading);
            };
            ;
            /**
             * 渲染表格底部刷新栏(可重写)
             */
            RxmGridImpl.prototype.renderBottomRefreshbar = function () {
                var $loading = $('<span class="rxm-grid-loading"/>&nbsp;&nbsp;&nbsp;<span>' + _config.refreshTip.bottomTipLoading + '</span>');
                $bottomRefreshbar.append($loading);
            };
            ;
            /**
             * 触发长按状态函数
             */
            RxmGridImpl.prototype.initPress = function () {
                _pressFlag = true;
                if (!!_config.slidemenu) {
                    $gridWrap.find(".rxm-data-div").css("width", dataDivWidth - 30);
                    $gridWrap.find(".rxm-slide-scroll-wrapper").css("width", scrollDivWidth + 40);
                    $gridWrap.find(".rxm-td-checkbox").css("margin-top", _iconMargin);
                    if (!!_config.toolbar || $gridWrap.find(".rxm-s-grid-toolbar").length > 0) {
                        //显示toolbar
                        $gridWrap.find(".rxm-s-grid-toolbar").css("display", "block");
                        //_config.heigh = _config.height - 50;
                        //调用resize 重置tableBody高度 
                        _resize.call(this, "minus", $gridWrap.find(".rxm-s-grid-toolbar").outerHeight());
                        //$tableBody.css("height", _config.heigh + "px");
                    }
                    //显示行数据右侧复选框
                    $gridWrap.find(".rxm-td-checkbox").css("display", "");
                }
                else {
                    //隐藏行数据右侧箭头
                    $gridWrap.find(".rxm-td-arrow").css("display", "none");
                    if (!!_config.toolbar || $gridWrap.find(".rxm-s-grid-toolbar").length > 0) {
                        //显示toolbar
                        $gridWrap.find(".rxm-s-grid-toolbar").css("display", "block");
                        //  _config.heigh = _config.height - 50;
                        //  $tableBody.css("height", _config.heigh + "px");
                        //if(!$gridWrap.find(".rxm-s-grid-toolbar").hasClass("rxm-floated")){
                        // _resize("minus",$gridWrap.find(".rxm-s-grid-toolbar").outerHeight())
                        //}
                    }
                    //显示行数据右侧复选框
                    $gridWrap.find(".rxm-td-checkbox").css("display", "");
                }
            };
            /**
             * 取消长按状态
             */
            RxmGridImpl.prototype.cancelPress = function () {
                $gridWrap.find(".rxm-multi-check").prop("checked", false);
                _pressFlag = false;
                _allChecked = true;
                //提示全选
                $toolbar.find("ul .rxm-default-all-select a").html("全选");
                //隐藏行数据右侧复选框
                $gridWrap.find(".rxm-td-checkbox").css("display", "none");
                if (!!_config.slidemenu) {
                    $gridWrap.find(".rxm-data-div").css("width", dataDivWidth);
                    $gridWrap.find(".rxm-slide-scroll-wrapper").css("width", scrollDivWidth);
                }
                //显示行数据右侧箭头
                $gridWrap.find(".rxm-td-arrow").css("display", "");
                if (!!_config.toolbar || $gridWrap.find(".rxm-s-grid-searchbar").length > 0) {
                    //隐藏toolbar
                    $gridWrap.find(".rxm-s-grid-toolbar").css("display", "none");
                    //  _config.heigh = _config.height + 50;
                    //  $tableBody.css("height", _config.height + "px");
                    //_resize("add",$gridWrap.find(".rxm-s-grid-toolbar").outerHeight())
                }
            };
            /**
             * 全选/取消全选函数
             */
            RxmGridImpl.prototype.allSelect = function () {
                //获取表格中所有checkbox  jquery对象
                var $checkTr = $gridWrap.find("input[name='s_gird_multi_" + _config.id + "']");
                if (_allChecked) {
                    $checkTr.prop("checked", true);
                    _allChecked = false;
                    //提示全不选
                    $toolbar.find("ul .rxm-default-all-select a").html("全不选");
                }
                else {
                    $checkTr.prop("checked", false);
                    _allChecked = true;
                    //提示全选
                    $toolbar.find("ul .rxm-default-all-select a").html("全选");
                }
            };
            /**
             * 设置长按状态
             * @param {Boolean} value - 状态值参数
             * @returns {Boolean}  - 长按状态
             */
            RxmGridImpl.prototype.attriPressFlag = function (value) {
                if (!!value) {
                    _pressFlag = value;
                }
                return _pressFlag;
            };
            /**
             * 设置top状态
             * @param {Boolean} value - 状态值参数
             * @returns {Boolean}  - top状态
             */
            RxmGridImpl.prototype.attriTopFlag = function (value) {
                if (typeof value != "undefined") {
                    var tmp = _config._bTop;
                    _config._bTop = value;
                    if (tmp != value && value) {
                        $gridWrap.trigger(RxmGridMsg.msgEnum.swipeInTop);
                        $gridWrap.trigger(RxmGridMsg.msgEnum.swipeInTopBegin);
                    }
                }
                return _config._bTop;
            };
            /**
             * 设置bottom状态
             * @param {Boolean} value - 状态值参数
             * @returns {Boolean} - bottom状态
             */
            RxmGridImpl.prototype.attriBottomFlag = function (value) {
                if (typeof value != "undefined") {
                    var tmp = _config._bottom;
                    _config._bottom = value;
                    if (tmp != value && value) {
                        if (_startYMove == 0) {
                            $gridWrap.trigger(RxmGridMsg.msgEnum.swipeInBottom);
                            $gridWrap.trigger(RxmGridMsg.msgEnum.swipeInBottomBegin);
                        }
                    }
                }
                return _config._bottom;
            };
            /**
             * 表格绑定滑动至顶部事件
             * @param {Object} arg - 参数对象
             * @param {Object} scope - this对象
             */
            RxmGridImpl.prototype.bindSwipeInTop = function (arg, scope) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {
                        fn: this._onSwipeInTop,
                    };
                    scope = this;
                }
                var the = this;
                if ($.isExist(scope)) {
                    the = scope;
                }
                arg.fn = arg.fn || arg.callback;
                $gridWrap.on(RxmGridMsg.msgEnum.swipeInTop, arg.data, $.proxy(arg.fn, the), arg.one);
            };
            /**
             * 表格绑定滑动至底部事件
             * @param {Object} arg - 参数对象
             * @param {Object} scope - this对象
             */
            RxmGridImpl.prototype.bindSwipeInBottom = function (arg, scope) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {
                        fn: this._onSwipeInBottom,
                    };
                    scope = this;
                }
                var the = this;
                if ($.isExist(scope)) {
                    the = scope;
                }
                arg.fn = arg.fn || arg.callback;
                $gridWrap.on(RxmGridMsg.msgEnum.swipeInBottom, arg.data, $.proxy(arg.fn, the), arg.one);
            };
            ;
            /**
             * 表格绑定滑动至底部后事件
             * @param {Object} arg - 参数对象
             * @param {Object} scope - this对象
             */
            RxmGridImpl.prototype.bindSwipeInBottomAfter = function (arg, scope) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {
                        fn: this._onSwipeInBottomAfter,
                    };
                    scope = this;
                }
                var the = this;
                if ($.isExist(scope)) {
                    the = scope;
                }
                arg.fn = arg.fn || arg.callback;
                $gridWrap.on(RxmGridMsg.msgEnum.swipeInBottomAfter, arg.data, $.proxy(arg.fn, the), arg.one);
            };
            ;
            /**
             * 表格绑定滑动至顶部结束后事件
             * @param {Object} arg - 参数对象
             * @param {Object} scope - this对象
             */
            RxmGridImpl.prototype.bindSwipeInTopEndAfter = function (arg, scope) {
                var args = {};
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    args = {
                        callback: this._onSwipeInTopEndAfter,
                    };
                    scope = this;
                }
                var the = this;
                if (scope) {
                    the = scope;
                }
                var cb = arg.fn || arg.callback || (function (a) { });
                if (!arg.one) {
                    $gridWrap.on(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                else {
                    $gridWrap.one(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                ;
            };
            ;
            /**
             * 表格绑定滑动至顶部开始事件
             * @param {Object} arg - 参数对象
             * @param {Object} scope - this对象
             */
            RxmGridImpl.prototype.bindSwipeInTopBegin = function (arg, scope) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {
                        fn: this._onSwipeInTopBegin,
                    };
                    scope = this;
                }
                var the = this;
                if (scope) {
                    the = scope;
                }
                var cb = arg.fn || arg.callback || function () { };
                if (!arg.one) {
                    $gridWrap.on(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                else {
                    $gridWrap.one(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                ;
            };
            ;
            /**
             * 表格绑定滑动至底部开始事件
             * @param {Object} arg - 参数对象
             * @param {Object} scope - this对象
             */
            RxmGridImpl.prototype.bindSwipeInBottomBegin = function (arg, scope) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {
                        callback: this._onSwipeInBottomBegin,
                    };
                    scope = this;
                }
                var the = this;
                if (scope) {
                    the = scope;
                }
                var cb = arg.fn || arg.callback || function () { };
                if (!arg.one) {
                    $gridWrap.on(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                else {
                    $gridWrap.one(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                ;
            };
            ;
            /**
             * 表格绑定滑动至顶部结束事件
             * @param {Object} arg - 参数对象
             * @param {Object} scope - this对象
             */
            RxmGridImpl.prototype.bindSwipeInTopEnd = function (arg, scope) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {
                        callback: this._onSwipeInTopEnd,
                    };
                    scope = this;
                }
                var the = this;
                if (scope) {
                    the = scope;
                }
                var cb = arg.fn || arg.callback || function (e, data) { };
                if (!arg.one) {
                    $gridWrap.on(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                else {
                    $gridWrap.one(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                ;
            };
            ;
            /**
             * 表格绑定滑动至底部结束事件
             * @param {Object} arg - 参数对象
             * @param {Object} scope - this对象
             */
            RxmGridImpl.prototype.bindSwipeInBottomEnd = function (arg, scope) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {
                        callback: this._onSwipeInBottomEnd,
                    };
                    scope = this;
                }
                var the = this;
                if (scope) {
                    the = scope;
                }
                var cb = arg.fn || arg.callback || function () { };
                if (!arg.one) {
                    $gridWrap.on(RxmGridMsg.msgEnum.swipeInBottomEnd, arg.data, $.proxy(cb, the));
                }
                else {
                    $gridWrap.one(RxmGridMsg.msgEnum.swipeInBottomEnd, arg.data, $.proxy(cb, the));
                }
                ;
            };
            ;
            /**
             * 表格行绑定tap事件
             * @param {Object} arg - 参数对象
             * @param {Object} scope - this对象
             */
            RxmGridImpl.prototype.bindTapLineElement = function (arg, scope) {
                (!!arg.callback) && (arg.fn = arg.callback);
                if (!arg.selector) {
                    arg.selector = "tr:not(.rxm-nodata-tip-tr)";
                }
                else if (arg.selector.indexOf("tr") !== 0) {
                    arg.selector = "tr:not(.rxm-nodata-tip-tr) " + arg.selector;
                }
                var the = this;
                if (scope) {
                    the = scope;
                }
                var cb = arg.fn || arg.callback || function () { };
                if (!arg.one) {
                    $gridWrap.on(RxmGridMsg.msgEnum.tapLineElement, arg.selector, arg.data, $.proxy(cb, the));
                }
                else {
                    $gridWrap.one(RxmGridMsg.msgEnum.tapLineElement, arg.selector, arg.data, $.proxy(cb, the));
                }
                ;
            };
            ;
            /**
             * 表格行绑定长按事件
             * @param {Object} arg - 参数对象
             * @param {Object} scope - this对象
             */
            RxmGridImpl.prototype.bindPressLineElement = function (arg, scope) {
                (!!arg.callback) && (arg.fn = arg.callback);
                if (!arg.selector) {
                    arg.selector = "tr:not(.rxm-nodata-tip-tr)";
                }
                else if (arg.selector.indexOf("tr") !== 0) {
                    arg.selector = "tr:not(.rxm-nodata-tip-tr) " + arg.selector;
                }
                var the = this;
                if (scope) {
                    the = scope;
                }
                var cb = arg.fn || arg.callback || function () { };
                if (!arg.one) {
                    $gridWrap.on(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                else {
                    $gridWrap.one(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                ;
            };
            ;
            /**
             * 表格绑定删除按钮默认事件 删除选中的数据行
             */
            RxmGridImpl.prototype.bindDeleteBtn = function () {
                var the = this;
                //获取选中行的index数据
                var selIdx = the.getSelectedRow();
                if (!selIdx || selIdx.length < 1) {
                    Util.alert("您好，请选择一条数据");
                    return;
                }
                Util.confirm("您是否要删除选中的数据？", function () {
                    //获取选中行数据
                    var selData = the.getSelectedData();
                    the.deleteRow(selIdx);
                    //获取删除数据请求的ajax地址
                    var delUrl = $gridWrap.find(".rxm-default-delete").attr("rxmurl");
                    var arg = {
                        delUrl: delUrl,
                        delData: selData,
                        loadComplete: function () { }
                    };
                    _doc.ajaxDeleteRow(arg);
                }, function () {
                    return;
                });
            };
            ;
            /**
             * 表格绑定全选按钮默认事件 选中当前页面所有数据
             */
            RxmGridImpl.prototype.bindSelectAllBtn = function () {
                this.allSelect();
            };
            ;
            /**
             * 表格绑定取消按钮默认事件 长按事件取消
             */
            RxmGridImpl.prototype.bindCancelBtn = function () {
                this.cancelPress();
            };
            ;
            /**
             * reload函数 ajax请求成功函数重写
             * @param {Object} args - 参数对象
             */
            // public formatDataAfterAjaxSuccess(args: any) {
            //     _doc.formatDataAfterAjaxSuccess(args);
            // };
            /**
             * reload函数 ajax重写
             * @param {Object} args - 参数对象
             */
            // public formatDataBeforeAjax(args: any) {
            //     _doc.formatDataBeforeAjax(args);
            // };
            /**
             * 数据删除函数 ajax重写
             * @param {Object} args - 参数对象
             */
            RxmGridImpl.prototype.formatDataBeforeDelAjax = function (args) {
                _doc.formatDataBeforeDelAjax(args);
            };
            ;
            /**
             * 表格绑定数据追加事件
             * @param {Object} arg - 参数对象
             * @param {Object} scope - this对象
             */
            RxmGridImpl.prototype.bindDataAppend = function (arg, scope) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {
                        callback: this._onAppend,
                    };
                    scope = this;
                }
                var the = this;
                if (scope) {
                    the = scope;
                }
                var cb = arg.fn || arg.callback || function () { };
                if (!arg.one) {
                    $gridWrap.on(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                else {
                    $gridWrap.one(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                ;
            };
            /**
             * 表格绑定数据插入事件
             * @param {Object} arg - 参数对象
             * @param {Object} scope - this对象
             */
            RxmGridImpl.prototype.callbackDataInsert = function (arg, scope) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {
                        fn: this._onInsert,
                    };
                    scope = this;
                }
                var the = this;
                if (scope) {
                    the = scope;
                }
                var cb = arg.fn || arg.callback || function () { };
                if (!arg.one) {
                    $gridWrap.on(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                else {
                    $gridWrap.one(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                ;
            };
            /**
             * 表格绑定数据删除事件
             * @param {Object} arg - 参数对象
             * @param {Object} scope - this对象
             */
            RxmGridImpl.prototype.callbackDataDelete = function (arg, scope) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {
                        fn: this._onDelete,
                    };
                    scope = this;
                }
                var the = this;
                if (scope) {
                    the = scope;
                }
                var cb = arg.fn || arg.callback || function () { };
                if (!arg.one) {
                    $gridWrap.on(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                else {
                    $gridWrap.one(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                ;
            };
            /**
             * 表格绑定数据更新事件
             * @param {Object} arg - 参数对象
             * @param {Object} scope - this对象
             */
            RxmGridImpl.prototype.callbackDataUpdate = function (arg, scope) {
                if (typeof arg == "boolean" || typeof arg == "undefined") {
                    arg = {
                        fn: this._onUpdate,
                    };
                    scope = this;
                }
                var the = this;
                if (scope) {
                    the = scope;
                }
                var cb = arg.fn || arg.callback || function () { };
                if (!arg.one) {
                    $gridWrap.on(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                else {
                    $gridWrap.one(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                ;
            };
            /**
             * 表格绑定reload成功事件 没有默认触发函数
             * @param {Object} arg - 参数对象
             * @param {Object} scope - this对象
             */
            RxmGridImpl.prototype.callbackLoadSucsess = function (arg, scope) {
                var the = this;
                if (scope) {
                    the = scope;
                }
                var cb = arg.fn || arg.callback || function () { };
                if (!arg.one) {
                    $gridWrap.on(RxmGridMsg.msgEnum.loadSucsess, arg.data, $.proxy(cb, the));
                }
                else {
                    $gridWrap.one(RxmGridMsg.msgEnum.loadSucsess, arg.data, $.proxy(cb, the));
                }
                ;
            };
            ;
            /**
             * 表格绑定reload完成后事件  没有默认触发函数
             * @param {Object} arg - 参数对象
             * @param {Object} scope - this对象
             */
            RxmGridImpl.prototype.bindLoadComplete = function (arg, scope) {
                var the = this;
                if (scope) {
                    the = scope;
                }
                var cb = arg.fn || arg.callback || function () { };
                if (!arg.one) {
                    $gridWrap.on(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                else {
                    $gridWrap.one(RxmGridMsg.msgEnum.swipeInTopEnd, arg.data, $.proxy(cb, the));
                }
                ;
            };
            ;
            RxmGridImpl.prototype._onAppend = function (e, data) {
                this.refresh();
            };
            RxmGridImpl.prototype.attrRefreshTip = function (arg) {
                return _config.refreshTip = $.extend(true, _config.refreshTip, arg);
            };
            /**
             * 属性设置 表格标题
             * 默认为"表格标题"
             */
            RxmGridImpl.prototype.attrGridTitle = function (arg) {
                if (typeof arg != "undefined") {
                    //titlebar 修改标题
                    $gridWrap.find(".rxm-s-grid-titlebar").empty().append(arg);
                }
                else {
                    //初始化获取html中标题栏中的内容 正则去除多余空格
                    arg = $gridWrap.find(".rxm-s-grid-titlebar").text().replace(/\s+/g, "");
                }
                return arg;
            };
            /**
             * 属性设置 表格自适应
             * 默认为"自适应"版本
             */
            RxmGridImpl.prototype.attrGridSelfAdaption = function (arg) {
                var gridType = "rxm-grid-mobile-desktop";
                if (typeof arg != "undefined") {
                    gridType = arg;
                    $gridWrap.removeClass("rxm-grid-mobile-desktop rxm-grid-mobile rxm-grid-desktop");
                    $gridWrap.addClass(arg);
                }
                else {
                    if ($gridWrap.hasClass("rxm-grid-mobile")) {
                        gridType = "rxm-grid-mobile";
                    }
                    else if ($gridWrap.hasClass("rxm-grid-desktop")) {
                        gridType = "rxm-grid-desktop";
                    }
                }
                return gridType;
            };
            /**
             * 属性设置 表格数据url
             * 默认为/resoft/xxx
             */
            RxmGridImpl.prototype.attrRxmUrl = function (arg) {
                if (typeof arg != "undefined") {
                    //rxmurl处理 判断地址首字符是否添加斜杠 
                    if (arg.substring(0, 1) != "/") {
                        arg = "/" + arg;
                    }
                    _config.data = {
                        "type": "URL",
                        "value": "",
                    };
                    _config.data.value = getServer() + arg;
                    //包裹器添加rxmurl属性
                    $gridWrap.attr("rxmurl", arg);
                }
                else {
                    arg = $gridWrap.attr("rxmurl");
                }
                return arg;
            };
            /**
             * 属性设置 表格数据url传入的参数
             * 默认为
             */
            RxmGridImpl.prototype.attrDataParam = function (arg) {
                if (typeof arg != "undefined") {
                    //rxmurl处理 判断地址首字符是否添加斜杠 
                    _config.queryParam = arg;
                    //包裹器添加rxmparam属性
                    $gridWrap.attr("rxmparam", arg);
                }
                else {
                    arg = $gridWrap.attr("rxmparam");
                }
                return arg;
            };
            /**
             * 行数据是否省略多余字符 属性设置
             * true 省略多余字符,其他字符用三个点代替,false 换行显示所有内容,默认省略多余字符
             */
            RxmGridImpl.prototype.attrTextEllipsis = function (arg) {
                if (typeof arg != "undefined") {
                    arg = getRadioValue(arg);
                    _config.textEllipsis = arg;
                }
                else {
                    if ($gridWrap.hasClass("rxm-s-grid-ellipsis")) {
                        _config.textEllipsis = true;
                    }
                    else {
                        _config.textEllipsis = false;
                    }
                }
                _config.textEllipsis == true ? $gridWrap.addClass("rxm-s-grid-ellipsis") : $gridWrap.removeClass("rxm-s-grid-ellipsis");
                return _config.textEllipsis;
            };
            /**
             * 属性设置 是否需要工具栏
             * 默认为 移动桌面端都需要
             */
            RxmGridImpl.prototype.attrToolBarExist = function (arg) {
                var barType = "rxmmdview";
                if (typeof arg != "undefined") {
                    barType = arg;
                    if (arg !== "rxmhidden") {
                        if ($gridWrap.find(".rxm-s-grid-toolbar").length == 0) {
                            var $tbar = $('<div class="rxm-s-grid-toolbar rxm-floated" rxmtype="sublayout" clsnm="rxm-s-grid-toolbar" rxmname="表格工具栏"> <ul class="rxm-cmd-btnbar" rxmtype="container" clsnm="rxm-cmd-btnbar"><li class="rxm-cmd-btn rxm-default-delete" rxmtype="button" clsnm="rxm-cmd-btn" rxmname="删除"><button class="" rxmcmdid="" title="删除"><i class="fa  fa-trash-o"></i><span>删除</span></button></li><li class="rxm-cmd-btn rxm-default-all-select" rxmtype="button" clsnm="rxm-cmd-btn" rxmname="全选"><button class="" rxmcmdid="" title="全选"><i class="fa fa-check"></i><span>全选</span></button></li><li class="rxm-cmd-btn rxm-default-cancel" rxmtype="button" clsnm="rxm-cmd-btn" rxmname="取消"><button class="" rxmcmdid="" title="取消"><i class="fa  fa-close"></i><span>取消</span></button></li></ul></div>');
                            if ($gridWrap.find(".rxm-s-grid-titlebar").length !== 0) {
                                $gridWrap.find(".rxm-s-grid-titlebar").after($tbar);
                            }
                            else {
                                $gridWrap.after($tbar);
                            }
                        }
                        else {
                            $gridWrap.find(".rxm-s-grid-toolbar").removeClass("rxmmdview rxmmview rxmdview");
                        }
                        $gridWrap.find(".rxm-s-grid-toolbar").addClass(arg);
                        $gridWrap.find(".rxm-s-grid-toolbar").attr("ormgrid", _config.id);
                    }
                    else {
                        $gridWrap.find(".rxm-s-grid-toolbar").remove();
                    }
                }
                else {
                    if ($gridWrap.find(".rxm-s-grid-toolbar").length == 0) {
                        barType = "rxmhidden";
                    }
                    else if ($gridWrap.hasClass("rxmmview")) {
                        barType = "rxmmview";
                    }
                    else if ($gridWrap.hasClass("rxmdview")) {
                        barType = "rxmdview";
                    }
                }
                return barType;
            };
            /**
             * 工具栏展现样式 属性设置
             * 悬浮；表格上部
             */
            RxmGridImpl.prototype.attrToolBarType = function (arg) {
                if (typeof arg != "undefined") {
                }
                else {
                    if ($gridWrap.find(".rxm-s-grid-toolbar").hasClass("rxm-floated")) {
                        arg = true;
                    }
                    else {
                        arg = false;
                    }
                }
                arg == true ? $gridWrap.find(".rxm-s-grid-toolbar").addClass("rxm-floated") : $gridWrap.find(".rxm-s-grid-toolbar").removeClass("rxm-floated");
                return arg;
            };
            /**
             * 行数据序号显示 属性设置
             * true 显示,false 不显示
             */
            RxmGridImpl.prototype.attrRowIndex = function (arg) {
                if (typeof arg != "undefined") {
                    arg = getRadioValue(arg);
                    if (arg) {
                        if ($gridWrap.find("th[class~='rxmindex']").length == 0) {
                            var $rxmindex = $('<th align="center" class="rxmindex noDrag" width="35px"></th>');
                            $gridWrap.find(".rxm-column-container").prepend($rxmindex);
                        }
                    }
                    else {
                        $gridWrap.find("th[class~='rxmindex']").remove();
                    }
                }
                else {
                    if ($gridWrap.find("th[class~='rxmindex']").length == 0) {
                        arg = false;
                    }
                    else {
                        arg = true;
                    }
                }
                $gridWrap.attr("rxmindex", arg);
                return arg;
            };
            /**
             * 行数据选中方式 不显示 checkbox或radio 属性设置
             * 桌面端默认为不显示
             */
            RxmGridImpl.prototype.attrRxmmulti = function (arg) {
                var $multi = $gridWrap.find("th[class~='rxmmulti']");
                if (typeof arg != "undefined") {
                    if (arg == "null") {
                        $multi.remove();
                    }
                    else {
                        if ($multi.length == 0) {
                            var $mt = $('<th align="center" class="rxmmulti fix noDrag" width="24px"></th>');
                            $gridWrap.find("th[class~='rxm-grid-column']").first().before($mt);
                            if (arg == "checkbox") {
                                if ($multi.find("input").length == 0) {
                                    var $check = $('<input type="checkbox">');
                                    $multi.append($check);
                                }
                            }
                            else {
                                $multi.empty();
                            }
                        }
                        else {
                            if (arg == "checkbox") {
                                if ($multi.find("input").length == 0) {
                                    var $check = $('<input type="checkbox">');
                                    $multi.append($check);
                                }
                            }
                            else {
                                $multi.empty();
                            }
                        }
                    }
                }
                else {
                    if ($multi.length == 0) {
                        arg = "null";
                    }
                    else {
                        if ($multi.find("input").length == 0) {
                            arg = "radio";
                        }
                        else {
                            arg = "checkbox";
                        }
                    }
                }
                return arg;
            };
            /**
             * 属性设置 最大缓存页数
             * 默认为"30"
             */
            RxmGridImpl.prototype.attrCacheMaxLen = function (arg) {
                if (typeof arg != "undefined") {
                    _config.param.cacheMaxLen = arg;
                    //包裹器添加cachemaxlen属性
                    $gridWrap.attr("rxmcachemaxlen", _config.param.cacheMaxLen);
                }
                return _config.param.cacheMaxLen;
            };
            /**
             * 属性设置 最大显示页数
             * 默认为"10"
             */
            RxmGridImpl.prototype.attrViweMaxLen = function (arg) {
                if (typeof arg != "undefined") {
                    _config.param.viweMaxLen = arg;
                    //包裹器添加viwemaxlen属性
                    $gridWrap.attr("rxmviwemaxlen", _config.param.viweMaxLen);
                }
                return _config.param.viweMaxLen;
            };
            /**
             * 属性设置 表格暂无数据提示语
             * 默认为"暂无数据！"
             */
            RxmGridImpl.prototype.attrNodataTip = function (arg) {
                if (typeof arg != "undefined") {
                    _config.refreshTip.nodataTip = arg;
                    //包裹器添加nodatatip属性
                    $gridWrap.attr("rxmnodatatip", _config.refreshTip.nodataTip);
                }
                return _config.refreshTip.nodataTip;
            };
            /**
             * 属性设置 数据行图标区域宽度
             * 默认为"55px"
             */
            RxmGridImpl.prototype.attrRowIconWidth = function (arg) {
                if (typeof arg != "undefined") {
                    _config.trRowParam.iconWidth = arg;
                    //包裹器添加rowiconwidth属性
                    $gridWrap.attr("rxmrowiconwidth", _config.trRowParam.iconWidth);
                }
                return _config.trRowParam.iconWidth;
            };
            /**
             * 属性设置 数据行数据字段单个高度
             * 默认为"21px"
             */
            RxmGridImpl.prototype.attrRowParHeight = function (arg) {
                if (typeof arg != "undefined") {
                    _config.trRowParam.parHeight = arg;
                    //包裹器添加rowparheight属性
                    $gridWrap.attr("rxmrowparheight", _config.trRowParam.parHeight);
                }
                return _config.trRowParam.parHeight;
            };
            /**
             * 属性设置 数据行数据显示div距离上下边距
             * 默认为"16px"
             */
            RxmGridImpl.prototype.attrRowDataMargin = function (arg) {
                if (typeof arg != "undefined") {
                    _config.trRowParam.dataMargin = arg;
                    //包裹器添加rowdatamargin属性
                    $gridWrap.attr("rxmrowdatamargin", _config.trRowParam.dataMargin);
                }
                return _config.trRowParam.dataMargin;
            };
            /**
             * 属性设置 数据行距离屏幕左右边距
             * 默认为"20px"
             */
            RxmGridImpl.prototype.attrRowTrMargin = function (arg) {
                if (typeof arg != "undefined") {
                    _config.trRowParam.trMargin = arg;
                    //包裹器添加rowtrmargin属性
                    $gridWrap.attr("rxmrowtrmargin", _config.trRowParam.trMargin);
                }
                return _config.trRowParam.trMargin;
            };
            /**
             * 属性设置 左滑菜单每个选项默认宽度
             * 默认为"60px"
             */
            RxmGridImpl.prototype.attrLeftBtnWidth = function (arg) {
                if (typeof arg != "undefined") {
                    _config.leftSlideParam.btnWidth = arg;
                    //包裹器添加leftbtnwidth属性
                    $gridWrap.attr("rxmleftbtnwidth", _config.leftSlideParam.btnWidth);
                }
                return _config.leftSlideParam.btnWidth;
            };
            /**
             * 属性设置 左滑出现菜单区域的最小距离值，小于此值则隐藏
             * 默认为"60px"
             */
            RxmGridImpl.prototype.attrLeftViewWidth = function (arg) {
                if (typeof arg != "undefined") {
                    _config.leftSlideParam.viewWidth = arg;
                    //包裹器添加leftviewwidth属性
                    $gridWrap.attr("rxmleftviewwidth", _config.leftSlideParam.viewWidth);
                }
                return _config.leftSlideParam.viewWidth;
            };
            /**
             * 属性设置 左滑菜单滑动隐藏时间设定
             * 默认为"200ms"
             */
            RxmGridImpl.prototype.attrLeftTrAduration = function (arg) {
                if (typeof arg != "undefined") {
                    _config.leftSlideParam.traDuration = arg;
                    //包裹器添加lefttraduration属性
                    $gridWrap.attr("rxmleftaduration", _config.leftSlideParam.traDuration);
                }
                return _config.leftSlideParam.traDuration;
            };
            RxmGridImpl.prototype._onInsert = function (e, data) {
                this.refresh();
            };
            RxmGridImpl.prototype._onDelete = function (e, data) {
                this.refresh();
            };
            RxmGridImpl.prototype._onUpdate = function (e, data) {
                this.refresh();
            };
            ;
            /**
             * 响应ormRereshGridView消息
             * @param {Object} arg - 参数对象
             */
            RxmGridImpl.prototype._onRefreshView = function (arg) {
                var cf = _config;
                var baseIndex = (_pageInfo.curPage - 1) * parseInt(_config.pageSize);
                var begin = cf.param.viewBegin * cf.pageSize;
                var cacheD = cf.param.data.length;
                var viewD = (cf.param.viweMaxLen + cf.param.viewBegin) * cf.pageSize;
                var end = cacheD < viewD ? cacheD : viewD;
                _viewData = [];
                var i = 0;
                //reload 返回数据即画表格，若无数据则提示"暂无数据！"
                if (end > 0) {
                    for (var j = begin; j < end; j++, i++) {
                        var item = _config.param.data[j];
                        item._rxm_baseIndex = i + 1;
                        item._rxm_baseIndex2 = baseIndex;
                        _viewData.push(item);
                    }
                }
                this.refresh();
            };
            /**
             * 默认长按事件
             * @param {Event} e - jquery event对象
             * @param {Number} data - 下滑距离值
             */
            RxmGridImpl.prototype._onPressLine = function (e, d) {
                var $tr = e.currentTarget;
                var index = $tBody.find("tr").index($tr);
                var data = {
                    "index": index,
                    "row": _doc.getRowDataByViewIndexs(index),
                    "pageInfo": _pageInfo
                };
                e.data = data;
                $(e.target).trigger(RxmGridMsg.msgEnum.pressLineElement, data);
                return false;
            };
            /**
             * 默认点击事件
             * @param {Event} e - jquery Event对象
             */
            RxmGridImpl.prototype._onTapLine = function (e, d) {
                if (isDesktop(_config.id) && $(e.target)[0].tagName === "INPUT") {
                }
                else {
                    var $tr = e.currentTarget;
                    var index = $tBody.find("tr").index($tr);
                    var data = {
                        "index": index,
                        "row": _doc.getRowDataByViewIndexs(index),
                        "pageInfo": _pageInfo
                    };
                    e.data = data;
                    $(e.target).trigger(RxmGridMsg.msgEnum.tapLineElement, data);
                    return false;
                }
            };
            /**
             * 默认左滑事件
             * @param {Event} e - jquery Event对象
             */
            RxmGridImpl.prototype._onSlideLine = function (e, d) {
                var $tr = e.currentTarget;
                var index = $tBody.find("tr").index($tr);
                var data = {
                    "index": index,
                    "row": _doc.getRowDataByViewIndexs(index),
                    "pageInfo": _pageInfo
                };
                e.data = data;
                $(e.target).trigger(RxmGridMsg.msgEnum.slideInLine, data);
                return false;
            };
            /**
             * 下滑至顶部，从开始至结束持续监听动态设置 $gridContent top值
             * @param {Event} e - jquery Event对象
             * @param {Number} data - 下滑距离值
             */
            RxmGridImpl.prototype._onSwipeInTop = function (e, data) {
                //1.共xx页，松手获取第x页面
                //2.查看是否是第一页，如果是第一页，显示 ‘松手刷新数据’
                $topRefreshbar.empty();
                $topRefreshbar.css("height", "40px");
                this.renderTopRefreshbar();
                $topRefreshbar.css("display", "");
                //阻尼设置为0.3
                $gridContent.css("top", data * 0.3);
                if (data * 0.3 > 25) {
                    var $loading = $('<img class = "rxm-top-loading-arrow" src="' + _upArrowImg + '"/>&nbsp;&nbsp;&nbsp;<span>' + _config.refreshTip.topTipRefresh + '</span>');
                    $topRefreshbar.empty().append($loading);
                }
            };
            /**
             * 上滑至底部，从开始至结束持续监听  动态设置 $gridContent top值
             * @param {Event} e - jquery Event对象
             * @param {Number} data - 滑动位置数据对象
             */
            RxmGridImpl.prototype._onSwipeInBottom = function (e, data) {
                //1.共xx页，松手获取第x页面
                //2.查看是否是最后一页，如果是最后一页，显示 ‘已经是全部内容’
                var the = this;
                //非最后一页,继续reload数据
                if (!this._isLastPage()) {
                    //显示底部刷新栏
                    $bottomRefreshbar.css("display", "");
                    this.reload({
                        data: { type: _config.data.type, value: _config.data.value },
                        totalPage: -2,
                        type: "bottom",
                        loadComplete: function () {
                            $gridWrap.trigger(RxmGridMsg.msgEnum.swipeInBottomAfter);
                        }
                    });
                }
                else {
                    //最后一页数据,不调用reload方法,直接显示“没有更多了”
                    $bottomRefreshbar.css("display", "");
                    setTimeout(function () {
                        $bottomRefreshbar.empty();
                        var $loading = $('<span>' + _config.refreshTip.bottomTipEnd + '</span>');
                        $loading.appendTo($bottomRefreshbar);
                        $gridContent.animate({ top: '0px' }, "slow", function () {
                            $gridContent.stop(true);
                            $bottomRefreshbar.empty();
                            the.renderBottomRefreshbar();
                            $bottomRefreshbar.css("display", "none");
                            $bottomRefreshbar.css("bottom", "45px");
                        });
                    }, 500);
                    $gridWrap.trigger(RxmGridMsg.msgEnum.swipeInBottomAfter);
                }
            };
            /**
             * 上滑至底部后需要进行的操作
             */
            RxmGridImpl.prototype._onSwipeInBottomAfter = function () {
                //TODO
            };
            /**
             * 下滑至顶部结束后需要进行的操作
             */
            RxmGridImpl.prototype._onSwipeInTopEndAfter = function () {
                //TODO
            };
            /**
             * 下滑至顶部开始
             */
            RxmGridImpl.prototype._onSwipeInTopBegin = function () {
                //TODO
            };
            /**
             * 上滑至底部开始
             */
            RxmGridImpl.prototype._onSwipeInBottomBegin = function () {
                //TODO
            };
            /**
             * 下滑至顶部结束
             * @param {Event} e - jquery Event对象
             * @param {Number} data - 滑动位置数据对象
             */
            RxmGridImpl.prototype._onSwipeInTopEnd = function (e, data) {
                //1.当前的cacheBegin是 1时，刷新全部数据
                //2.当前的cacheBegin 大于1时 取-1 ；
                //3.松手后，应该显示获取动作，直到ajax返回数据
                var the = this;
                var prePageFlag = _config.param.cacheBegin == 1 ? 1 : -1;
                if (this._isFirstPage()) {
                    $gridContent.animate({ top: '0px' }, "slow", function () {
                        $gridContent.stop(true);
                        $topRefreshbar.empty();
                        var $loading = $('<span class="rxm-grid-loading"/>&nbsp;&nbsp;&nbsp;<span>' + _config.refreshTip.topTipLoading + '</span>');
                        $loading.appendTo($topRefreshbar);
                        //  $topRefreshbar.css("display","none");
                        the.reload({
                            totalPage: 1, loadComplete: function (data) {
                                setTimeout(function () {
                                    $gridContent.stop(true);
                                    $topRefreshbar.empty();
                                    var $loading;
                                    if (data.status === "sucsess") {
                                        $loading = $('<span>' + _config.refreshTip.topTipSuccess + '</span>');
                                    }
                                    else {
                                        $loading = $('<span>' + _config.refreshTip.topTipError + '</span>');
                                    }
                                    $loading.appendTo($topRefreshbar);
                                    $topRefreshbar.animate({ height: '0px' }, "400");
                                }, 300);
                                $gridWrap.trigger(RxmGridMsg.msgEnum.swipeInTopEndAfter);
                            }
                        });
                    });
                }
                else {
                    $gridContent.animate({ top: '0px' }, "slow", function () {
                        $gridContent.stop(true);
                        $topRefreshbar.empty();
                        var $loading = $('<img class="rxm-top-loading-img" src="' + _loadingImg + '"/>&nbsp;&nbsp;&nbsp;<span>' + _config.refreshTip.topTipLoading + '</span>');
                        $loading.appendTo($topRefreshbar);
                        //$topRefreshbar.css("display","none");
                        $gridContent.animate({ top: '0px' }, "slow", function () {
                            $gridContent.stop(true);
                            $topRefreshbar.empty();
                            var $loading = $('<img class="rxm-top-loading-img" src="' + _loadingImg + '"/>&nbsp;&nbsp;&nbsp;<span>' + _config.refreshTip.topTipBegin + '</span>');
                            $loading.appendTo($topRefreshbar);
                            the.reload({ totalPage: prePageFlag });
                            $topRefreshbar.css("display", "none");
                        });
                    });
                    $gridWrap.trigger(RxmGridMsg.msgEnum.swipeInTopEndAfter);
                }
                _startYMove = 0;
            };
            /**
             * 上滑至底部结束，初始化_startYMove值为0
             */
            RxmGridImpl.prototype._onSwipeInBottomEnd = function () {
                _startYMove = 0;
            };
            /**
             * 判断表格滚动条到顶(下拉刷新)
             * @returns {Boolean} - 到顶状态值
             */
            RxmGridImpl.prototype._isOnTop = function () {
                //滚动到的当前位置
                var scroHeight = $tableBody.scrollTop();
                //ios的scroHeight到顶判断为负值 安卓scroHeight为0
                if (scroHeight <= 0 && _config.param.viewBegin == 0) {
                    return true;
                }
                else {
                    return false;
                }
            };
            /**
             * 判断表格滚动条到底(上拉分页)
             * @returns {Boolean} - 到底状态值
             */
            RxmGridImpl.prototype._isOnBottom = function () {
                //滚动距离总长(注意不是滚动条的长度)
                var scrollHight = $tableBody[0].scrollHeight;
                //滚动到的当前位置
                var scrollTop = $tableBody.scrollTop();
                //$tableBody高度
                var tableHight = $tableBody.height();
                if ((scrollTop + tableHight >= scrollHight)) {
                    return true;
                }
                else {
                    return false;
                }
            };
            /**
             * 判断分页是否为最后一页数据(上拉分页)
             * @returns {Boolean} - 最后一页状态值
             */
            RxmGridImpl.prototype._isLastPage = function () {
                //计算总页数
                _doc._pageInfo.pageCount = Math.ceil(_doc._pageInfo.dataCount / _config.pageSize);
                //计算当然数组数据条目数
                var caheLength = Math.ceil(_config.param.data.length / _config.pageSize) + _config.param.cacheBegin;
                if (_doc._pageInfo.pageCount < caheLength) {
                    return true;
                }
                else {
                    return false;
                }
            };
            /**
             * 判断内存中是否为内存中的首页数据(下拉刷新)
             * @returns {Boolean} - 第一页状态值
             */
            RxmGridImpl.prototype._isFirstPage = function () {
                if (this._isOnTop() && _config.param.cacheBegin == 1) {
                    return true;
                }
                else {
                    return false;
                }
            };
            /**
             * 判断是否通过html属性配置生成表格
             * @returns {Boolean} - 状态值
             */
            RxmGridImpl.prototype._isHtmlAttrCfg = function () {
                if ($gridWrap.find(".rxm-table-head").length != 0) {
                    return true;
                }
                else {
                    return false;
                }
            };
            /**
             * 重置左滑按钮区域处于隐藏状态
             * @param {Object} $obj - 左滑行对象
             */
            RxmGridImpl.prototype._resetStatus = function ($obj) {
                $obj.css('-webkit-transform', 'translate3d(0px, 0px, 0px)');
            };
            /**
             * 设定左滑菜单过渡效果参数
             * @param {Object} $obj - 左滑行对象
             */
            RxmGridImpl.prototype._setTransition = function ($obj) {
                var the = this;
                $obj.css({
                    '-webkit-transition-property': '-webkit-transform',
                    '-webkit-transition-duration': _config.leftSlideParam.traDuration + "ms",
                    '-webkit-transition-timing-function': _config.leftSlideParam.traFunction
                });
            };
            ;
            /***************************************************** 桌面版表格函数 ********************************************************/
            /**
             * 渲染PC端表格行数据(可重写)
             * @param {Object} row - 行数据
             * @param {Object} $tr - 行数据
             * @param {Number} rowIndex - 行索引
             * @param {Number} baseIndex - true克隆数据，undefined，false 返回 view 数据此为默认
             * @returns {Object} $tr - 表格行对象 jquery对象
             */
            RxmGridImpl.prototype.createRowInPc = function (row, $tr, rowIndex, baseIndex) {
                var _index = rowIndex || (function guid() {
                    function s4() {
                        return Math.floor((1 + Math.random()) * 0x10000)
                            .toString(16)
                            .substring(1);
                    }
                    return s4() + s4() + '' + s4() + '' + s4() + '' +
                        s4() + '' + s4() + s4() + s4();
                })();
                //console.log(_index);
                $tr.data("index", _index);
                row["_index"] = _index;
                if (!!_config.index) {
                    $tr.append('<td align="center" class="rxmindex" width="35px">' + (rowIndex + baseIndex) + '</td>');
                }
                if (typeof _config.multi != "undefined") {
                    $tr.append('<td align="center" class="fix" width="24px"><input type="' + (_config.multi ? 'checkbox' : 'radio') + '" name="rxm-s-gird-multi-' + (_config.id) + '" ' + (row["_checked"] ? "checked" : "") + '></td>');
                }
                var _loop_1 = function (j, item, $td) {
                    var tdValue = row[item.field];
                    //format重写函数名称定义
                    var formatFun = "format" + item.field;
                    //表格config对象中layout中数据format处理
                    if (item.format) {
                        tdValue = item.format({ "row": row });
                    }
                    //重写format函数
                    var the = this_1;
                    if ($.isFunction(the[formatFun])) {
                        tdValue = the[formatFun](row);
                    }
                    tdValue = (tdValue || tdValue == 0) ? tdValue : "";
                    $td = $('<td class="' + _config.id + '-' + item.field + '"' + (item.align ? ' align="' + item.align + '"' : '') + '></td>');
                    //td添加点击效果样式
                    if (item.rxmtap) {
                        $td.addClass("rxm-click-style");
                    }
                    item.click ? function () {
                        $td.append('<a' + (item.field ? ' class="' + item.field + '"' : '') + '></a>');
                        $td.children("a").append(tdValue);
                    }() : $td.append(tdValue);
                    $tr.append($td);
                    out_$td_1 = $td;
                };
                var this_1 = this, out_$td_1;
                for (var j = 0, item = void 0, $td = void 0; item = _config.layout[j++];) {
                    _loop_1(j, item, $td);
                    $td = out_$td_1;
                }
                $tr.children("td").each(function () {
                    $(this).attr("title", $(this).text());
                });
                return $tr;
            };
            /**
             * 桌面端 加载视图内所有属性（表格、标题栏、工具栏、搜索栏、分页栏)
             */
            RxmGridImpl.prototype._renderPc = function () {
                //行高
                var trHeight = 40;
                //清空表格包裹器
                $gridWrap.addClass("rxm-s-grid");
                //添加隐藏多余字符样式
                _config.textEllipsis && $gridWrap.addClass("rxm-s-grid-ellipsis");
                //判断html文件中是否存在定制titlebar
                if ($gridWrap.find(".rxm-s-grid-titlebar").length == 0) {
                    this._renderTitleBarPc();
                }
                //判断html文件中是否存在定制searchbar
                if ($gridWrap.find(".rxm-s-grid-searchbar").length == 0) {
                    this._renderSearchBarPc();
                }
                //判断html文件中是否存在定制toolbar
                if ($gridWrap.find(".rxm-s-grid-toolbar").length == 0) {
                    this._renderToolbarPc();
                }
                else {
                    //工具栏默认按钮事件绑定
                    this._setDefalToolbarEvent();
                }
                //判断html文件中是否存在定制表格
                if ($gridWrap.find(".rxm-s-grid-content").length == 0) {
                    this._renderContentPc();
                }
                else {
                    //行事件绑定
                    this._setTableRowEvent();
                    //表头全选checkbox点击事件绑定
                    this._setTableHeadEvent();
                }
                //判断html文件中是否存在定制分页栏
                if ($gridWrap.find(".rxm-s-grid-pagination").length == 0) {
                    this._renderPaginationPc();
                }
                else {
                    //设置分页数初始值
                    this._setPaginationSize();
                }
                //设置表格高度 如果设置表格高速则直接使用设置高度 
                /**
                 * 设置表格rxm-table-body高度
                 * 1、如果直接配置高度则直接使用设置高度
                 * 2、如果没有设置表格高度，但是设置分页，表格高度则是分页行数的高度
                 * 3、如果没有设置高度、也没有分页，则表格根据数据条目数据自动填充
                 */
                if (!!_config.height) {
                    _wrapHeight = _config.height;
                    $gridWrap.find(".rxm-table-body").css("height", _config.height);
                }
                else if (!_config.height && _config.pagination) {
                    var temp = _config.pageSize * trHeight;
                    _wrapHeight = temp.toString();
                    $gridWrap.find(".rxm-table-body").css("height", _wrapHeight);
                }
                else {
                    $gridWrap.find(".rxm-table-body").css("height", "auto");
                }
                //绑定刷新函数  doc中_refresh()函数激发
                $gridWrap.on(RxmGridMsg.msgEnum.ormRereshGridView, $.proxy(this._onRefreshView, this));
            };
            /**
             * 桌面端 渲染表格
             */
            RxmGridImpl.prototype._renderTablePc = function () {
                //清空表格中行数据
                var $table = $gridWrap.find(".rxm-s-grid-table").empty();
                $table.append('<div class="rxm-table-head"><table onselectstart="return false;" class="rxm-table rxm-table-hover"><thead></thead></table><div class="dragTrigger"></div></div>');
                //var style = 'style="overflow-x:hidden;overflow-y:auto;' + (_config.height && "height:" + _config.height) + '"';
                var $tableBody = $('<div class="rxm-table-body"><table class="table rxm-table-hover"><thead></thead><tbody></tbody></table></div>');
                $table.append($tableBody);
                var _tBodyHeight = _calTableBodyHeight();
                $gridWrap.find(".rxm-table-body").css("height", _tBodyHeight);
                $gridWrap.find(".rxm-table-body").css("overflow-x", "hidden");
                $gridWrap.find(".rxm-table-body").css("overflow-y", "auto");
                this._setTableRowEvent();
                this._renderTableHeadPc();
            };
            /**
             * 桌面端 渲染表格头部
             */
            RxmGridImpl.prototype._renderTableHeadPc = function () {
                var $tableHead = $gridWrap.find(".rxm-s-grid-table table thead").empty();
                var html = "";
                //渲染索引表头
                if (!!_config.index) {
                    html += '<th align="center" class="rxmindex noDrag" width="35px"></th>';
                }
                //渲染checkbox表头
                if (typeof _config.multi != "undefined") {
                    html += '<th align="center" class="fix noDrag" width="24px">' + (_config.multi ? '<input type="checkbox">' : '') + '</th>';
                }
                var layout = _config.layout;
                for (var i = 0, item; item = layout[i++];) {
                    var width = (item.width ? "width:" + item.width + ";" : "width:" + (100 / layout.length + '%') + ";");
                    var align = (item.align ? "text-align:" + item.align + ";" : "");
                    var style = 'style="' + align + ' ' + width + '"';
                    html += '<th ' + style + ' class="' + item.field + '" title="' + item.name + '">' + item.name + (item.sort ? '<i class="fa fa-sort"></i>' : '') + '</th>';
                }
                $tableHead.append('<tr>' + html + '</tr>');
                $gridWrap.find(".rxm-s-grid-table .rxm-table-body thead th").removeAttr("title").empty();
                //表头全选checkbox点击事件绑定
                this._setTableHeadEvent();
            };
            /**
             * 桌面端 表格行事件绑定
             */
            RxmGridImpl.prototype._setTableRowEvent = function () {
                //点击事件绑定  这个需要认真斟酌
                $tBody = $gridWrap.find(".rxm-s-grid-table .rxm-table-body tbody");
                $tBody.tap("tr", $.proxy(this._onTapLine, this));
                var clkFun;
                var aFun;
                var aFunClass;
                for (var i = 0; i < _config.rowevent.length; i++) {
                    if (!!_config.rowevent[i].click) {
                        clkFun = _config.rowevent[i].click;
                    }
                }
                for (var i = 0; i < _config.layout.length; i++) {
                    if (!!_config.layout[i].click) {
                        aFun = _config.layout[i].click;
                        aFunClass = "." + _config.layout[i].field;
                    }
                }
                //绑定数据列表配置的所有事件
                if (!!clkFun) {
                    this.bindTapLineElement({ fn: clkFun }, this);
                }
                if (!!aFun) {
                    this.bindTapLineElement({ selector: aFunClass, fn: aFun }, this);
                }
            };
            /**
             * 桌面端 表头全选checkbox点击事件绑定
             */
            RxmGridImpl.prototype._setTableHeadEvent = function () {
                var $tHead = $gridWrap.find(".rxm-s-grid-table .rxm-table-head thead"), _$tBody = $gridWrap.find(".rxm-s-grid-table .rxm-table-body tbody");
                $tHead.tap("th", function (event) {
                    var nodeName = event.target.nodeName;
                    if (nodeName == "INPUT") {
                        var checked = $(event.target).is(":checked");
                        _$tBody.find("input").each(function () {
                            if (checked) {
                                this.checked = true;
                            }
                            else {
                                $(this).removeAttr("checked");
                            }
                        });
                    }
                });
            };
            /**
             * 渲染表格标题栏
             */
            RxmGridImpl.prototype._renderTitleBarPc = function () {
                $gridWrap.append($('<div class="rxm-s-grid-titlebar"></div>'));
                $gridWrap.find(".rxm-s-grid-titlebar").css("display", "none");
                if (_config.title) {
                    $titlebar.css("display", "");
                    $titlebar.empty().append(_config.title);
                }
            };
            /**
             * 渲染表格搜索栏
             */
            RxmGridImpl.prototype._renderSearchBarPc = function () {
                $gridWrap.append($('<div class="rxm-s-grid-searchbar"></div>'));
                $gridWrap.find(".rxm-s-grid-searchbar").css("display", "none");
                if (!!_config.searchbar) {
                    $searchbar.css("display", "");
                }
            };
            /**
             * 桌面端 渲染表格工具栏
             */
            RxmGridImpl.prototype._renderToolbarPc = function () {
                $gridWrap.append($('<div class="rxm-s-grid-toolbar"></div>'));
                $toolbar = $gridWrap.find(".rxm-s-grid-toolbar");
                $gridWrap.find(".rxm-s-grid-toolbar").css("display", "none");
                //通过config对象生成工具栏
                if (!!_config.toolbar && _config.toolbar.length > 0) {
                    $toolbar.css("display", "block");
                    var $ul = $("<ul style='width:100%'></ul>");
                    for (var i = 0, length = _config.toolbar.length; i < length; i++) {
                        var item = _config.toolbar[i];
                        var $li = $('<li></li>');
                        $li.tap(this, item.callback);
                        $li.attr("style", item.style);
                        var $a = $('<a></a>');
                        var $i = $('<i></i>');
                        $i.attr("class", item.icon);
                        $i.appendTo($a);
                        $a.append(item.name);
                        $a.appendTo($li);
                        $li.appendTo($ul);
                    }
                    $toolbar.empty().append($ul);
                    //表格工具栏默认按钮事件绑定
                    this._setDefalToolbarEvent();
                }
            };
            ;
            /**
             * 桌面端 表格工具栏默认按钮事件绑定
             */
            RxmGridImpl.prototype._setDefalToolbarEvent = function () {
                //获取所有按钮，判断是否有默认值定义
                var liBtn = $gridWrap.find(".rxm-s-grid-toolbar ul li");
                //包裹器html中默认定义三个按钮  删除、全选、取消
                if (liBtn.length > 0) {
                    for (var i = 0; i < liBtn.length; i++) {
                        if ($(liBtn[i]).is(".rxm-default-delete")) {
                            $(liBtn[i]).tap($.proxy(this.bindDeleteBtn, this));
                        }
                        if ($(liBtn[i]).is(".rxm-default-all-select")) {
                            $(liBtn[i]).tap($.proxy(this.bindSelectAllBtn, this));
                        }
                        if ($(liBtn[i]).is(".rxm-default-cancel") && appTool.isMobileOpen()) { //判断是否在移动端
                            $(liBtn[i]).tap($.proxy(this.bindCancelBtn, this));
                        }
                    }
                }
            };
            /**
             * 桌面端 渲染表格数据包裹器
             */
            RxmGridImpl.prototype._renderContentPc = function () {
                $gridWrap.append($('<div class="rxm-s-grid-content"><div class="rxm-s-grid-table"></div></div>'));
                this._renderTablePc();
            };
            ;
            /**
             * 桌面端 渲染表格分页区域
             */
            RxmGridImpl.prototype._renderPaginationPc = function () {
                $gridWrap.append($('<div class="rxm-s-grid-pagination"></div>'));
                $pagination = $gridWrap.find(".rxm-s-grid-pagination");
                $pagination.css("display", "none");
                if (!_config.pagination) {
                    $pagination.empty().hide();
                }
                else {
                    $pagination.empty().show();
                    //render pagination
                    $pagination.append($('<a title="第一页" class="GoToFirst"><i class="glyphicon glyphicon-step-backward"></i></a>' +
                        '<a title="上一页" class="GoToPrev"><i class="glyphicon glyphicon-chevron-left"></i></a>' +
                        '<span class="rxm-cur-page"><input type="text" value=""/></span>' +
                        '<a title="下一页" class="GoToNext"><i class="glyphicon glyphicon-chevron-right"></i></a>' +
                        '<a title="最后一页" class="GoToEnd"><i class="glyphicon glyphicon-step-forward"></i></a>'));
                    $pagination.append($('<a title="刷新" class="refresh"><i class="glyphicon glyphicon-refresh"></i></a>'));
                    $pagination.append($('<span class="rxm-data-count">共<i class="rxm-num"></i>条</span>'));
                    var $select = $('<select></select>');
                    var pageList = [5, 10, 15, 20, 50, 100];
                    for (var i = 0; i < pageList.length; i++) {
                        $select.append('<option value="' + pageList[i] + '">' + pageList[i] + '</option>');
                    }
                    $pagination.append($('<span class="rxm-page-size">每页' + $select.clone().wrap('<div/>').parent().html() + '条</span>'));
                    //设置分页数初始值
                    this._setPaginationSize();
                }
            };
            /**
             * 桌面端 表格分页区域设置初始分页数
             */
            RxmGridImpl.prototype._setPaginationSize = function () {
                $pagination = $gridWrap.find(".rxm-s-grid-pagination");
                $pagination.find(".rxm-page-size select").val(_config.pageSize);
            };
            /**
             * 桌面端 表格分页区域数据初始化
             */
            RxmGridImpl.prototype._setPaginationDataEvent = function () {
                var the = this;
                //计算总页数
                _doc._pageInfo.pageCount = Math.ceil(_doc._pageInfo.dataCount / _config.pageSize);
                //当前页码input框赋值
                $pagination.find(".rxm-cur-page input").val(_pageInfo.curPage);
                //数据总数量
                $pagination.find(".rxm-data-count .rxm-num").text(_pageInfo.dataCount);
                //设置分页 上一页、下一页图标可点击状态  
                this._setPaginationStatus();
                if (!$pagination.data("bindEvent")) {
                    $pagination.tap("a", function () {
                        if ($(this).is(".disable")) {
                            return false;
                        }
                        var className = this.className.split()[0];
                        var type = className.substring(4);
                        if (className.indexOf("GoTo") > -1) {
                            var curPage = _pageInfo.curPage;
                            var pageCount = _pageInfo.pageCount;
                            switch (type) {
                                case 'First':
                                    _pageInfo.curPage = 1;
                                    _config.param.viewBegin = 0;
                                    break;
                                case 'End':
                                    _pageInfo.curPage = pageCount;
                                    _config.param.viewBegin = 0;
                                    break;
                                case 'Prev':
                                    if (curPage <= 1) {
                                        return false;
                                    }
                                    _config.param.viewBegin--;
                                    if (_config.param.viewBegin <= 0) {
                                        _config.param.viewBegin = 0;
                                    }
                                    _pageInfo.curPage = curPage - 1;
                                    break;
                                case 'Next':
                                    if (curPage >= pageCount) {
                                        return false;
                                    }
                                    _pageInfo.curPage = curPage + 1;
                                    if (_config.param.viewBegin >= pageCount) {
                                        _config.param.viewBegin = pageCount;
                                    }
                                    else {
                                        _config.param.viewBegin++;
                                    }
                                    break;
                            }
                        }
                        else if (className != "refresh" && className != "rxm-cur-page") {
                            _pageInfo.curPage = parseInt($(this).text());
                        }
                        else if (className == "refresh") {
                            the.reload();
                        }
                        if (type == "Prev") {
                            the.reload({
                                totalPage: -1,
                                deskCurPage: _pageInfo.curPage
                            });
                        }
                        else if (type == "Next") {
                            the.reload({
                                totalPage: -2,
                                deskCurPage: _pageInfo.curPage
                            });
                        }
                        else {
                            the.reload({
                                totalPage: _pageInfo.curPage
                            });
                        }
                    }).on("keydown", "input", function (e) {
                        if (e.which != 13) {
                            return true;
                        }
                        var curPage = Math.min($(this).val() * 1, _pageInfo.pageCount);
                        _pageInfo.curPage = curPage > 0 ? curPage : 1;
                        //the.refresh();
                        the.reload({
                            totalPage: _pageInfo.curPage
                        });
                    }).on("tap", "input", function () {
                        //$(this).select();
                    }).on("blur", "input", function () {
                        //$(this).val(_pageInfo.curPage);
                        var curPage = Math.min($(this).val() * 1, _pageInfo.pageCount);
                        _pageInfo.curPage = curPage > 0 ? curPage : 1;
                        //the.refresh();
                        the.reload({
                            totalPage: _pageInfo.curPage
                        });
                    }).on("change", "select", function () {
                        _config.pageSize = $(this).val() * 1;
                        _pageInfo.curPage = 1;
                        //the.refresh();
                        the.reload({
                            totalPage: _pageInfo.curPage
                        });
                    });
                    $pagination.data("bindEvent", true);
                }
            };
            /**
             * 桌面端 表格分页区域数据初始化
             */
            RxmGridImpl.prototype._setPaginationStatus = function () {
                $pagination.children("a.disable").removeClass("disable");
                if (_pageInfo.dataCount <= _config.pageSize) {
                    $pagination.children("a").not(".refresh").addClass("disable");
                }
                if (_pageInfo.curPage == 1) {
                    $pagination.children("a.GoToFirst,a.GoToPrev").addClass("disable");
                }
                else if (_pageInfo.curPage == _pageInfo.pageCount) {
                    $pagination.children("a.GoToEnd,a.GoToNext").addClass("disable");
                }
            };
            /**
             * 表格初始化函数 调用reload生成表格
             */
            RxmGridImpl.prototype._gridInit = function () {
                //设置分页,默认绑定上滑下滑手势
                if (_config.pagination) {
                    this.bindSwipeInTop(true, this);
                    this.bindSwipeInTopEnd(true, this);
                    this.bindSwipeInBottom(true, this);
                    this.bindSwipeInBottomEnd(true, this);
                }
                //长按事件绑定
                // this.bindPressLineElement({
                //     fn: function (this: any, evt: any, data: any) {
                //         //初始化长按多选按钮
                //         this.initPress();
                //         this.checkRow(data.index);
                //     }
                // }, this);
                //buffer
                $.isArray(_config.data) && _config.data.length > 0 && this.reload(_config.data);
                //ajax
                $.isString(_config.data) && _config.data.length > 0 && this.reload(_config.data);
                //兼容原有表格
                _config.data instanceof Object && this.reload(_config.data);
            };
            return RxmGridImpl;
        }());
        var ret = thisObj(_id, new RxmGridImpl());
        var rrr = window;
        rrr.require('RxmPageBase').bindPageReady({ callback: $.proxy(ret._gridInit, ret), one: true });
        return ret;
    };
    return ClsFactory;
});

define("RxmIconList", ["require", "exports", "RxmArtTemplate", "RxmPageBase", "RxmAppTool"], function (require, exports, ArtTemplate, PageBase, appTool) {
    "use strict";
    ///<amd-dependency path="RxmArtTemplate" name="ArtTemplate"/>
    /**
     * 引入类声明公共方法
     * @type {rxm.AppTool}
     * */
    var thisObj = appTool.thisObj;
    /**
     * 组件默认值
     * @type String
     */
    var clsdef = {
        data: [{
                "categoryTitle": "导航",
                "listData": []
            }],
        isExpand: true,
        rxmPath: 'RxmIconList',
        clsName: 'rxm-icon-list',
        juryFn: 'rxmBufferGrid',
    };
    /**
     * @param  {rxm.iconlist.cnf} config
     */
    var ClassFactory = function (config) {
        //查找已有iconList实例，有则直接返回
        if (thisObj(config.id)) {
            return thisObj(config.id);
        }
        //消息唯一ID，保证不同实例消息不冲突
        var messageId = appTool.uuid();
        //组件参数设置
        var settings = $.extend(clsdef, config);
        //组件实例唯一ID
        var _id = settings.id;
        //组件数据
        var _data = settings.data;
        //组件容器DOM
        var _$wrapDom = $('#' + _id);
        //触摸时的坐标
        var startX, startY;
        //滑动的距离
        var x, y;
        //设一个全局变量记录上一次内部块滑动的位置
        var aboveY = 0;
        //初始化按钮data
        _$wrapDom.data('selectedData' + _id, []);
        //组件头部
        var _$headers = function () {
            return _$wrapDom.find('.rxm-icon-list-header');
        };
        //组件外层包裹器
        var _$wrapContainer = function (me) {
            return (me.attrListType() == 'iconlist') ? _$wrapDom : _$wrapDom.find('.rxm-icon-list-desktop');
        };
        //iconlist组件内容包裹器
        var _$wrapContent = function () {
            return _$wrapDom.find('.rxm-icon-list-content');
        };
        //组件渲染入口
        var _render = function () {
            /**@type {IconList} */
            var me = thisObj(_id);
            if (me.render)
                return me.render(_data);
            /**@type {Cls} */
            //用模板渲染页面HTML
            var iconListHTML = ArtTemplate(me.attrTemplateId(), { data: _data });
            $('#' + _id).html(iconListHTML);
            if (me.attrListType() == "iconlist") {
                //是否开启展开功能
                if (me.attrIsExpand()) {
                    me.addExpend();
                }
                else {
                    me.removeExpand();
                }
                //添加移动端事件监听
                //me.addMobileListener();
                //添加或者删除分割线
                me.setSeperateLine();
                //单选，多选功能
                me.setSelectIconlist();
                //修正flex布局
                me._flexCenterFix();
            }
            else if (me.attrListType() == "desktop") {
                me.initFixedHeader();
                me.setSelectDesktop();
                $('#rxmdk_debug_simulator').onresize = function () {
                    me.initFixedHeader();
                };
            }
        };
        var IconList = /** @class */ (function () {
            function IconList() {
            }
            /**
              * 功能初始化
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.init = function () {
                var url = this.attrUrl();
                if (url && typeof url == 'string') {
                    url = getServer() + '/' + url;
                    $.ajax({
                        url: url,
                        dataType: 'json',
                        type: 'get',
                        success: function (data) {
                            _data = data;
                            _render();
                        }, error: function (e) {
                            console.error(e);
                        }
                    });
                }
                else if (_data) {
                    _render();
                }
            };
            /**
              * 添加新icon
              * 要求格式
              * {
                    "title": "文本域",
                    "iconClass":"icon iconfont icon-RectangleCopy9",
                    "id":"button9" ,
                    "categoryTitle":"表单项",
                    "href":"http://www.baidu.com",
                    "selected": "true"
                }
              * @param {Sting} value
              */
            IconList.prototype.addIcon = function (iconData) {
                this.storeData(iconData);
                var $li = $('<li><i class="' + iconData.iconClass + '" style="font-size: 20px"></i><span class="anticon-class">' + iconData.title + '</span></li>');
                $li.attr('title', iconData.comment);
                $li.attr('id', iconData.id);
                $li.attr('class', 'rxm-icon-list-item rxm-icon-list-item-hoverDefault');
                _$wrapDom.find('ul[type=' + iconData.categoryTitle + '] li').last().after($li);
                this._flexCenterFix();
                var a = {
                    originalEvent: event,
                    data: iconData
                };
                $('rxmiconadded' + messageId).rxmTriggerCmd(a);
            };
            /**
              * 删除指定ID的icon
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.removeIcon = function (id) {
                this.deleteData(id);
                _$wrapDom.find('#' + id).remove();
                this._flexCenterFix();
                //消息激发
                var a = {
                    originalEvent: event,
                    data: id
                };
                $('rxmiconremove' + messageId).rxmTriggerCmd(a);
            };
            /**
              * 设置选择状态
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.setSelectIconlist = function () {
                var me = this;
                //寻找选中节点
                var _findClickedLi = function (event) {
                    if (event.target.nodeName.toLowerCase() == 'li') {
                        return event.target;
                    }
                    else if (event.target.nodeName.toLowerCase() == 'i' || (event.target.nodeName.toLowerCase() == 'span' && event.target.className == 'anticon-class') || event.target.nodeName.toLowerCase() == 'img') {
                        return event.target.parentNode;
                    }
                    else if (event.target.nodeName.toLowerCase() == 'span') {
                        return event.target.parentNode.parentNode;
                    }
                    else {
                        return false;
                    }
                };
                //多选实现
                if (!me.attrSelected()) {
                    _$wrapContent().on('click', function (e) {
                        //激活此事件，发送消息
                        var li = _findClickedLi(e);
                        var a = {
                            originalEvent: event,
                            data: me.getSelectedDataById(li.id)
                        };
                        //如果处于active，删除active
                        if ($(li).hasClass('active')) {
                            me.setSelectedData(li.id, false);
                            $(li).find('.ribbon').remove();
                            $(li).removeClass('active');
                            $('rxmiconcancelselected' + messageId).rxmTriggerCmd(a);
                        }
                        else {
                            //添加active
                            me.setSelectedData(li.id, true);
                            $(li).prepend('<div class="ribbon ribbon-top-right"><span>ribbon</span></div>');
                            $(li).addClass('active');
                            $('rxmiconselected' + messageId).rxmTriggerCmd(a);
                        }
                    });
                }
                //默认，及单选实现
                else {
                    _$wrapContent().on('click', function (e) {
                        var li = _findClickedLi(e);
                        var $deseletedLi = _$wrapContainer(me).find('li.active');
                        //如果有active标签，先清除
                        if ($deseletedLi.length) {
                            me.setSelectedData($deseletedLi.attr('id'), false);
                            $deseletedLi.removeClass('active');
                            _$wrapContainer(me).find('.ribbon').remove();
                        }
                        //添加数据
                        me.setSelectedData(li.id, true);
                        //添加样式及元素
                        $(li).addClass('active');
                        $(li).prepend('<div class="ribbon ribbon-top-right"><span>ribbon</span></div>');
                        //激活此事件，发送消息
                        var a = {
                            originalEvent: event,
                            data: me.getSelectedDataById(li.id)
                        };
                        $('rxmiconselected' + messageId).rxmTriggerCmd(a);
                    });
                }
            };
            /**
              * 设置选择状态
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.setSelectDesktop = function () {
                var me = this;
                //寻找选中节点
                var _findClickedItem = function (event) {
                    if (event.target.nodeName.toLowerCase() == 'span') {
                        return event.target.parentNode.parentNode;
                    }
                    else if (event.target.className == 'rxm-icon-list-desktop-leftColumnSection' || event.target.className == 'rxm-icon-list-desktop-rightColumnSection') {
                        return event.target.parentNode;
                    }
                    else {
                        return false;
                    }
                };
                //多选实现
                if (!me.attrSelected()) {
                    _$wrapContainer(me).on('click', function (e) {
                        var item = _findClickedItem(e);
                        if ($(item).hasClass('active')) {
                            me.setSelectedData(item.id, false);
                            $(item).removeClass('active');
                        }
                        else {
                            me.setSelectedData(item.id, true);
                            $(item).addClass('active');
                        }
                    });
                }
                //默认，及单选实现
                else {
                    _$wrapContainer(me).on('click', function (e) {
                        var item = _findClickedItem(e);
                        var $deselectedItem = _$wrapContainer(me).find('.active');
                        //无论是否有选择状态，先清空数据
                        if ($deselectedItem) {
                            me.setSelectedData($deselectedItem.attr('id'), false);
                            //清空样式及元素
                            $deselectedItem.removeClass('active');
                        }
                        //添加数据
                        me.setSelectedData(item.id, true);
                        //添加样式及元素
                        $(item).addClass('active');
                    });
                }
            };
            /**
              * 初始化浮动标签
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.initFixedHeader = function () {
                $('.rxm-icon-list-header-container').css({
                    top: _$wrapDom[0].getBoundingClientRect().top,
                    left: _$wrapDom[0].getBoundingClientRect().left,
                    width: _$wrapDom[0].clientWidth + 'px',
                    height: '30px'
                });
                _$wrapDom.find('.rxm-icon-list-desktop:first').css({
                    marginTop: '30px'
                });
            };
            /**
              * 展开功能
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.addExpend = function () {
                $('<i class="rxm-icon-list-expand fa fa-chevron-down"></i>').appendTo(_$headers()).tap(function () {
                    $(this).parent().next().slideToggle("slow");
                    if ($(this).hasClass('fa-chevron-down')) {
                        $(this).removeClass('fa-chevron-down').addClass('fa-chevron-up');
                    }
                    else {
                        $(this).removeClass('fa-chevron-up').addClass('fa-chevron-down');
                    }
                });
            };
            /**
              * 去除展开功能
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.removeExpand = function () {
                if (_$wrapDom.find('.rxm-icon-list-expand').length > 0) {
                    _$wrapDom.find('.rxm-icon-list-expand').remove();
                }
            };
            /**
              * 私有：解决flex布局最后一排居左，hack
              */
            IconList.prototype._flexCenterFix = function () {
                var emptyCells, i;
                var me = this;
                //cellpush( addedCellnumber ) ;
                //找到list内容选择器，在每一项后面补充空的item，属于CSS hack
                _$wrapContent().each(function () {
                    emptyCells = [];
                    //清空为了在动态插入icon或者删除icon时重新计算
                    $(this).find('.is-empty').remove();
                    //每行icon数目
                    var nunmberPerRow = Math.floor($(this).width() / $(this).find('.rxm-icon-list-item:first').width());
                    //最后一行icon数目
                    var lastRowNumber = $(this).find('.rxm-icon-list-item').length % nunmberPerRow;
                    //需要添加的空icon数目
                    var addedNumber = nunmberPerRow - lastRowNumber;
                    for (i = 0; i < addedNumber; i++) {
                        emptyCells.push($('<ul>', {
                            class: 'rxm-icon-list-item is-empty'
                        }));
                    }
                    $(this).append(emptyCells);
                });
            };
            /**
              * 设置分割线
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.setSeperateLine = function () {
                if (this.attrSeperateLine()) {
                    _$wrapContent().css('borderBottom', '10px solid #EEE');
                }
                else {
                    _$wrapContent().css('borderBottom', 'none');
                }
            };
            /* ------------------------------------
                        数据处理
            ----------------------------------  */
            /**
              * 存储iconlist数据
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.storeData = function (dataObj) {
                if (dataObj) {
                    // var data = {
                    //     id : dataObj.id ,
                    //     name : dataObj.title, 
                    // }
                    $.each(this.getData(), function (i, e) {
                        if (e.categoryTitle == dataObj.categoryTitle)
                            e.listData.push(dataObj);
                    });
                }
                else {
                    console.log('无法保存数据，请联系管理员！');
                }
            };
            /**
              * 删除iconlist数据
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.deleteData = function (id) {
                var me = this;
                if (id) {
                    $.each(this.getData(), function (i, e) {
                        var temp = e.listData;
                        $.each(e.listData, function (index, element) {
                            if (element.id == id) {
                                temp.splice(index, 1);
                                return false;
                            }
                        });
                    });
                }
            };
            /**
              * 选中，取消选中时标记数据
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.setSelectedData = function (id, status) {
                var me = this;
                if (id) {
                    $.each(me.getData(), function (i, e) {
                        $.each(e.listData, function (index, element) {
                            if (element.id == id) {
                                element.selected = status;
                                return;
                            }
                        });
                    });
                }
                else {
                    console.log('点击元素无法保存数据，请联系管理员！');
                }
            };
            /**
              * 或者选中数据通过ID
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.getSelectedDataById = function (id) {
                var me = this;
                var data = null;
                if (id) {
                    $.each(me.getData(), function (i, e) {
                        $.each(e.listData, function (index, element) {
                            if (element.id == id) {
                                data = element;
                                return false;
                            }
                        });
                    });
                }
                else {
                    console.log('点击元素无法保存数据，请联系管理员！');
                }
                return data;
            };
            /**
              * 获取iconlist数据
              * @returns Object
              */
            IconList.prototype.getData = function () {
                return _data;
            };
            /* ------------------------------------
                        属性getter
            ----------------------------------  */
            /**
              * 数据URL
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.attrUrl = function (value) {
                value && _$wrapDom.attr("rxmurl", ret);
                return _$wrapDom.attr("rxmurl");
            };
            /**
              * 模板id
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.attrId = function (value) {
                value && _$wrapDom.attr("id", ret);
                return _$wrapDom.attr("id");
            };
            /**
              * 模板id
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.attrTemplateId = function (value) {
                value && _$wrapDom.attr("rxmtemplate", ret);
                return _$wrapDom.attr("rxmtemplate");
            };
            /**
              * 列表类型
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.attrListType = function (value) {
                value && _$wrapDom.attr("rxmlisttype", ret);
                return _$wrapDom.attr("rxmlisttype");
            };
            /**
              * 是否开启展开属性
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.attrIsExpand = function (value) {
                value && _$wrapDom.attr("rxmisexpand", ret);
                return (_$wrapDom.attr("rxmisexpand") === 'true');
            };
            /**
              * 单选多选属性
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.attrSelected = function (value) {
                value && _$wrapDom.attr("rxmissingle", ret);
                return (_$wrapDom.attr("rxmissingle") === 'true');
            };
            /**
              * 分割线
              * @param {Sting} value
              * @returns {String}
              */
            IconList.prototype.attrSeperateLine = function (value) {
                value && _$wrapDom.attr("rxmisseperateline", ret);
                return (_$wrapDom.attr("rxmisseperateline") === 'true');
            };
            // /**
            //   * 私有：渲染主方法
            //   * @param {Sting} value  
            //   * @returns {String}
            //   */
            //  attrData  (value) {
            //     value && (_data = value)
            //     return _data
            // }
            /* ------------------------------------
                        消息绑定
            ----------------------------------  */
            /**
             * 添加icon消息绑定
             * @param {rxm.cmd.triggerArgs} args - 消息绑定对象
             */
            IconList.prototype.bindRxmAddIcon = function (arg) {
                !arg.hearFrom && (arg.hearFrom = "all");
                $('rxmiconadded' + messageId).rxmBindCmd(arg);
            };
            /**
             * 删除icon消息绑定
             * @param {rxm.cmd.triggerArgs} args - 消息绑定对象
             */
            IconList.prototype.bindRxmRemoveIcon = function (arg) {
                // if (typeof arg == "boolean" || typeof arg == "undefined") {
                //     arg = {}
                // }
                !arg.hearFrom && (arg.hearFrom = "all");
                $('rxmiconremove' + messageId).rxmBindCmd(arg);
            };
            /**
             * 选中icon消息绑定
             * @param {rxm.iconlist.bindTapIcon} args
             */
            IconList.prototype.bindTapIcon = function (args) {
                //绑定
                //_$wrapDom.tap('.rxm-icon-list-item', { id: _id, cmdType: cmdType, items: _data }, _callbacktap);
                //相应组件ID
                //args.id = _id
                //将callback及ID关联到相应标识selector上面
                //$('rxmiconselected').rxmBindCmd(args)
                // if (typeof arg == "boolean" || typeof arg == "undefined") {
                //     arg = {}
                // }
                !args.hearFrom && (args.hearFrom = "all");
                $('rxmiconselected' + messageId).rxmBindCmd(args);
            };
            /**
     * 选中icon消息绑定
     * @param {rxm.iconlist.bindTapIcon} args
     */
            IconList.prototype.bindTapCancelIcon = function (args) {
                //绑定
                //_$wrapDom.tap('.rxm-icon-list-item', { id: _id, cmdType: cmdType, items: _data }, _callbacktap);
                //相应组件ID
                //args.id = _id
                //将callback及ID关联到相应标识selector上面
                //$('rxmiconselected').rxmBindCmd(args)
                // if (typeof arg == "boolean" || typeof arg == "undefined") {
                //     arg = {}
                // }
                !args.hearFrom && (args.hearFrom = "all");
                $('rxmiconcancelselected' + messageId).rxmBindCmd(args);
            };
            return IconList;
        }());
        var ret = thisObj(_id, new IconList());
        PageBase.bindPageReady({ callback: $.proxy(ret.init, ret), one: false });
        return ret;
    };
    return ClassFactory;
});

define("RxmSingleImage", ["require", "exports", "RxmArtTemplate", "RxmAppTool"], function (require, exports, ArtTemplate, appTool) {
    "use strict";
    ///<amd-dependency path="RxmArtTemplate" name="ArtTemplate"/>
    /**
     * 引入类声明公共方法
     * @type {rxm.AppTool}
     * */
    var thisObj = appTool.thisObj;
    /**
     * 组件默认值
     * @type String
     */
    var clsdef = {
        id: 'rxm-singleImage',
        data: [],
        loop: true,
        fullScreen: true,
        rxmPath: 'RxmSingleImage',
        clsName: 'rxm-single-image',
        scaleType: 'scale' // 'scale, full, original'
    };
    /**
     * 激发方法
     * @type String
     */
    var _triggerEvent = function (e) {
        /**
         * @type {rxm.cmd.triggerArgs}
         */
        var a = {
            originalEvent: e,
            id: e.data.id
        };
        var cmdType = e.data.cmdType;
        delete e.data;
        $(cmdType).rxmTriggerCmd(a);
    };
    /**
     * 使用常量
     * @type String
     */
    var CMDTYPE = "rxmSingleImageCmd";
    /**
         * 功能初始化
         * @param {Sting} value
         * @returns {String}
         */
    var _scaleImage = function ($imageElment) {
        var containerWidth = $imageElment.parent().width();
        var containerHeight = $imageElment.parent().height();
        var ratio = $imageElment.width() / $imageElment.height();
        var pratio = containerWidth / containerHeight;
        if (ratio < pratio) { //图片过高
            $imageElment.css({ height: '100%' });
            $imageElment.parent().css({ textAlign: 'center' });
            $imageElment.css({ visibility: 'visible' });
        }
        else { //图片过宽
            $imageElment.css({ width: '100%', verticalAlign: 'middle' });
            $imageElment.parent().css({ lineHeight: containerHeight + 'px' });
            $imageElment.css({ visibility: 'visible' });
        }
    };
    var _fullImage = function ($imageElment) {
        console.log('full');
    };
    var _originalImage = function ($imageElment) {
        console.log('original');
    };
    /**
     * @param  {rxm.slider.cnf} config
     */
    var ClassFactory = function (config) {
        //查找已有Slider实例，有则直接返回
        if (thisObj(_id)) {
            return thisObj(_id);
        }
        var _config = $.extend(clsdef, config);
        var _id = _config.id;
        var _data = _config.data;
        var _$wrapDom = $('#' + _id);
        //组件渲染入口
        var _render = function () {
            /**@type {Slider} */
            var me = thisObj(_id);
            if (me.render)
                return me.render(_data);
            /**@type {Cls} */
            //用模板渲染页面HTML
            var sliderHTML = ArtTemplate(me.attrTemplateId(), { data: _data });
            $('#' + _id).html(sliderHTML);
            //图片注册load事件，一旦加载完毕开始处理图片尺寸
            $('#' + _id + ' img').on('load', function () {
                if (_config.scaleType == 'scale') {
                    _scaleImage($(this));
                }
                else if (_config.scaleType == 'full') {
                    _fullImage($(this));
                }
                else if (_config.scaleType == 'original') {
                    _originalImage($(this));
                }
            });
        };
        var SingleImage = /** @class */ (function () {
            function SingleImage() {
            }
            /**
              * 功能初始化
              * @param {Sting} value
              * @returns {String}
              */
            SingleImage.prototype.init = function () {
                var url = this.attrUrl();
                var me = this;
                if (url && typeof url == 'string') {
                    url = getServer() + '/' + url;
                    $.ajax({
                        url: url,
                        dataType: 'json',
                        type: 'get',
                        success: function (data) {
                            _data = data;
                            _render();
                        }, error: function (e) {
                            console.error(e);
                        }
                    });
                }
                else if (_data) {
                    _render();
                }
                else {
                    console.log('数据有误，请检查！');
                }
            };
            /**
              * 模板id
              * @param {Sting} value
              * @returns {String}
              */
            SingleImage.prototype.attrId = function (value) {
                value && _$wrapDom.attr("rxmid", value);
                return _$wrapDom.attr("rxmid");
            };
            /**
              * 模板id
              * @param {Sting} value
              * @returns {String}
              */
            SingleImage.prototype.attrTemplateId = function (value) {
                value && _$wrapDom.attr("rxmtemplate", value);
                return _$wrapDom.attr("rxmtemplate");
            };
            /**
              * 数据URL
              * @param {Sting} value
              * @returns {String}
              */
            SingleImage.prototype.attrUrl = function (value) {
                value && _$wrapDom.attr("rxmurl", value);
                return _$wrapDom.attr("rxmurl");
            };
            /**
              * 私有：渲染主方法
              * @param {Sting} value
              * @returns {String}
              */
            SingleImage.prototype.attrData = function (value) {
                value && (_data = value);
                return _data;
            };
            /**
             * 暴露扩展方法
             */
            SingleImage.prototype.bindTapEvent = function (args) {
                //绑定
                _$wrapDom.tap('.rxm-slider-item', { id: _id, cmdType: CMDTYPE, items: _data }, _triggerEvent);
                //相应组件ID
                args.id = _id;
                //将callback及ID关联到相应标识selector上面
                $(CMDTYPE).rxmBindCmd(args);
            };
            return SingleImage;
        }());
        return thisObj(_id, new SingleImage());
    };
    return ClassFactory;
});

define("RxmSlider", ["require", "exports", "RxmArtTemplate", "RxmPageBase", "RxmAppTool"], function (require, exports, ArtTemplate, PageBase, appTool) {
    "use strict";
    ///<amd-dependency path="RxmArtTemplate" name="ArtTemplate"/>
    /**
     * 引入类声明公共方法
     * @type {rxm.AppTool}
     * */
    var thisObj = appTool.thisObj;
    /**
     * 组件默认值
     * @type String
     */
    var clsdef = {
        id: 'rxm-slider',
        data: [],
        loop: true,
        fullScreen: true,
        rxmPath: 'RxmSlider'
    };
    /**
     * 激发方法
     * @type String
     */
    var _triggerEvent = function (e) {
        /**
         * @type {rxm.cmd.triggerArgs}
         */
        var a = {
            originalEvent: e,
            id: e.data.id
        };
        var cmdType = e.data.cmdType;
        delete e.data;
        $(cmdType).rxmTriggerCmd(a);
    };
    /**
     * 使用常量
     * @type String
     */
    var DATA_KEY = 'bs.rxm-slider';
    var EVENT_KEY = '.' + DATA_KEY;
    var Direction = {
        NEXT: 'next',
        PREV: 'prev',
        LEFT: 'left',
        RIGHT: 'right'
    };
    var Selector = {
        ACTIVE: '.active',
        ACTIVE_ITEM: '.active.rxm-slider-item',
        ITEM: '.rxm-slider-item',
        NEXT_PREV: '.rxm-slider-item-next, .rxm-slider-item-prev',
        INDICATORS: '.rxm-slider-indicators',
        DATA_SLIDE: '[data-slide], [data-slide-to]',
        DATA_RIDE: '[data-ride="rxm-slider"]' //预留
    };
    var ClassName = {
        SLIDER: 'rxm-slider',
        ACTIVE: 'active',
        SLIDE: 'slide',
        RIGHT: 'rxm-slider-item-right',
        LEFT: 'rxm-slider-item-left',
        NEXT: 'rxm-slider-item-next',
        PREV: 'rxm-slider-item-prev',
        ITEM: 'rxm-slider-item'
    };
    var Event = {
        SLIDE: 'slide' + EVENT_KEY,
        SLID: 'slid' + EVENT_KEY,
        KEYDOWN: 'keydown' + EVENT_KEY,
        MOUSEENTER: 'mouseenter' + EVENT_KEY,
        MOUSELEAVE: 'mouseleave' + EVENT_KEY,
        TOUCHEND: 'touchend' + EVENT_KEY,
        TRANSITION_END: 'transitionend' + EVENT_KEY
    };
    var MILLISECONDS_MULTIPLIER = 1000;
    var CMDTYPE = "rxmSliderCmd";
    /**
      * 激活过渡结束后事件
      * @param {Sting} value
      * @returns {String}
      */
    var _triggerTransitionEnd = function (element) {
        $(element).trigger(Event.TRANSITION_END);
    };
    /**
      * 获取过渡结束后事件
      * @param {Sting} value
      * @returns {String}
      */
    var _getSpecialTransitionEndEvent = function () {
        return {
            bindType: Event.TRANSITION_END,
            delegateType: Event.TRANSITION_END,
            handle: function handle(event) {
                if ($(event.target).is(this)) {
                    return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
                }
                return undefined; // eslint-disable-line no-undefined
            }
        };
    };
    /**
      * 过渡结束后执行函数
      * @param {Sting} value
      * @returns {String}
      */
    var _transitionEndEmulator = function (duration) {
        var _this = this;
        var called = false;
        $(this).one(Event.TRANSITION_END, function () {
            called = true;
        });
        setTimeout(function () {
            if (!called) {
                _triggerTransitionEnd(_this);
            }
        }, duration);
        return this;
    };
    /**
      * 样式变化结束后支持函数入口
      * @param {Sting} value
      * @returns {String}
      */
    var _setTransitionEndSupport = function () {
        $.fn.emulateTransitionEnd = _transitionEndEmulator;
        var jq = $;
        jq.event.special[Event.TRANSITION_END] = _getSpecialTransitionEndEvent();
    };
    /**
      * slider对象初始化等系列事件，待优化
      * @param {Sting} value
      * @returns {String}
      */
    var _sliderInterface = function (config) {
        return this.each(function () {
            //var data = $(this).data(DATA_KEY);
            var data = thisObj(this.id);
            var _config = _objectSpread({}, clsdef, $(this).data());
            if (typeof config === 'object') {
                _config = _objectSpread({}, _config, config);
            }
            var action = typeof config === 'string' ? config : _config.slide;
            //if (!data) {
            //data = new Carousel(this, _config);
            //$(this).data(DATA_KEY, data);
            //}
            if (typeof config === 'number') {
                data.to(config);
            }
            else if (typeof action === 'string') {
                if (typeof data[action] === 'undefined') {
                    throw new TypeError("No method named \"" + action + "\"");
                }
                data[action]();
            }
            else if (_config.interval) {
                data.pause();
                data.cycle();
            }
        });
    };
    /**
      * 导航及指示按钮点击回调入口
      * @param {Sting} value
      * @returns {String}
      */
    var _clickCallback = function (event) {
        //获取容器选择器
        var selector = _getSelectorFromElement(this);
        //异常处理
        if (!selector) {
            return;
        }
        var target = $(selector)[0];
        if (!target || !$(target).hasClass(ClassName.SLIDER)) {
            return;
        }
        var config = _objectSpread({}, $(target).data(), $(this).data());
        var slideIndex = this.getAttribute('data-slide-to');
        if (slideIndex) {
            config.interval = false;
        }
        _sliderInterface.call($(target), config);
        if (slideIndex) {
            thisObj(target.id)._to(slideIndex);
        }
        event.preventDefault();
    };
    /**
      * 工具方法-定义属性
      * @param {Sting} value
      * @returns {String}
      */
    var _defineProperty = function (obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        }
        else {
            obj[key] = value;
        }
        return obj;
    };
    /**
      * 工具方法-对象扩展，暂时不用$.extend，待定
      * @param {Sting} value
      * @returns {String}
      */
    var _objectSpread = function (target, a, b) {
        var _loop_1 = function () {
            source = arguments_1[i] != null ? arguments_1[i] : {};
            ownKeys = Object.keys(source);
            var Obj = Object;
            if (typeof Obj.getOwnPropertySymbols === 'function') {
                ownKeys = ownKeys.concat(Obj.getOwnPropertySymbols(source).filter(function (sym) {
                    return Obj.getOwnPropertyDescriptor(source, sym).enumerable;
                }));
            }
            ownKeys.forEach(function (key) {
                _defineProperty(target, key, source[key]);
            });
        };
        var arguments_1 = arguments, source, ownKeys;
        for (var i = 1; i < arguments.length; i++) {
            _loop_1();
        }
        return target;
    };
    /**
      * 获取元素选择器
      * @param {Sting} value
      * @returns {String}
      */
    var _getSelectorFromElement = function (element) {
        var selector = element.getAttribute('data-target');
        if (!selector || selector === '#') {
            selector = element.getAttribute('href') || '';
        }
        try {
            return document.querySelector(selector) ? selector : null;
        }
        catch (err) {
            return null;
        }
    };
    /**
     * @param  {rxm.slider.cnf} config
     */
    var ClassFactory = function (config) {
        //查找已有Slider实例，有则直接返回
        if (thisObj(_id)) {
            return thisObj(_id);
        }
        var _items = null;
        var _interval = null;
        var _activeElement = null;
        var _isSliding = null;
        var _config = $.extend(clsdef, config);
        var _id = _config.id;
        var _data = _config.data;
        var _$wrapDom = $('#' + _id);
        var _indicatorsElement = _$wrapDom[0].querySelector(Selector.INDICATORS);
        //组件渲染入口
        var _render = function () {
            /**@type {Slider} */
            var me = thisObj(_id);
            if (me.render)
                return me.render(_data);
            /**@type {Cls} */
            //用模板渲染页面HTML
            var sliderHTML = ArtTemplate(me.attrTemplateId(), { data: _data });
            $('#' + _id).find('.rxm-slider-inner').append(sliderHTML);
            //手势绑定
            me.detectSwipe();
            //初始化指示器
            me.initIndicator();
            //初始化导航和指示目标设定
            me.setTargetId();
            //clean active处理编辑器留下的active bug，默认应该为第一个active
            me.initImageActive();
            //是否显示标题
            //me.initTitle();
            //设置是否显示导航
            me.initNav();
            //过渡效果矫正
            _setTransitionEndSupport();
        };
        var Slider = /** @class */ (function () {
            function Slider() {
            }
            /**
             * 手势控制
             */
            Slider.prototype.detectSwipe = function () {
                var start;
                var end;
                var swiped;
                var me = this;
                $('#' + _id).bind('touchstart', function (e) {
                    var eori = e.originalEvent;
                    e.preventDefault();
                    var touch = eori.touches[0] || eori.changedTouches[0];
                    start = touch.pageX;
                });
                $('#' + _id).bind('touchend', function (e) {
                    var eori = e.originalEvent;
                    e.preventDefault();
                    var touch = eori.touches[0] || eori.changedTouches[0];
                    end = touch.pageX;
                    swiped = start - end;
                    if (swiped >= 30) {
                        me.prev();
                    }
                    else if (swiped <= -30) {
                        me.next();
                    }
                });
            };
            /**
              * 初始化active图片
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype.initImageActive = function () {
                _$wrapDom.find('.rxm-slider-item.active').removeClass('active');
                _$wrapDom.find('.rxm-slider-item').first().addClass('active');
            };
            /**
              * 初始化indicator
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype.initIndicator = function () {
                var imgNum = _$wrapDom.find('.rxm-slider-item').length;
                var liString = '';
                for (var i = 0; i < imgNum; i++) {
                    if (i == 0)
                        liString += '<li class="active" data-target="" data-slide-to="' + i + '"></li>';
                    else {
                        liString += '<li data-target="" data-slide-to="' + i + '"></li>';
                    }
                }
                _$wrapDom.find('.rxm-slider-indicators').append($(liString));
            };
            /**
              * 设置目标ID，讲导航和指示器锚定容器ID
              */
            Slider.prototype.setTargetId = function () {
                _$wrapDom.find('a').attr('href', '#' + _id);
                _$wrapDom.find('li').attr('data-target', '#' + _id);
            };
            /**
              * 初始化左右导航设置
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype.initNav = function () {
                if (this.attrIsNav() == 'on') {
                    _$wrapDom.find('.rxm-slider-control-prev, .rxm-slider-control-next').css('display', 'flex');
                }
                else if (this.attrIsNav() == 'off') {
                    _$wrapDom.find('.rxm-slider-control-prev, .rxm-slider-control-next').css('display', 'none');
                }
            };
            /**
              * 初始化标题设置
              * @param {Sting} value
              * @returns {String}
              */
            // initTitle  () {
            //   if( this.attrIsDisplayTitle() ){
            //     _$wrapDom.find('.rxm-single-image-title').css('display', 'block');
            //   }else if(  this.attrIsDisplayTitle() ) {
            //     _$wrapDom.find('.rxm-single-image-title').css('display', 'none');
            //   }
            // }
            /**
              * 功能初始化
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype.init = function () {
                var url = this.attrUrl();
                var me = this;
                if (url && typeof url == 'string') {
                    url = getServer() + '/' + url;
                    $.ajax({
                        url: url,
                        dataType: 'json',
                        type: 'get',
                        success: function (data) {
                            _data = data;
                            _render();
                        }, error: function (e) {
                            console.log('请确认滚动横幅服务地址！');
                            _render();
                        }
                    });
                }
                else if (_data) {
                    _render();
                }
                else {
                    console.log('数据有误，请检查！');
                }
            };
            /**
              * 向后翻页
              */
            Slider.prototype.next = function () {
                if (!_isSliding) {
                    this._slide(Direction.NEXT);
                }
            };
            /**
              * 向前翻页
              */
            Slider.prototype.prev = function () {
                if (!_isSliding) {
                    this._slide(Direction.PREV);
                }
            };
            /**
              * 滑动函数
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype._slide = function (direction, element) {
                var activeElement = _$wrapDom[0].querySelector(Selector.ACTIVE_ITEM);
                var activeElementIndex = this._getItemIndex(activeElement);
                var nextElement = element || activeElement &&
                    this._getItemByDirection(direction, activeElement);
                var nextElementIndex = this._getItemIndex(nextElement);
                var isCycling = Boolean(_interval);
                var directionalClassName;
                var orderClassName;
                var eventDirectionName;
                if (direction === Direction.NEXT) {
                    directionalClassName = ClassName.LEFT;
                    orderClassName = ClassName.NEXT;
                    eventDirectionName = Direction.LEFT;
                }
                else {
                    directionalClassName = ClassName.RIGHT;
                    orderClassName = ClassName.PREV;
                    eventDirectionName = Direction.RIGHT;
                }
                if (nextElement && $(nextElement).hasClass(ClassName.ACTIVE)) {
                    _isSliding = false;
                    return;
                }
                var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);
                if (slideEvent.isDefaultPrevented()) {
                    return;
                }
                if (!activeElement || !nextElement) {
                    // 处理特别异常
                    return;
                }
                _isSliding = true;
                if (isCycling) {
                    this.pause();
                }
                this._setActiveIndicatorElement(nextElement);
                var slidEvent = $.Event(Event.SLID, {
                    relatedTarget: nextElement,
                    direction: eventDirectionName,
                    from: activeElementIndex,
                    to: nextElementIndex
                });
                if (_$wrapDom.hasClass(ClassName.SLIDE)) {
                    $(nextElement).addClass(orderClassName);
                    //?
                    this._reflow(nextElement);
                    $(activeElement).addClass(directionalClassName);
                    $(nextElement).addClass(directionalClassName);
                    var transitionDuration = this._getTransitionDurationFromElement(activeElement);
                    $(activeElement)
                        .one(Event.TRANSITION_END, function () {
                        $(nextElement)
                            .removeClass(directionalClassName + ' ' + orderClassName)
                            .addClass(ClassName.ACTIVE);
                        var actv = activeElement;
                        $(actv).removeClass(ClassName.ACTIVE + ' ' + orderClassName + ' ' + directionalClassName);
                        _isSliding = false;
                        setTimeout(function () {
                            return $(_$wrapDom[0]).trigger(slidEvent);
                        }, 0);
                    })
                        .emulateTransitionEnd(transitionDuration);
                }
                else {
                    $(activeElement).removeClass(ClassName.ACTIVE);
                    $(nextElement).addClass(ClassName.ACTIVE);
                    _isSliding = false;
                    var _this = this;
                    $(_this._element).trigger(slidEvent);
                }
                // if (isCycling) {
                //   this.cycle()
                // }
            };
            /**
              * 直接跳转
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype._to = function (index) {
                var _this = this;
                _activeElement = _$wrapDom[0].querySelector(Selector.ACTIVE_ITEM);
                var activeIndex = this._getItemIndex(_activeElement);
                if (index > _items.length - 1 || index < 0) {
                    return;
                }
                if (_isSliding) {
                    $(_$wrapDom[0]).one(Event.SLID, function () {
                        return _this._to(index);
                    });
                    return;
                }
                if (activeIndex === index) {
                    this.pause();
                    this.cycle();
                    return;
                }
                var direction = index > activeIndex ? Direction.NEXT : Direction.PREV;
                this._slide(direction, _items[index]);
            };
            ;
            /**
              * 重新流布局
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype._reflow = function (element) {
                return element.offsetHeight;
            };
            /**
              * 获取元素的TransitionDuration
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype._getTransitionDurationFromElement = function (element) {
                if (!element) {
                    return 0;
                }
                // 获取元素的transition-duration
                var transitionDuration = $(element).css('transition-duration');
                var floatTransitionDuration = parseFloat(transitionDuration);
                // 如果元素或transition duration没有找到，返回0
                if (!floatTransitionDuration) {
                    return 0;
                }
                // 如果定义了多个durations，取第一个
                transitionDuration = transitionDuration.split(',')[0];
                return parseFloat(transitionDuration) * MILLISECONDS_MULTIPLIER;
            };
            /**
              * 获取横幅索引顺序
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype._getItemIndex = function (element) {
                _items = element && element.parentNode
                    ? [].slice.call(element.parentNode.querySelectorAll(Selector.ITEM))
                    : [];
                return _items.indexOf(element);
            };
            /**
              * 通过滑动方向，获取下一个横幅
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype._getItemByDirection = function (direction, activeElement) {
                var isNextDirection = direction === Direction.NEXT;
                var isPrevDirection = direction === Direction.PREV;
                var activeIndex = this._getItemIndex(activeElement);
                var lastItemIndex = _items.length - 1;
                var isGoingToWrap = isPrevDirection && activeIndex === 0 ||
                    isNextDirection && activeIndex === lastItemIndex;
                //?
                if (isGoingToWrap && !_config.loop) {
                    return activeElement;
                }
                var delta = direction === Direction.PREV ? -1 : 1;
                var itemIndex = (activeIndex + delta) % _items.length;
                return itemIndex === -1
                    ? _items[_items.length - 1] : _items[itemIndex];
            };
            /**
              * 设置下一个active的横幅
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype._setActiveIndicatorElement = function (element) {
                _indicatorsElement = _$wrapDom[0].querySelector(Selector.INDICATORS);
                if (_indicatorsElement) {
                    var indicators = [].slice.call(_indicatorsElement.querySelectorAll(Selector.ACTIVE));
                    $(indicators)
                        .removeClass(ClassName.ACTIVE);
                    var nextIndicator = _indicatorsElement.children[this._getItemIndex(element)];
                    if (nextIndicator) {
                        $(nextIndicator).addClass(ClassName.ACTIVE);
                    }
                }
            };
            /**
              * 触发滑动事件
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype._triggerSlideEvent = function (relatedTarget, eventDirectionName) {
                var targetIndex = this._getItemIndex(relatedTarget);
                var fromIndex = this._getItemIndex(_$wrapDom[0].querySelector(Selector.ACTIVE_ITEM));
                var slideEvent = $.Event(Event.SLIDE, {
                    relatedTarget: relatedTarget,
                    direction: eventDirectionName,
                    from: fromIndex,
                    to: targetIndex
                });
                $(_$wrapDom[0]).trigger(slideEvent);
                return slideEvent;
            };
            /**
              * 是否开启导航属性
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype.attrIsNav = function () {
                return _$wrapDom.attr("rxmisnav");
            };
            /**
              * 是否显示标题
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype.attrIsDisplayTitle = function (value) {
                return _$wrapDom.attr("rxmisDisplayTitle");
            };
            /**
              * 容器id
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype.attrId = function () {
                return _$wrapDom.attr("rxmid");
            };
            /**
              * 模板id
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype.attrTemplateId = function () {
                return _$wrapDom.attr("rxmtemplate");
            };
            /**
              * 数据URL
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype.attrUrl = function () {
                return _$wrapDom.attr("rxmurl");
            };
            /**
              * 获取数据
              * @param {Sting} value
              * @returns {String}
              */
            Slider.prototype.attrData = function (value) {
                value && (_data = value);
                return _data;
            };
            /**
             * 暴露扩展方法
             * @param {rxm.iconlist.bindTapIcon} args
             */
            Slider.prototype.bindTapEvent = function (args) {
                //绑定
                _$wrapDom.tap('.rxm-slider-item', { id: _id, cmdType: CMDTYPE, items: _data }, _triggerEvent);
                //相应组件ID
                args.id = _id;
                //将callback及ID关联到相应标识selector上面
                $(CMDTYPE).rxmBindCmd(args);
            };
            //
            Slider.prototype.pause = function () {
            };
            Slider.prototype.cycle = function () {
            };
            return Slider;
        }());
        var ret = thisObj(_id, new Slider());
        PageBase.bindPageReady({ callback: $.proxy(ret.init, ret), one: false });
        return ret;
    };
    //重要，事件绑定主方法
    $(document.body).tap(Selector.DATA_SLIDE, function () {
        //获取容器选择器
        var selector = _getSelectorFromElement(this);
        //异常处理
        if (!selector) {
            return;
        }
        var target = $(selector)[0];
        if (!target || !$(target).hasClass(ClassName.SLIDER)) {
            return;
        }
        var config = _objectSpread({}, $(target).data(), $(this).data());
        var slideIndex = this.getAttribute('data-slide-to');
        if (slideIndex) {
            config.interval = false;
        }
        _sliderInterface.call($(target), config);
        if (slideIndex) {
            thisObj(target.id)._to(slideIndex);
        }
        var evnt = event;
        evnt.preventDefault();
    });
    return ClassFactory;
});

define("RxmTree", ["require", "exports", "RxmAppTool", "ZTree", "css!ZTreeCss"], function (require, exports, appTool) {
    "use strict";
    var clsdef = {
        rxmPath: 'RxmTree',
        clsName: 'rxm-tree-wdgt',
        juryFn: 'rxmTreeWdgt'
    };
    /**获得tree对象本身，这么做是为了防止聂村泄露 以前都是放在链表中或者 thisObj */
    var soleThisObj = appTool.thisObj;
    var settingDefault = {
        treeId: "",
        async: {
            enable: false,
            url: "",
            otherParam: "",
            type: "post"
        },
        check: {
            chkboxType: { "Y": "ps", "N": "ps" },
            enable: false
        },
        data: {
            key: {
                name: ""
            },
            simpleData: {
                enable: true,
                idKey: "id",
                pIdKey: "pId",
                rootPId: null
            }
        },
        isNodeOpen: true
    };
    /**
     * 获取ztree  Node  节点的
     * @param {Object} node
     * @returns  {Object}
     */
    var _toPlainNode = function (node) {
        var ret;
        if (node) {
            ret = JSON.parse(JSON.stringify(node));
            var zTreeNodeKey = ['check_Child_State', 'check_Focus', 'checked',
                'checkedOld', 'chkDisabled', 'editNameFlag', 'isAjaxing',
                'isFirstNode', 'isHover', 'isLastNode', 'isParent', 'level', 'halfCheck',
                'isAjaxing', 'isFirstNode', 'isHover', 'isLastNode', 'isParent', 'level',
                'nocheck', 'open', 'tId', 'type', 'zAsync',
                /**function */
                'getCheckStatus', 'getNextNode', 'getParentNode', 'getPreNode'
            ];
            for (var i = 0; i < zTreeNodeKey.length; i++) {
                ret[zTreeNodeKey[i]] = undefined;
            }
            ret = $.extend(true, {}, ret);
        }
        return ret;
    };
    /**
     *
     * @param {rxm.tree.config} config
     */
    var ClsFactory = function (config) {
        var _id = config.id || config.treeId;
        // if (!_id || ($('#' + _id).length == 0)&&$('[rxmtreeid=' + _id + ']').length == 0) {
        //   console.error('id is needed by rxmTree ')
        //   return 
        // }
        if (soleThisObj(_id))
            return soleThisObj(_id);
        /** 初始化setting值
         * @type  {rxm.tree.config} */
        var _setting = $.extend(true, {}, settingDefault, cssOrm.default.rxmTreeSettingDefault, config);
        //每次都要提交的数据
        var _dataRequestEverytime = {};
        var _defaultUrl = '';
        _setting.treeId = _id;
        var treeObj;
        /**
         * reload成功毁掉函数
         * @param {Object} data
         */
        var _loadOK = function (data) {
            var dt = data;
            /**@type {rxm.tree.loadArgsExt|JQueryAjaxSettings} */
            var ths = this;
            var thsObj = soleThisObj(_id);
            ths._success && (ths._success(data));
            /**有全局的format */
            //thsObj.rxmLoadFormat && $.isFunction(thsObj.rxmLoadFormat) && (data = thsObj.rxmLoadFormat(data))
            /**有针对数据load的format */
            // if (ths.rxmLoadFormat) {
            //   if ($.isFunction(ths.rxmLoadFormat)) { dt = ths.rxmLoadFormat(data) } else
            //     if ($.isString(ths.rxmLoadFormat) && $.isFunction(thsObj[ths.rxmLoadFormat])) {
            //       dt = thsObj[ths.rxmLoadFormat](data)
            //     }
            // }
            if (ths.rxmLoadAppend) {
                thsObj.addNodes(dt);
            }
            else {
                _createTree(dt);
                $('RxmCreateTreeOk').rxmTriggerCmd({ data: { op: 'create' }, id: _id });
            }
        };
        var _loadError = function (data) {
            /**@type {rxm.tree.loadArgsExt|JQueryAjaxSettings} */
            var ths = this;
            var rqr = window;
            var page = rqr.require('RxmPageBase');
            page.alert('数据查询出错');
        };
        var _createTree = function (data) {
            if (treeObj) {
                treeObj.destroy();
            }
            treeObj = $.fn.zTree.init($('#' + _id), _setting, data);
            $('RxmCreateTreeOk').rxmTriggerCmd({ data: treeObj });
            if (_setting && _setting.isNodeOpen) {
                treeObj.expandAll(true);
            }
        };
        /**rxm 树对象
           * @class
           * @constructor
           *
           */
        var RxmTreeImpl = /** @class */ (function () {
            function RxmTreeImpl() {
            }
            /**
             * 获取选中的节点  返回被添加数据clone
             * @param {rxm.tree.RxmTreeAddNodesArgs}  args
             * @returns  {Array.<Object>}
             */
            RxmTreeImpl.prototype.getCheckedNodes = function (args) {
                return treeObj.getCheckedNodes(true);
            };
            /**
             * 添加节点  返回被添加数据clone
         
             */
            RxmTreeImpl.prototype.addNodes = function (args) {
                treeObj.addNodes(args);
            };
            /**
             * 获取全部的节点数据
             */
            RxmTreeImpl.prototype.getNodes = function () {
                var r;
                r = treeObj.getNodes();
                return r;
            };
            /**
           * 获取全部被选择的数据
           */
            RxmTreeImpl.prototype.getSelectedNodes = function () {
                return treeObj.getSelectedNodes();
            };
            /**
             * 删除节点
             * @param {Object} node
             * @param {Boolean} callbackFlag
             */
            RxmTreeImpl.prototype.removeNode = function (node, callbackFlag) {
                treeObj.removeNode(node, callbackFlag);
            };
            /**
             * 更新节点数据
             * @param {Object} node  json对象
            
             */
            RxmTreeImpl.prototype.updateNode = function (node, checkTypeFlag) {
                treeObj.updateNode(node, checkTypeFlag);
            };
            /**
             * 初始化函数
             * @param {rxm.tree.initArg} args
             */
            RxmTreeImpl.prototype.init = function (args) {
                // args.settingcfg && ($.extend(true, _setting, args.settingcfg))
                //treeObj = $.fn.tree.init($('#' + _id), _setting, args.treeData)
                //初始化可视化设置的属性
                this._initEditTreeAttr();
            };
            RxmTreeImpl.prototype.reload = function (ajaxParam, setting) {
                setting && $.extend(true, _setting, setting);
                if (treeObj) {
                    treeObj.destroy();
                }
                if ($.isArray(ajaxParam)) {
                }
                else {
                    var ajaxArgs = $.extend(true, { data: _dataRequestEverytime, url: _defaultUrl }, ajaxParam);
                    ajaxParam && $.isString(ajaxParam.url) && ajaxParam.url.length > 3 && (_defaultUrl = ajaxParam.url);
                    if (ajaxArgs.url.length > 3) {
                        ajaxArgs._error = ajaxArgs.error;
                        ajaxArgs._success = ajaxArgs.success;
                        ajaxArgs.success = _loadOK;
                        ajaxArgs.error = _loadError;
                        $.ajax(ajaxArgs);
                    }
                }
            };
            // editName (node){}
            RxmTreeImpl.prototype.expandAll = function (expandFlag) {
                treeObj && treeObj.expandAll(expandFlag);
                return true;
            };
            /**
             * 将 zTree node 节点数据  转变为用户数据
         
            */
            RxmTreeImpl.prototype.toPlainNodes = function (nodes) {
                var ret = [];
                if ($.isArray(nodes)) {
                    for (var i = 0; nodes.length; i++) {
                        ret.push(_toPlainNode(nodes[i]));
                    }
                }
                else {
                    ret = _toPlainNode(nodes);
                }
                return ret;
            };
            /**
             * 获取 被选择的节点数据，返回值为 用户输入数据格式 plainObject
             * @return  {Array.<Object>}
             */
            RxmTreeImpl.prototype.getPlainSelectedNodes = function () {
                return this.toPlainNodes(treeObj.getSelectedNodes());
            };
            /**
             * 获取 被checked的节点数据，返回值为 用户输入数据格式 plainObject
             * @return  {Array.<Object>}
             */
            RxmTreeImpl.prototype.getPlainCheckedNodes = function () {
                return this.toPlainNodes(treeObj.getCheckedNodes());
            };
            // expandNode (node, expandFlag, sonSign, focus, callbackFlag){}
            /**销毁树 */
            RxmTreeImpl.prototype.destroy = function () { treeObj.destroy(); };
            /**
             * Reload 函数执行成功
             * @param {rxm.cmd.bindArgs |{bindWinId:'',triggerWinId:''}} args
             */
            RxmTreeImpl.prototype.bindReloadOk = function (args) {
                args.id = _id;
                $('RxmCreateTreeOk').rxmBindCmd(args);
            };
            RxmTreeImpl.prototype.getZTreeObj = function () { return treeObj; };
            RxmTreeImpl.prototype.setDataForEveryReload = function (d) {
                !d && (_dataRequestEverytime = {});
                !!d && (_dataRequestEverytime = $.extend(true, _dataRequestEverytime, d));
            };
            RxmTreeImpl.prototype.setUrl = function (url) {
                _defaultUrl = url;
            };
            RxmTreeImpl.prototype.selectNode = function (treeNode, addFlag, isSilent) {
                return treeObj.selectNode(treeNode, addFlag, isSilent);
            };
            RxmTreeImpl.prototype._initEditTreeAttr = function () {
                if ($('#' + _id).hasClass('rxm-tree')) {
                    var $wrap = $('#' + _id);
                    //获取可视化编辑器中设置的属性
                    //var treeid = $wrap.attr('rxmtreeid')
                    var url = $wrap.attr('rxmurl');
                    var params = $wrap.attr('rxmparams');
                    try {
                        params = JSON.parse(params);
                        _dataRequestEverytime = params;
                    }
                    catch (e) {
                    }
                    var idKey = $wrap.attr('rxmidkey');
                    var pIdKey = $wrap.attr('rxmpidkey');
                    var nameKey = $wrap.attr('rxmnamekey');
                    var isCheckBox = $wrap.attr('rxmischeckbox') == 'true' ? true : false;
                    var checkep = $wrap.attr('checkep') == 'true' ? true : false;
                    var checkes = $wrap.attr('checkes') == 'true' ? true : false;
                    var cancelep = $wrap.attr('cancelep') == 'true' ? true : false;
                    var canceles = $wrap.attr('canceles') == 'true' ? true : false;
                    var isNodeOpen = $wrap.attr('rxmisnodeopen') == 'true' ? true : false;
                    var rootPId = $wrap.attr('rxmrootpid') == 'true' ? true : false;
                    var checkStr = '';
                    var cancelStr = '';
                    if (checkep) {
                        checkStr += 'p';
                    }
                    if (checkes) {
                        checkStr += 's';
                    }
                    if (cancelep) {
                        cancelStr += 'p';
                    }
                    if (canceles) {
                        cancelStr += 's';
                    }
                    var editAjaxParam = {
                        url: url,
                        data: params
                    };
                    var editSettings = {
                        id: _id,
                        check: {
                            chkboxType: { "Y": checkStr, "N": cancelStr },
                            enable: isCheckBox
                        },
                        data: {
                            key: {
                                name: nameKey
                            },
                            simpleData: {
                                enable: true,
                                idKey: idKey,
                                pIdKey: pIdKey,
                                rootPId: rootPId
                            }
                        },
                        isNodeOpen: isNodeOpen
                    };
                    this.reload(editAjaxParam, editSettings);
                }
                else { //不使用可视化创建的页面
                    if (!!_setting && _setting.async && !!_setting.async.otherParam) {
                        if ($.isArray(_setting.async.otherParam)) { //处理数组参数
                            var tmp = {};
                            for (var i = 0; i < _setting.async.otherParam.length - 1; i = i + 2) {
                                tmp[_setting.async.otherParam[i]] = _setting.async.otherParam[i + 1];
                            }
                            _setting.async.data = tmp;
                        }
                        else { //处理对象参数
                            _setting.async.data = _setting.async.otherParam;
                        }
                    }
                    this.reload(_setting.async);
                }
            };
            return RxmTreeImpl;
        }());
        var ret = new RxmTreeImpl();
        $('#' + _id).data(clsdef.clsName, ret);
        var rqr = window;
        rqr.require('RxmPageBase').bindPageReady({ callback: $.proxy(ret.init, ret), one: true });
        return ret;
    };
    return ClsFactory;
});

define("RxmDisplayVideo", ["require", "exports", "RxmAppTool"], function (require, exports, appTool) {
    "use strict";
    // 控件名称：rxmdk-show-video-player rxmdk-show-video-player
    // 控件说明：视频播放控件
    // 创建时间：Aug 2, 2017 10:01:20 AM
    // 创建人：王欢
    var clsdef = {
        rxmPath: 'RxmDisplayVideo',
        clsName: 'rxm-display-video',
    };
    var _msgEnum = {
        /// <summary>开始</summary>
        started: 'started',
        /// <summary>单击player</summary>
        tapInPlayer: 'tapInPlayer',
        /// <summary>重启</summary>
        reset: 'reset',
        /// <summary>加载进程</summary>
        loadProgress: 'loadProgress',
        /// <summary>暂停事件</summary>
        paused: 'paused',
        /// <summary>停止</summary>
        stopped: 'stopped',
        /// <summary>设置音量</summary>
        setVolume: 'setVolume',
        /// <summary>静音</summary>
        volumeMute: 'volumeMute',
        /// <summary>全屏</summary>
        fullScreen: 'fullScreen'
    };
    var clsFactory = function (config) {
        var videoUrl;
        var thumbnail;
        var floatWidgetUrl;
        var spotsVideoUrl;
        var fetchVideoListUrl;
        var _cfgDefault = {};
        var _cfg;
        //cls.rxmtype = 'rxmdk-show-video-player'
        var dcfg = _cfgDefault;
        var ucfg = cssOrm.default.clsShowVideoPlayer || {};
        ucfg = ucfg.cfg;
        _cfg = $.extend(true, {}, dcfg, ucfg, config);
        if (typeof _cfg.id !== 'undefined') {
            _cfg.$cls = $('#' + _cfg.id);
        }
        var _id = _cfg.id;
        var _leaveTime = 0;
        var $wrap = $('#' + _id);
        var totalWidth = $wrap.find('.som-progress-ctrl').width();
        var _iWidth = $wrap.find('.som-progress-ctrl').find('i').width();
        var _mouseTag = true;
        function formatTime(seconds) {
            return [
                parseInt(seconds) / 60 / 60,
                parseInt(seconds) / 60 % 60,
                parseInt(seconds) % 60
            ]
                .join(':')
                .replace(/\b(\d)\b/g, '0$1');
        }
        var RxmDisplayVideoImpl = /** @class */ (function () {
            function RxmDisplayVideoImpl() {
            }
            /// <summary>rxmdk-show-video-player控件事件枚举对象</summary>
            /// <summary>重新加载音频/视频元素</summary>
            RxmDisplayVideoImpl.prototype.load = function () {
            };
            // 绑定事件
            RxmDisplayVideoImpl.prototype.initEvent = function () {
                // 绑定开始按钮事件
                $('#' + _id).find('.som-start-ctrl').find('.fa-play').on('click', cssOrm.hitch(this._tapStart, this));
                this.bindStarted();
                // 绑定停止按钮事件
                $('#' + _id).find('.som-start-ctrl').find('.fa-pause').on('click', cssOrm.hitch(this._tapPause, this));
                this.bindPaused();
                // 绑定进度条点击事件
                $('#' + _id).find('.som-progress-ctrl').on('click', cssOrm.hitch(this._tapProgress, this));
                this.bindLoadProgress();
                // 绑定音量调节事件
                $('#' + _id).find('.som-volume-set').on('click', cssOrm.hitch(this._tapVolume, this));
                this.bindSetVolume();
                // 绑定静音事件
                $('#' + _id).find('.som-volume-ctrl').children('i').on('click', cssOrm.hitch(this._tabVolumeMute, this));
                this.bindVolumeMute();
                // 绑定屏幕缩放事件
                $('#' + _id).find('.som-screen-ctrl').on('click', cssOrm.hitch(this._tapFullScreen, this));
                this.bindFullScreen();
                // 设置音量按钮位置
                this.setProgressAndVolumeButton();
                // 绑定鼠标移出事件
                $('#' + _id).on('mouseleave', cssOrm.hitch(this._mouseLeaveEvent, this));
                // 绑定鼠标移入事件
                $('#' + _id).on('mouseenter', cssOrm.hitch(this._mouseEnterEvent, this));
                // 触屏进入
                $('#' + _id).on('touchEnter', cssOrm.hitch(this._mouseEnterEvent, this));
                // 触屏离开
                $('#' + _id).on('touchLeave', cssOrm.hitch(this._mouseLeaveEvent, this));
            };
            // 点击start的事件
            RxmDisplayVideoImpl.prototype._tapStart = function (e, data) {
                // 显示video总时间方法
                this.showVideoTotalTime();
                $wrap.trigger(_msgEnum.started);
            };
            // 点击pause的事件
            RxmDisplayVideoImpl.prototype._tapPause = function (e, data) {
                $wrap.trigger(_msgEnum.paused);
            };
            // 点击进度条事件
            RxmDisplayVideoImpl.prototype._tapProgress = function (e, data) {
                var currentX = e.pageX;
                $wrap.trigger(_msgEnum.loadProgress, currentX);
            };
            // 点击音量调节事件
            RxmDisplayVideoImpl.prototype._tapVolume = function (e, data) {
                var currentX = e.offsetX;
                $wrap.trigger(_msgEnum.setVolume, currentX);
            };
            // 点击静音事件
            RxmDisplayVideoImpl.prototype._tabVolumeMute = function (e, data) {
                $wrap.trigger(_msgEnum.volumeMute);
            };
            // 点击全屏按钮事件
            RxmDisplayVideoImpl.prototype._tapFullScreen = function () {
                $wrap.trigger(_msgEnum.fullScreen);
            };
            // 鼠标离开视频区域事件
            RxmDisplayVideoImpl.prototype._mouseLeaveEvent = function () {
                var the = this;
                _mouseTag = false;
                setTimeout(function () {
                    if (_leaveTime > 2) {
                        $wrap.find('.som-video-ctrl').css('display', 'none');
                        return;
                    }
                    if (!_mouseTag) {
                        _leaveTime += 1;
                        the._mouseLeaveEvent();
                    }
                }, 1000);
            };
            // 鼠标进入视频区域事件
            RxmDisplayVideoImpl.prototype._mouseEnterEvent = function () {
                _leaveTime = 0;
                _mouseTag = true;
                $wrap.find('.som-video-ctrl').css('display', '');
            };
            // 组件被调用时 获取当前组件的html
            RxmDisplayVideoImpl.prototype.getWrap = function (html) {
                if (html) {
                    $wrap = $(html);
                    if (typeof _cfg.id !== 'undefined') {
                        $wrap = $('#' + _cfg.id);
                    }
                    else {
                        $wrap = $('#' + appTool.unid());
                    }
                }
                return $wrap.get(0).outerHTML;
            };
            // 设置按钮位置
            RxmDisplayVideoImpl.prototype.setProgressAndVolumeButton = function () {
                var width = $('#' + _id).find('.som-volume-set').width();
                var iconWidth = $('#' + _id).find('.som-volume-set').find('i').width();
                $('#' + _id).find('.som-volume-set').find('i').css('margin-left', width - iconWidth + 'px');
                width = $('#' + _id).find('.som-progress-ctrl').width();
                iconWidth = $('#' + _id).find('.som-progress-ctrl').find('i').width();
                $('#' + _id).find('.som-progress-ctrl').find('i').css('margin-left', -iconWidth + 'px');
                $('#' + _id).find('.som-start-ctrl').find('.fa-play').css('display', '');
                $('#' + _id).find('.som-start-strl').find('.fa-pause').css('display', 'none');
            };
            /// <summary>开始播放音频/视频</summary>
            RxmDisplayVideoImpl.prototype.play = function () {
                if ($wrap.find('video') != null && $wrap.find('video').length != 0) {
                    var video = $wrap.find('video')[0];
                    video.play();
                    $wrap.find('.som-start-ctrl').find('.fa-play').css('display', 'none');
                    $wrap.find('.som-start-ctrl').find('.fa-pause').css('display', '');
                    // 播放
                    video.play();
                    // 计时
                    this.bindSetProgressTime(true);
                    // 隐藏浮动窗口
                    $wrap.find('.rxmdk-video-float-ctrl').css('display', 'none');
                }
            };
            /// <summary>暂停当前播放的音频/视频</summary>
            RxmDisplayVideoImpl.prototype.pause = function () {
                if ($wrap.find('video') != null && $wrap.find('video').length != 0) {
                    $wrap.find('.som-start-ctrl').find('.fa-pause').css('display', 'none');
                    $wrap.find('.som-start-ctrl').find('.fa-play').css('display', '');
                    var video = $wrap.find('video')[0];
                    // 停止
                    video.pause();
                    // 停止计时
                    this.bindSetProgressTime(false);
                    // 判定是否有浮动窗口需要展示
                    var content = $wrap.find('.rxmdk-video-float-ctrl').html();
                    if (content != null && content.length != 0) {
                        $wrap.find('.rxmdk-video-float-ctrl').css('display', '');
                    }
                }
            };
            /// <summary>开始事件绑定</summary>
            RxmDisplayVideoImpl.prototype.bindStarted = function (arg, scope) {
                if (typeof arg === 'boolean' || typeof arg === 'undefined') {
                    arg = {
                        fn: this._onStarted
                    };
                    scope = this;
                }
                var the = this;
                if ($.isExist(scope)) {
                    the = scope;
                }
                $wrap.on(_msgEnum.started, arg.data, cssOrm.hitch(arg.fn, the), arg.one);
            };
            /// <summary>开始激发函数</summary>
            RxmDisplayVideoImpl.prototype._onStarted = function () {
                /// TODO
                if ($wrap.find('video') != null && $wrap.find('video').length != 0) {
                    var video = $wrap.find('video')[0];
                    video.controls = false;
                    $wrap.find('.som-start-ctrl').find('.fa-play').css('display', 'none');
                    $wrap.find('.som-start-ctrl').find('.fa-pause').css('display', '');
                    // 播放
                    video.play();
                    // 计时
                    this.bindSetProgressTime(true);
                    // 隐藏浮动窗口
                    $wrap.find('.rxmdk-video-float-ctrl').css('display', 'none');
                }
            };
            // 计时显示控制
            RxmDisplayVideoImpl.prototype.bindSetProgressTime = function (tag) {
                var the = this;
                var cTime;
                if (tag) {
                    cTime = setTimeout(function () {
                        var video = $wrap.find('video')[0];
                        var currentTime = video.currentTime;
                        // 显示浮标位置
                        var duration = video.duration;
                        if (currentTime == duration) {
                            the._onReset();
                            return;
                        }
                        var currentLocation = currentTime * totalWidth / duration;
                        $wrap.find('.som-progress-ctrl').find('i').css('margin-left', currentLocation - _iWidth + 'px');
                        // 显示当前时间
                        currentTime = formatTime(currentTime);
                        $wrap.find('.som-currentTime-ctrl').text(currentTime);
                        if ($wrap.find('.som-start-ctrl').find('.fa-play').css('display') == 'none') {
                            the.bindSetProgressTime(true);
                        }
                        else {
                            the.bindSetProgressTime(false);
                        }
                    }, 500);
                }
                else {
                    clearTimeout(cTime);
                }
            };
            // 设定视频总时间
            RxmDisplayVideoImpl.prototype.showVideoTotalTime = function () {
                if ($wrap.find('video') != null && $wrap.find('video').length != 0) {
                    var video = $wrap.find('video')[0];
                    var duration = video.duration;
                    if (!isNaN(duration)) {
                        $wrap.find('.som-totalTime-ctrl').text(formatTime(duration));
                    }
                }
            };
            /// <summary>开始事件绑定</summary>
            RxmDisplayVideoImpl.prototype.bindFullScreen = function (arg, scope) {
                if (typeof arg === 'boolean' || typeof arg === 'undefined') {
                    arg = {
                        fn: this._onFullScreen
                    };
                    scope = this;
                }
                var the = this;
                if ($.isExist(scope)) {
                    the = scope;
                }
                $wrap.on(_msgEnum.fullScreen, arg.data, cssOrm.hitch(arg.fn, the), arg.one);
            };
            // 全屏播放视频
            RxmDisplayVideoImpl.prototype._onFullScreen = function () {
                if ($wrap.find('video') != null && $wrap.find('video').length != 0) {
                    var video = $wrap.find('video')[0];
                    this.autoFullScrenn(video);
                }
            };
            /// <summary>单击player事件绑定</summary>
            RxmDisplayVideoImpl.prototype.bindTapInPlayer = function (arg, scope) {
                if (typeof arg === 'boolean' || typeof arg === 'undefined') {
                    arg = {
                        fn: this._onTapInPlayer
                    };
                    scope = this;
                }
                var the = this;
                if ($.isExist(scope)) {
                    the = scope;
                }
                $wrap.on(_msgEnum.tapInPlayer, arg.data, cssOrm.hitch(arg.fn, the), arg.one);
            };
            /// <summary>单击player激发函数</summary>
            RxmDisplayVideoImpl.prototype._onTapInPlayer = function () {
                /// TODO
            };
            /// <summary>重启事件绑定</summary>
            RxmDisplayVideoImpl.prototype.bindReset = function (arg, scope) {
                if (typeof arg === 'boolean' || typeof arg === 'undefined') {
                    arg = {
                        fn: this._onReset
                    };
                    scope = this;
                }
                var the = this;
                if ($.isExist(scope)) {
                    the = scope;
                }
                $wrap.on(_msgEnum.reset, arg.data, cssOrm.hitch(arg.fn, the), arg.one);
            };
            /// <summary>重启激发函数</summary>
            RxmDisplayVideoImpl.prototype._onReset = function () {
                /// TODO
                if ($wrap.find('video') != null && $wrap.find('video').length != 0) {
                    var video = $wrap.find('video')[0];
                    video.currentTime = 0;
                    this._onStarted();
                }
            };
            /// <summary>加载进程事件绑定</summary>
            RxmDisplayVideoImpl.prototype.bindLoadProgress = function (arg, scope) {
                if (typeof arg === 'boolean' || typeof arg === 'undefined') {
                    arg = {
                        fn: this._onLoadProgress
                    };
                    scope = this;
                }
                var the = this;
                if ($.isExist(scope)) {
                    the = scope;
                }
                $wrap.on(_msgEnum.loadProgress, arg.data, cssOrm.hitch(arg.fn, the), arg.one);
            };
            /// <summary>加载进程激发函数</summary>
            RxmDisplayVideoImpl.prototype._onLoadProgress = function (e, currentX) {
                /// TODO
                if ($wrap.find('video') != null && $wrap.find('video').length != 0) {
                    var length = $wrap.find('.som-progress-ctrl').width();
                    var percent = currentX / length;
                    var video = $wrap.find('video')[0];
                    var duration = video.duration;
                    var currentTime = duration * currentX / length;
                    video.currentTime = currentTime;
                    //var iWidth = $wrap.find('.som-progress-ctrl').find('i').width()
                    $wrap.find('.som-progress-ctrl').find('i').css('margin-left', currentX - _iWidth + 'px');
                }
            };
            /// <summary>暂停事件事件绑定</summary>
            RxmDisplayVideoImpl.prototype.bindPaused = function (arg, scope) {
                if (typeof arg === 'boolean' || typeof arg === 'undefined') {
                    arg = {
                        fn: this._onPaused
                    };
                    scope = this;
                }
                var the = this;
                if ($.isExist(scope)) {
                    the = scope;
                }
                $wrap.on(_msgEnum.paused, arg.data, cssOrm.hitch(arg.fn, the), arg.one);
            };
            /// <summary>暂停事件激发函数</summary>
            RxmDisplayVideoImpl.prototype._onPaused = function () {
                /// TODO
                if ($wrap.find('video') != null && $wrap.find('video').length != 0) {
                    $wrap.find('.som-start-ctrl').find('.fa-pause').css('display', 'none');
                    $wrap.find('.som-start-ctrl').find('.fa-play').css('display', '');
                    var video = $wrap.find('video')[0];
                    // 停止
                    video.pause();
                    // 停止计时
                    this.bindSetProgressTime(false);
                    // 判定是否有浮动窗口需要展示
                    var content = $wrap.find('.rxmdk-video-float-ctrl').html();
                    if (content != null && content.length != 0) {
                        $wrap.find('.rxmdk-video-float-ctrl').css('display', '');
                    }
                }
            };
            /// <summary>停止事件绑定</summary>
            RxmDisplayVideoImpl.prototype.bindStopped = function (arg, scope) {
                if (typeof arg === 'boolean' || typeof arg === 'undefined') {
                    arg = {
                        fn: this._onStopped
                    };
                    scope = this;
                }
                var the = this;
                if ($.isExist(scope)) {
                    the = scope;
                }
                $wrap.on(_msgEnum.stopped, arg.data, cssOrm.hitch(arg.fn, the), arg.one);
            };
            /// <summary>停止激发函数</summary>
            RxmDisplayVideoImpl.prototype._onStopped = function () {
                /// TODO
                if ($wrap.find('video') != null && $wrap.find('video').length != 0) {
                    $wrap.find('.som-start-ctrl').find('.fa-stop').css('display', 'none');
                    $wrap.find('.som-start-ctrl').find('.fa-play').css('display', '');
                    var video = $wrap.find('video')[0];
                    // 停止
                    video.pause();
                    // 停止计时
                    this.bindSetProgressTime(false);
                }
            };
            /// <summary>音量调节绑定</summary>
            RxmDisplayVideoImpl.prototype.bindSetVolume = function (arg, scope) {
                if (typeof arg === 'boolean' || typeof arg === 'undefined') {
                    arg = {
                        fn: this._onSetVolume
                    };
                    scope = this;
                }
                var the = this;
                if ($.isExist(scope)) {
                    the = scope;
                }
                $wrap.on(_msgEnum.setVolume, arg.data, cssOrm.hitch(arg.fn, the), arg.one);
            };
            /// <summary>调节音量激发函数</summary>
            RxmDisplayVideoImpl.prototype._onSetVolume = function (e, currentX) {
                /// TODO
                if ($wrap.find('video') != null && $wrap.find('video').length != 0) {
                    var video = $wrap.find('video')[0];
                    var totalWidth = $wrap.find('.som-volume-set').width();
                    var percent = currentX / totalWidth;
                    video.volume = percent;
                    if (percent > 0) {
                        $wrap.find('.som-volume-ctrl').find('i').addClass('fa-volume-up');
                        $wrap.find('.som-volume-ctrl').find('i').removeClass('fa-volume-off');
                    }
                    var iconWidth = $wrap.find('.som-volume-set').find('i').width();
                    $wrap.find('.som-volume-set').find('i').css('margin-left', currentX - iconWidth + 'px');
                }
            };
            /// <summary>静音绑定</summary>
            RxmDisplayVideoImpl.prototype.bindVolumeMute = function (arg, scope) {
                if (typeof arg === 'boolean' || typeof arg === 'undefined') {
                    arg = {
                        fn: this._onVolumeMute
                    };
                    scope = this;
                }
                var the = this;
                if ($.isExist(scope)) {
                    the = scope;
                }
                $wrap.on(_msgEnum.volumeMute, arg.data, cssOrm.hitch(arg.fn, the), arg.one);
            };
            /// <summary>静音激发函数</summary>
            RxmDisplayVideoImpl.prototype._onVolumeMute = function () {
                /// TODO
                if ($wrap.find('video') != null && $wrap.find('video').length != 0) {
                    var video = $wrap.find('video')[0];
                    if ($wrap.find('.som-volume-ctrl').children('i').hasClass('fa-volume-up')) {
                        $wrap.defaultVolume = video.volume;
                        video.volume = 0;
                        $wrap.find('.som-volume-ctrl').children('i').removeClass('fa-volume-up');
                        $wrap.find('.som-volume-ctrl').children('i').addClass('fa-volume-off');
                        $wrap.find('.som-volume-set').find('i').css('margin-left', 0);
                    }
                    else {
                        video.volume = $wrap.defaultVolume;
                        var volumeWidth = $wrap.find('.som-volume-set').width();
                        $wrap.find('.som-volume-ctrl').children('i').removeClass('fa-volume-off');
                        $wrap.find('.som-volume-ctrl').children('i').addClass('fa-volume-up');
                        var iconWidth = $wrap.find('.som-volume-set').find('i').width();
                        $wrap.find('.som-volume-set').find('i').css('margin-left', volumeWidth * video.volume - iconWidth + 'px');
                    }
                }
            };
            RxmDisplayVideoImpl.prototype.fullscreen = function (elem) {
                var prefix = 'webkit';
                if (elem[prefix + 'RequestFullScreen']) {
                    return prefix + 'RequestFullScreen';
                }
                else if (elem[prefix + 'EnterFullScreen']) {
                    return prefix + 'EnterFullScreen';
                }
                return false;
            };
            RxmDisplayVideoImpl.prototype.autoFullScrenn = function (v) {
                var ua = navigator.userAgent.toLowerCase();
                var Android = String(ua.match(/android/i)) == 'android';
                // if(!Android) return;//非android系统不使用;
                var video = v, doc = document;
                var fullscreenvideo = this.fullscreen(doc.createElement('video'));
                if (!fullscreenvideo) {
                    alert('不支持全屏模式');
                    return;
                }
                video[fullscreenvideo]();
            };
            RxmDisplayVideoImpl.prototype.attrId = function (value) {
                if (value) {
                    var jqWidget = $(this.getWrap());
                    jqWidget.attr('id', value);
                    this.getWrap(jqWidget.get(0).outerHTML);
                }
            };
            RxmDisplayVideoImpl.prototype.attrVideoUrl = function (value) {
                /// <summary>视频播放地址</summary>
                /// <param  name="value" value="event"></param>
                (!!value) && (value !== '') && (($wrap.attr('videoUrl', value)));
                (!!value) && (value === '') && (($wrap.removeAttr('videoUrl')));
                return $wrap.attr('videoUrl');
            };
            RxmDisplayVideoImpl.prototype.attrThumbnail = function (value) {
                /// <summary>视频的缩略图，用于播放之前的显示</summary>
                /// <param  name="value" value="event"></param>
                (!!value) && (value !== '') && (($wrap.attr('thumbnail', value)));
                (!!value) && (value === '') && (($wrap.removeAttr('thumbnail')));
                return $wrap.attr('thumbnail');
            };
            RxmDisplayVideoImpl.prototype.attrFloatWidgetUrl = function (value) {
                /// <summary>暂停或者缓冲时，浮动窗口显示的内容</summary>
                /// <param  name="value" value="event"></param>
                (!!value) && (value !== '') && (($wrap.attr('floatWidgetUrl', value)));
                (!!value) && (value == '') && (($wrap.removeAttr('floatWidgetUrl')));
                return $wrap.attr('floatWidgetUrl');
            };
            RxmDisplayVideoImpl.prototype.attrSpotsVideoUrl = function (value) {
                /// <summary>插播视频url，正式视频播放之前及间隔播放</summary>
                /// <param  name="value" value="event"></param>
                (!!value) && (value !== '') && (($wrap.attr('spotsVideoUrl', value)));
                (!!value) && (value === '') && (($wrap.removeAttr('spotsVideoUrl')));
                return $wrap.attr('spotsVideoUrl');
            };
            RxmDisplayVideoImpl.prototype.attrFetchVideoListUrl = function (value) {
                /// <summary>获取视频的播放列表的服务地址，没有时，在本页查找list</summary>
                /// <param  name="value" value="event"></param>
                (!!value) && (value !== '') && (($wrap.attr('fetchVideoListUrl', value)));
                (!!value) && (value === '') && (($wrap.removeAttr('fetchVideoListUrl')));
                return $wrap.attr('fetchVideoListUrl');
            };
            RxmDisplayVideoImpl.prototype.init = function () {
                this.initEvent();
            };
            return RxmDisplayVideoImpl;
        }());
        var ret = new RxmDisplayVideoImpl();
        var rqr = window;
        rqr.require('RxmPageBase').bindPageReady({ callback: $.proxy(ret.init, ret), one: true });
        return ret;
    };
    return clsFactory;
});

define("RxmTopCmdQueue", ["require", "exports"], function (require, exports) {
    "use strict";
    ///<amd-module name='RxmTopCmdQueue'/>
    var rqr = window;
    /**@type  {Object.<string,Object.<string,string>} */
    var cmdEvts = {};
    var ismbl = function () { typeof rxm_page != "undefined"; };
    /**
     * 接收其他窗口的消息
     */
    var listenFrom = function () {
        /**@type {rxm.Page} */
        var page = rqr.require('RxmPageBase');
        page.bindPageNotify();
    };
    var cmdTopQueue = /** @class */ (function () {
        function cmdTopQueue() {
        }
        /**
          * 根据rxmcmdid 绑定消息
          * @param {rxm.cmd.bindArgs |{bindWinId:'',triggerWinId:''}} args
          */
        cmdTopQueue.prototype.bindCmd = function (args, triggerFun) {
            /**@type {Object.<string,string>} */
            var tmp = cmdEvts[args.msgType];
            !tmp && (cmdEvts[args.msgType] = {});
            cmdEvts[args.msgType][args.bindWinId] = triggerFun;
        };
        cmdTopQueue.prototype.unbindCmd = function () { };
        /**
      * @param {Object} data
      * @param {Event|{data:{}}} e  可选 由domelement （页面标签） 发起trigger e =页面标签事件 ，
      * @param {rxm.cmd.bindArgs|{bindWinId:'',triggerWinId:''}}  args  可选
      */
        cmdTopQueue.prototype.triggerCmd = function (args) {
            /**@type {Array.<rxm.cmd.bindArgs |{bindWinId:'',triggerWinId:''}>} */
            var tmp = cmdEvts[args.msgType];
            /**@type {rxm.cmd.bindArgs |{iframeid:String} }*/
            var it;
            if (tmp) {
                for (it in tmp) {
                    if (it == args.triggerWinId) {
                        continue;
                    }
                    //
                    tmp[it](args);
                }
            }
        };
        return cmdTopQueue;
    }());
    var ret = (function () {
        //自己就是消息队列的拥有者
        var istop = false;
        var widget = window;
        for (var i = 0; i < 10; i++) // 最多嵌套5层
         {
            if (widget.cssOrm && widget.cssOrm.obj && widget.cssOrm.obj.__rxmdispather) {
                return widget.cssOrm.obj.__rxmdispather;
            }
            else {
                if (window.top == widget.self) {
                    rqr.cssOrm.obj.__rxmdispather = new cmdTopQueue();
                    return rqr.cssOrm.obj.__rxmdispather;
                }
                widget = widget.parent;
            }
        }
    }());
    return ret;
});

define('RxmLoginJs', ["RxmModuleLoginDir", require.rxm.Util], (function (lgn, util) {
    ///<param name="lgn" value="objLoginBase"></param>
    lgn._oldSuccess = lgn.onPostCheckPwdSuccess;
    lgn.onPostCheckPwdSuccess = function (data) {
        ///<summary>重载登录成功函数</summary>
        if (!data.success) {
            util.alert(cssOrm.default.prompt.userError); //你们自己 写一下，密码错误的提示
            //this.onRefreshCaptcha();
            $(this.btnSubmitSelector).html("登录").removeClass("disabled");
            this._enterSubmit = true;
        }
        else {
            lgn._oldSuccess(data);
        }
    };
    lgn.init();
}));

define("RxmMd5Bulid", [], function () {
    var cls = function () {
    };
    /* bits per input character. 8 - ASCII; 16 - Unicode  */
    var chrsz = 8;
    /* hex output format. 0 - lowercase; 1 - uppercase  */
    var hexcase = 0;
    cls.prototype.buildMd5 = function (s) {
        return binl2hex(core_md5(str2binl(s), s.length * chrsz));
    };
    function core_md5(x, len) {
        x[len >> 5] |= 0x80 << ((len) % 32);
        x[(((len + 64) >>> 9) << 4) + 14] = len;
        var a = 1732584193;
        var b = -271733879;
        var c = -1732584194;
        var d = 271733878;
        for (var i = 0; i < x.length; i += 16) {
            var olda = a;
            var oldb = b;
            var oldc = c;
            var oldd = d;
            a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
            d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
            c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
            b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
            a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
            d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
            c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
            b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
            a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
            d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
            c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
            b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
            a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
            d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
            c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
            b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
            a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
            d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
            c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
            b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
            a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
            d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
            c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
            b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
            a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
            d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
            c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
            b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
            a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
            d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
            c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
            b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
            a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
            d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
            c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
            b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
            a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
            d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
            c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
            b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
            a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
            d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
            c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
            b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
            a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
            d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
            c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
            b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
            a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
            d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
            c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
            b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
            a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
            d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
            c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
            b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
            a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
            d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
            c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
            b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
            a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
            d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
            c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
            b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
            a = safe_add(a, olda);
            b = safe_add(b, oldb);
            c = safe_add(c, oldc);
            d = safe_add(d, oldd);
        }
        return Array(a, b, c, d);
    }
    /*
     *  * Bitwise rotate a 32-bit number to the left.
     */
    function bit_rol(num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt));
    }
    /*
     *  * Add integers, wrapping at 2^32. This uses 16-bit operations internally  *
     * to work around bugs in some JS interpreters.
     */
    function safe_add(x, y) {
        var lsw = (x & 0xFFFF) + (y & 0xFFFF);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xFFFF);
    }
    /*
     *  * These functions implement the four basic operations the algorithm uses.
     */
    function md5_ff(a, b, c, d, x, s, t) {
        return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
    }
    function md5_cmn(q, a, b, x, s, t) {
        return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
    }
    function md5_gg(a, b, c, d, x, s, t) {
        return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
    }
    function md5_hh(a, b, c, d, x, s, t) {
        return md5_cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5_ii(a, b, c, d, x, s, t) {
        return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
    }
    /*
     *  * Convert an array of little-endian words to a hex string.
     */
    function binl2hex(binarray) {
        var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
        var str = "";
        for (var i = 0; i < binarray.length * 4; i++) {
            str += hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8 + 4)) & 0xF)
                + hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8)) & 0xF);
        }
        return str;
    }
    function str2binl(str) {
        var bin = Array();
        var mask = (1 << chrsz) - 1;
        for (var i = 0; i < str.length * chrsz; i += chrsz)
            bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (i % 32);
        return bin;
    }
    return new cls();
});

define('RxmDefaultv', [], function (a) {
    // 对应页面的主入口 初始化对象定义
    !cssOrm.default && (cssOrm.default = {});
    !cssOrm.default.homePages && (cssOrm.default.homePages = ['RxmModuleDir/core/login/login',
        'RxmModuleDir/core/home/home',
        'RxmModuleDir/core/jump/jumpPage']);
    /**
     *  配置对象定义
     *  可以通过重写/www/config/ormdefault.js文件，对以下定义对象中的参数进行重写设置
     */
    // 1、home首页顶部标题栏默认参数值设置
    !cssOrm.default.homePageArgs && (cssOrm.default.homePageArgs = {});
    // 2、home首页底部tabbar默认参数值设置
    !cssOrm.default.homePageDefault && (cssOrm.default.homePageDefault = {});
    // 3、jumpPage跳转页默认参数值设置
    !cssOrm.default.loadPageDefault && (cssOrm.default.loadPageDefault = {});
    // 4、ios设备禁止webview滑动回弹效果默认参数值设置
    !cssOrm.default.forbidWebViewAttDefault && (cssOrm.default.forbidWebViewAttDefault = {});
    // 5、gridMobile默认参数值设置
    !cssOrm.default.clsGridMobile && (cssOrm.default.clsGridMobile = {});
    !cssOrm.default.clsGridMobile.param && (cssOrm.default.clsGridMobile.param = {});
    !cssOrm.default.clsGridMobile.refreshTip && (cssOrm.default.clsGridMobile.refreshTip = {});
    // 6、原生appUploader默认参数值设置
    !cssOrm.default.clsAppUploader && (cssOrm.default.clsAppUploader = {});
    !cssOrm.default.clsAppUploader.appUploader && (cssOrm.default.clsAppUploader.appUploader = {});
    // 7、wifi设置默认参数值设置
    !cssOrm.default.wifi && (cssOrm.default.wifi = {});
    // 8、录像功能默认参数值设置
    !cssOrm.default.video && (cssOrm.default.video = {});
    // 9、录音功能默认参数值设置
    !cssOrm.default.voice && (cssOrm.default.voice = {});
    // 10、图片默认参数值设置
    !cssOrm.default.image && (cssOrm.default.image = {});
    // 11、数据库默认参数值设置
    !cssOrm.default.dbParam && (cssOrm.default.dbParam = {});
    // 12、页面加载模式默认参数值设置  
    !cssOrm.default.loadTarget && (cssOrm.default.loadTarget = {});
    // 13、日期选择器默认参数值设置 
    !cssOrm.default.openDatePicker && (cssOrm.default.openDatePicker = {});
    // 14、提示对话框默认参数值设置 
    !cssOrm.default.alert && (cssOrm.default.alert = {});
    // 15、确认对话框默认参数值设置 
    !cssOrm.default.confirm && (cssOrm.default.confirm = {});
    // 16、提示框默认参数值设置
    !cssOrm.default.utilPrompt && (cssOrm.default.utilPrompt = {});
    // 17、滑动窗格默认参数值设置
    !cssOrm.default.clsSliderIconView && (cssOrm.default.clsSliderIconView = {});
    // 18、提示信息默认参数值设置
    !cssOrm.default.prompt && (cssOrm.default.prompt = {});
    // 19、文件上传默认参数值设置
    !cssOrm.default.clsFileUploader && (cssOrm.default.clsFileUploader = {});
    // 20、form表单默认参数值设置
    !cssOrm.default.clsOrmForm && (cssOrm.default.clsOrmForm = {});
    // 21、图片处理默认参数设置
    !cssOrm.default.clsOrmImage && (cssOrm.default.clsOrmImage = {});
    /**
     * 1、home首页顶部标题栏默认参数值设置(9个参数)
     */
    //打开方式
    cssOrm.default.homePageArgs.target = '_self';
    //是否隐藏标题栏 0：显示；1：隐藏 默认为1
    cssOrm.default.homePageArgs.hiddenTitleBar = 1;
    //隐藏标题栏返回按钮 0：显示；1：隐藏 默认为1
    cssOrm.default.homePageArgs.hiddenBackBtn = 1;
    //打开窗口时候的共有数据 object 类型
    cssOrm.default.homePageArgs.data = {};
    //默认的标题     
    cssOrm.default.homePageArgs.title = "";
    //默认的标题字体颜色
    cssOrm.default.homePageArgs.titleColor = "#ffffff";
    //默认的标题栏背景
    cssOrm.default.homePageArgs.titleBarBg = "#0088cc";
    //多个菜单项之间用逗号分隔 例如"完成,设置"
    cssOrm.default.homePageArgs.menu = "";
    //菜单项文字颜色值 
    cssOrm.default.homePageArgs.menuTextColor = "#ffffff";
    /**
     * 2、home首页底部tabbar默认参数值设置(5个参数)
     */
    //tab文字
    cssOrm.default.homePageDefault.tabTxt = "";
    //是否显示消息未读数 0：不显示；1：显示数字 2：显示小红点，默认0
    cssOrm.default.homePageDefault.showbadged = "0";
    //tab默认背景颜色
    cssOrm.default.homePageDefault.tabBackGroundColor = "#ffffff";
    //tab选中文字颜色
    cssOrm.default.homePageDefault.tabTxtSelectColor = "";
    //tab未选中文字颜色
    cssOrm.default.homePageDefault.tabTxtUnSelectColor = "";
    /**
     * 3、jumpPage跳转页默认参数值定义(9个参数)
     */
    //可选，打开新窗口时传入参数
    cssOrm.default.loadPageDefault.data = {},
        //可选，标题，默认空
        cssOrm.default.loadPageDefault.title = "",
        //可选，title颜色	#ffffff，title参数为空时无效
        cssOrm.default.loadPageDefault.titleColor = "",
        //可选，是否隐藏导航栏  默认值 false
        cssOrm.default.loadPageDefault.hiddenTitleBar = "",
        //可选，是否隐藏导航栏返回按钮,hiddenTitleBar参数为true时无效
        cssOrm.default.loadPageDefault.hiddenBackBtn = "",
        //可选，标题栏背景，支持图片和颜色值（#0088cc）,hiddenTitleBar参数为true时无效
        cssOrm.default.loadPageDefault.titleBarBg = "",
        //可选，多个菜单项之间用逗号分隔"完成,设置",hiddenTitleBar参数为true时无效
        cssOrm.default.loadPageDefault.menu = "",
        //可选，菜单项文字颜色值 ,hiddenTitleBar参数为true时无效 	#ffffff
        cssOrm.default.loadPageDefault.menuTextColor = "",
        //可选，窗口关闭叫回函数 形如 function(arg)
        cssOrm.default.loadPageDefault.afterClose = function (e, arg) { };
    /**
     * 4、ios设备禁止webview滑动回弹效果(2个参数)
     */
    // webview滑动  1表示禁用，0表示不禁用，默认为0
    cssOrm.default.forbidWebViewAttDefault.scroll = 0;
    // webview回弹  1表示禁用，0表示不禁用，默认为0
    cssOrm.default.forbidWebViewAttDefault.bounce = 0;
    /**
     * 5、gridMobile默认参数值定义(13个参数)
     */
    // 每页数据条目数  默认30
    cssOrm.default.clsGridMobile.pageSize = 30;
    // 数据选中 单选[radio]还是多选[checkbox],默认checkbox 默认改为不显示 桌面端不显示  移动端为checkbox
    // cssOrm.default.clsGridMobile.multi = true
    // 数据是否换行，还是隐藏多余字符(true 省略多余字符,其他字符用三个点代替  false 换行显示所有内容 ) 默认省略多余字符
    cssOrm.default.clsGridMobile.textEllipsis = true;
    // 数据缓存参数设置  最大显示页数 默认10页
    cssOrm.default.clsGridMobile.param.viweMaxLen = 10;
    // 最大缓存页数 默认30页
    cssOrm.default.clsGridMobile.param.cacheMaxLen = 30;
    // 提示语默认值设置 下拉到顶开始提示语设置
    cssOrm.default.clsGridMobile.refreshTip.topTipBegin = '下拉刷新...';
    // 下拉到顶开始提示语设置
    cssOrm.default.clsGridMobile.refreshTip.topTipRefresh = '松开即可刷新...';
    // 加载中提示语
    cssOrm.default.clsGridMobile.refreshTip.topTipLoading = '加载中...';
    // 数据刷新提示语
    cssOrm.default.clsGridMobile.refreshTip.topTipSuccess = '数据刷新成功';
    // 数据刷新失败提示语
    cssOrm.default.clsGridMobile.refreshTip.topTipError = '数据刷新失败';
    // 上拉到底加载中提示语
    cssOrm.default.clsGridMobile.refreshTip.bottomTipLoading = '数据加载中...';
    // 上拉到底加载失败提示语
    cssOrm.default.clsGridMobile.refreshTip.bottomTipError = '数据加载失败';
    // 数据没有更多提示语
    cssOrm.default.clsGridMobile.refreshTip.bottomTipEnd = '没有更多了';
    // 暂无数据提示语
    cssOrm.default.clsGridMobile.refreshTip.nodataTip = "暂无数据！";
    /**
     * 6、原生appUploader默认参数值定义(8个参数)
     */
    // String类型	必选	文件上传接口地址
    cssOrm.default.clsAppUploader.appUploader.serverURL = /*cssOrm.obj.clsAppArgs().getUpdateUrl()+*/ '/resoft/x/file/add';
    // Number类型	可选	默认0，文件传送开始的位置
    cssOrm.default.clsAppUploader.appUploader.startOffset = 0;
    // Number类型	可选	默认-1，传送startOffset开始的全部文件
    cssOrm.default.clsAppUploader.appUploader.Length = -1;
    // Number类型	可选	是否分段上传，1：分段，0：不分段，默认为0
    cssOrm.default.clsAppUploader.appUploader.chunked = 1;
    // Number类型	可选	默认值：5。大于1的整数. 单位Mb
    cssOrm.default.clsAppUploader.appUploader.chunkSize = 1024 * 512;
    // Number类型	可选	分段上传失败时重试次数，默认2次
    cssOrm.default.clsAppUploader.appUploader.chunkRetry = 2;
    // Json字符串类型	可选	传递给服务器的其他参数
    cssOrm.default.clsAppUploader.appUploader.formData = {};
    // Number类型	可选	线程池内的线程数，暂不支持
    cssOrm.default.clsAppUploader.appUploader.threads = 0;
    /**
     * 7、wifi设置默认参数值定义(1个参数)
     */
    //wifi开启状态监听 1 开启，0 未开启
    cssOrm.default.wifi.status = '1';
    /**
     * 8、录像功能默认参数值定义(5个参数)
     */
    //视频录制最大时间,单位s(秒) 
    cssOrm.default.video.maxDuration = '3600';
    //视频分辨率类型,取值为0,1,2,默认为0。0:1920x1080, 1:1280x720, 2:640x480
    cssOrm.default.video.qualityType = '1';
    //视频录制时采样率类型,取值为0, 1, 2, 默认为0, 0: 高采样率, 1: 中采样率, 2: 低采样率
    cssOrm.default.video.bitRateType = '1';
    //输出的视频文件格式,默认为mp4。
    cssOrm.default.video.fileType = 'mp4';
    //是否需要视频截图 1： 是，0 否，默认 0
    cssOrm.default.video.needThumb = '0';
    /**
     * 9、录音功能默认参数值设置(1个参数)
     */
    // 音频格式定义 0:AMR格式,1:CAF格式,2:MP3格式
    cssOrm.default.voice.mode = '2';
    /**
     * 10、图片默认参数值设置(4个参数)
     */
    //图片是否压缩,1表示压缩,0或者不传表示不压缩。
    cssOrm.default.image.comtextareass = '1';
    //图片压缩质量,comtextareass为1时有效,取值范围[0,100]
    cssOrm.default.image.quality = '1';
    //图片宽度
    cssOrm.default.image.imgWidth = '100';
    //图片高度
    cssOrm.default.image.imgHeight = '200';
    /**
     * 11、数据库默认参数值设置(2个参数)
     */
    // 数据库名称
    cssOrm.default.dbParam.ormDbName = 'originaldb',
        // 数据库id
        cssOrm.default.dbParam.ormDbId = 'originaldbID';
    /**
     * 12、页面加载模式默认参数值设置(1个参数)
     */
    //_blank:新页面打开;_self:本页面打开
    cssOrm.default.loadTarget = '_blank';
    /**
     * 13、日期选择器默认参数值设置(6个参数)
     */
    // 样式类型，默认1；1 显示年月日，0：显示年月
    cssOrm.default.openDatePicker.withDay = 1;
    //年   
    cssOrm.default.openDatePicker.year = '';
    //月
    cssOrm.default.openDatePicker.month = '';
    //日
    cssOrm.default.openDatePicker.day = '';
    //开始年
    cssOrm.default.openDatePicker.startyear = 1900;
    //结束年，开始年必须小于结束年，否则无效
    cssOrm.default.openDatePicker.endyear = 2100;
    /**
     * 14、提示对话框默认参数值设置(5个参数)
     */
    // 0：app系统提示框，1：dialog提示框
    cssOrm.default.alert.modal = 0;
    // 提示框标题        
    cssOrm.default.alert.title = '提示';
    // 提示框内容     
    cssOrm.default.alert.content = '提示内容';
    // 按钮标题
    cssOrm.default.alert.btnTitle = '确定';
    // 回调函数
    cssOrm.default.alert.callback = function () { };
    /**
     * 15、确认对话框默认参数值设置(7个参数)
     */
    // 0：app系统提示框，1：dialog提示框
    cssOrm.default.confirm.modal = 0;
    // 确认框标题       
    cssOrm.default.confirm.title = '提示';
    // 确认框内容    
    cssOrm.default.confirm.content = '提示内容';
    // 确定按钮标题
    cssOrm.default.confirm.okBT = '确定';
    // 取消按钮标题
    cssOrm.default.confirm.cancelBT = '取消';
    // 确定回调函数  
    cssOrm.default.confirm.okCb = function () { };
    // 取消回调函数
    cssOrm.default.confirm.cancelCb = function () { };
    /**
     * 16、提示框默认参数值设置(6个参数)
     */
    // 要在 window 上弹出的对话框中显示的纯文本（而非 HTML 文本）
    cssOrm.default.utilPrompt.message = '';
    // 默认的输入文本  
    cssOrm.default.utilPrompt.text = '请输入内容';
    // 默认的输入文本placeholder  
    cssOrm.default.utilPrompt.placeholder = '';
    // 确认框标题  
    cssOrm.default.utilPrompt.title = '提示';
    // 弹出框标题，默认值“确定”      
    cssOrm.default.utilPrompt.btnok = '确定';
    // 弹出框标题，默认值“取消”     
    cssOrm.default.utilPrompt.btncancel = '取消';
    /**
     * 17、滑动窗格默认参数值设置(6个参数)
     */
    // 滑动窗格数据
    cssOrm.default.clsSliderIconView.data = [];
    // dock数据
    cssOrm.default.clsSliderIconView.dockData = [];
    // 每项的宽度	
    cssOrm.default.clsSliderIconView.itemWidth = 50;
    // 每项的高度				
    cssOrm.default.clsSliderIconView.itemHeight = 50;
    // 图标宽度				
    cssOrm.default.clsSliderIconView.iconWidth = 48;
    // 图标高度				
    cssOrm.default.clsSliderIconView.iconHeight = 48;
    // 文字高度			
    cssOrm.default.clsSliderIconView.textHeight = 14;
    // 文字行高			
    cssOrm.default.clsSliderIconView.textLineHeight = 14;
    // 分页控件高度				
    cssOrm.default.clsSliderIconView.pageControlH = 10;
    // 图标的间距 与column 两选一
    cssOrm.default.clsSliderIconView.itemGap = 30;
    // 服务器路径                 
    cssOrm.default.clsSliderIconView.serverPath = '';
    // 每项上边距					
    cssOrm.default.clsSliderIconView.itemMarginTop = 20;
    // 每项下边距               
    cssOrm.default.clsSliderIconView.itemMarginBottom = 0;
    // 惯性系数	
    cssOrm.default.clsSliderIconView.inertia = 100;
    // 滚动时长					
    cssOrm.default.clsSliderIconView.duration = 500;
    // 显示分页	   
    cssOrm.default.clsSliderIconView.showPage = true;
    // 是否分组，默认不分组				
    cssOrm.default.clsSliderIconView.group = false;
    /**
     * 18、提示信息默认参数值设置(9个参数)
     */
    //网络失败提示语
    cssOrm.default.prompt.noNetwork = '网络连接失败!';
    //用户名密码错误提示语
    cssOrm.default.prompt.userError = '用户名或密码错误!';
    //登录过期提示语
    cssOrm.default.prompt.sessionOutFlag = '登录过期，请重新登录';
    //请求异常提示语
    cssOrm.default.prompt.appError = '请求异常!';
    //请求资源未授权提示语
    cssOrm.default.prompt.unauthorised = '请求的资源未授权！';
    //重新登录提示胡
    cssOrm.default.prompt.reLogin = '权限更新，请重新登录';
    //重新启动提示语
    cssOrm.default.prompt.restart = '版本升级，请重新启动';
    //服务异常提示语
    cssOrm.default.prompt.serverError = '服务器端异常,请联系管理员';
    //登录失败提示语
    cssOrm.default.prompt.loginError = '网络请求异常,请检查网络设置!';
    /**
     * 19、文件上传默认参数值设置(1个参数)
     */
    // false 调用百度上传 true 调用本地上传
    cssOrm.default.clsFileUploader.isLocalLoad = true;
    /**
     * 20、form表单默认参数值设置(1个参数)
     */
    //config对象默认值
    cssOrm.default.clsOrmForm.cfg = {};
    cssOrm.default.rxmscrll = {};
    cssOrm.default.rxmscrll.theme = "minimal-dark",
        cssOrm.default.rxmscrll.scrollButtons = { enable: true };
    /**
     * 21、图片处理默认参数设置(1个参数)
     */
    //ontap事件
    cssOrm.default.clsOrmImage.ontap = function () { };
    /**
     * 22、默认 a.css-orm-tap  标签tap事件  可以扩展
     */
    if (!cssOrm.default.onTapDefault) {
        cssOrm.default.onTapDefault = function (e) {
            var o = this;
            var args = new cssOrm.default.loadPageDefault.constructor();
            var arg = $(o).data('ormload-args');
            arg = $.extend(true, args, arg, { target: $(o).attr('target') });
            var hrf = $(o).attr('href');
            if (hrf.length > 1 && hrf.indexOf('#') == 0) {
                hrf = hrf.substr(1);
            }
            ;
            var auth = cssOrm.obj.clsOrmPageAuth();
            auth.load(hrf, args);
            return false;
        };
        $(document.body).on('tap', 'a.css-orm-tap', cssOrm.default.onTapDefault);
        $(document.body).on('click', 'a.css-orm-tap', function () { event.preventDefault(); event.stopPropagation(); return false; });
    }
    // 加载项目组自己定义的默认值ormdefault文件 文件目录/www/config/ormdefault.js
    require(['RxmConfigDir/ormdefault'], function () { });
    return cssOrm.default;
});

/*
 * RSA, a suite of routines for performing RSA public-key computations in JavaScript.
 * Copyright 1998-2005 David Shapiro.
 * Dave Shapiro
 * dave@ohdave.com
 * changed by wang_yong, 2015-04-13
 * wang_yong@css.com.cn
 */
define("RxmRsa", function () {
    var $w = this;
    if (typeof $w.RSAUtils === 'undefined')
        var RSAUtils = $w.RSAUtils = {};
    var biRadixBase = 2;
    var biRadixBits = 16;
    var bitsPerDigit = biRadixBits;
    var biRadix = 1 << 16; // = 2^16 = 65536
    var biHalfRadix = biRadix >>> 1;
    var biRadixSquared = biRadix * biRadix;
    var maxDigitVal = biRadix - 1;
    var maxInteger = 9999999999999998;
    //maxDigits:
    //Change this to accommodate your largest number size. Use setMaxDigits()
    //to change it!
    //
    //In general, if you're working with numbers of size N bits, you'll need 2*N
    //bits of storage. Each digit holds 16 bits. So, a 1024-bit key will need
    //
    //1024 * 2 / 16 = 128 digits of storage.
    //
    var maxDigits;
    var ZERO_ARRAY;
    var bigZero, bigOne;
    var BigInt = $w.BigInt = function (flag) {
        if (typeof flag == "boolean" && flag == true) {
            this.digits = null;
        }
        else {
            this.digits = ZERO_ARRAY.slice(0);
        }
        this.isNeg = false;
    };
    RSAUtils.setMaxDigits = function (value) {
        maxDigits = value;
        ZERO_ARRAY = new Array(maxDigits);
        for (var iza = 0; iza < ZERO_ARRAY.length; iza++)
            ZERO_ARRAY[iza] = 0;
        bigZero = new BigInt();
        bigOne = new BigInt();
        bigOne.digits[0] = 1;
    };
    RSAUtils.setMaxDigits(20);
    //The maximum number of digits in base 10 you can convert to an
    //integer without JavaScript throwing up on you.
    var dpl10 = 15;
    RSAUtils.biFromNumber = function (i) {
        var result = new BigInt();
        result.isNeg = i < 0;
        i = Math.abs(i);
        var j = 0;
        while (i > 0) {
            result.digits[j++] = i & maxDigitVal;
            i = Math.floor(i / biRadix);
        }
        return result;
    };
    //lr10 = 10 ^ dpl10
    var lr10 = RSAUtils.biFromNumber(1000000000000000);
    RSAUtils.biFromDecimal = function (s) {
        var isNeg = s.charAt(0) == '-';
        var i = isNeg ? 1 : 0;
        var result;
        // Skip leading zeros.
        while (i < s.length && s.charAt(i) == '0')
            ++i;
        if (i == s.length) {
            result = new BigInt();
        }
        else {
            var digitCount = s.length - i;
            var fgl = digitCount % dpl10;
            if (fgl == 0)
                fgl = dpl10;
            result = RSAUtils.biFromNumber(Number(s.substr(i, fgl)));
            i += fgl;
            while (i < s.length) {
                result = RSAUtils.biAdd(RSAUtils.biMultiply(result, lr10), RSAUtils.biFromNumber(Number(s.substr(i, dpl10))));
                i += dpl10;
            }
            result.isNeg = isNeg;
        }
        return result;
    };
    RSAUtils.biCopy = function (bi) {
        var result = new BigInt(true);
        result.digits = bi.digits.slice(0);
        result.isNeg = bi.isNeg;
        return result;
    };
    RSAUtils.reverseStr = function (s) {
        var result = "";
        for (var i = s.length - 1; i > -1; --i) {
            result += s.charAt(i);
        }
        return result;
    };
    var hexatrigesimalToChar = [
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
        'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
        'u', 'v', 'w', 'x', 'y', 'z'
    ];
    RSAUtils.biToString = function (x, radix) {
        var b = new BigInt();
        b.digits[0] = radix;
        var qr = RSAUtils.biDivideModulo(x, b);
        var result = hexatrigesimalToChar[qr[1].digits[0]];
        while (RSAUtils.biCompare(qr[0], bigZero) == 1) {
            qr = RSAUtils.biDivideModulo(qr[0], b);
            digit = qr[1].digits[0];
            result += hexatrigesimalToChar[qr[1].digits[0]];
        }
        return (x.isNeg ? "-" : "") + RSAUtils.reverseStr(result);
    };
    RSAUtils.biToDecimal = function (x) {
        var b = new BigInt();
        b.digits[0] = 10;
        var qr = RSAUtils.biDivideModulo(x, b);
        var result = String(qr[1].digits[0]);
        while (RSAUtils.biCompare(qr[0], bigZero) == 1) {
            qr = RSAUtils.biDivideModulo(qr[0], b);
            result += String(qr[1].digits[0]);
        }
        return (x.isNeg ? "-" : "") + RSAUtils.reverseStr(result);
    };
    var hexToChar = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        'a', 'b', 'c', 'd', 'e', 'f'];
    RSAUtils.digitToHex = function (n) {
        var mask = 0xf;
        var result = "";
        for (i = 0; i < 4; ++i) {
            result += hexToChar[n & mask];
            n >>>= 4;
        }
        return RSAUtils.reverseStr(result);
    };
    RSAUtils.biToHex = function (x) {
        var result = "";
        var n = RSAUtils.biHighIndex(x);
        for (var i = RSAUtils.biHighIndex(x); i > -1; --i) {
            result += RSAUtils.digitToHex(x.digits[i]);
        }
        return result;
    };
    RSAUtils.charToHex = function (c) {
        var ZERO = 48;
        var NINE = ZERO + 9;
        var littleA = 97;
        var littleZ = littleA + 25;
        var bigA = 65;
        var bigZ = 65 + 25;
        var result;
        if (c >= ZERO && c <= NINE) {
            result = c - ZERO;
        }
        else if (c >= bigA && c <= bigZ) {
            result = 10 + c - bigA;
        }
        else if (c >= littleA && c <= littleZ) {
            result = 10 + c - littleA;
        }
        else {
            result = 0;
        }
        return result;
    };
    RSAUtils.hexToDigit = function (s) {
        var result = 0;
        var sl = Math.min(s.length, 4);
        for (var i = 0; i < sl; ++i) {
            result <<= 4;
            result |= RSAUtils.charToHex(s.charCodeAt(i));
        }
        return result;
    };
    RSAUtils.biFromHex = function (s) {
        var result = new BigInt();
        var sl = s.length;
        for (var i = sl, j = 0; i > 0; i -= 4, ++j) {
            result.digits[j] = RSAUtils.hexToDigit(s.substr(Math.max(i - 4, 0), Math.min(i, 4)));
        }
        return result;
    };
    RSAUtils.biFromString = function (s, radix) {
        var isNeg = s.charAt(0) == '-';
        var istop = isNeg ? 1 : 0;
        var result = new BigInt();
        var place = new BigInt();
        place.digits[0] = 1; // radix^0
        for (var i = s.length - 1; i >= istop; i--) {
            var c = s.charCodeAt(i);
            var digit = RSAUtils.charToHex(c);
            var biDigit = RSAUtils.biMultiplyDigit(place, digit);
            result = RSAUtils.biAdd(result, biDigit);
            place = RSAUtils.biMultiplyDigit(place, radix);
        }
        result.isNeg = isNeg;
        return result;
    };
    RSAUtils.biDump = function (b) {
        return (b.isNeg ? "-" : "") + b.digits.join(" ");
    };
    RSAUtils.biAdd = function (x, y) {
        var result;
        if (x.isNeg != y.isNeg) {
            y.isNeg = !y.isNeg;
            result = RSAUtils.biSubtract(x, y);
            y.isNeg = !y.isNeg;
        }
        else {
            result = new BigInt();
            var c = 0;
            var n;
            for (var i = 0; i < x.digits.length; ++i) {
                n = x.digits[i] + y.digits[i] + c;
                result.digits[i] = n % biRadix;
                c = Number(n >= biRadix);
            }
            result.isNeg = x.isNeg;
        }
        return result;
    };
    RSAUtils.biSubtract = function (x, y) {
        var result;
        if (x.isNeg != y.isNeg) {
            y.isNeg = !y.isNeg;
            result = RSAUtils.biAdd(x, y);
            y.isNeg = !y.isNeg;
        }
        else {
            result = new BigInt();
            var n, c;
            c = 0;
            for (var i = 0; i < x.digits.length; ++i) {
                n = x.digits[i] - y.digits[i] + c;
                result.digits[i] = n % biRadix;
                // Stupid non-conforming modulus operation.
                if (result.digits[i] < 0)
                    result.digits[i] += biRadix;
                c = 0 - Number(n < 0);
            }
            // Fix up the negative sign, if any.
            if (c == -1) {
                c = 0;
                for (var i = 0; i < x.digits.length; ++i) {
                    n = 0 - result.digits[i] + c;
                    result.digits[i] = n % biRadix;
                    // Stupid non-conforming modulus operation.
                    if (result.digits[i] < 0)
                        result.digits[i] += biRadix;
                    c = 0 - Number(n < 0);
                }
                // Result is opposite sign of arguments.
                result.isNeg = !x.isNeg;
            }
            else {
                // Result is same sign.
                result.isNeg = x.isNeg;
            }
        }
        return result;
    };
    RSAUtils.biHighIndex = function (x) {
        var result = x.digits.length - 1;
        while (result > 0 && x.digits[result] == 0)
            --result;
        return result;
    };
    RSAUtils.biNumBits = function (x) {
        var n = RSAUtils.biHighIndex(x);
        var d = x.digits[n];
        var m = (n + 1) * bitsPerDigit;
        var result;
        for (result = m; result > m - bitsPerDigit; --result) {
            if ((d & 0x8000) != 0)
                break;
            d <<= 1;
        }
        return result;
    };
    RSAUtils.biMultiply = function (x, y) {
        var result = new BigInt();
        var c;
        var n = RSAUtils.biHighIndex(x);
        var t = RSAUtils.biHighIndex(y);
        var u, uv, k;
        for (var i = 0; i <= t; ++i) {
            c = 0;
            k = i;
            for (j = 0; j <= n; ++j, ++k) {
                uv = result.digits[k] + x.digits[j] * y.digits[i] + c;
                result.digits[k] = uv & maxDigitVal;
                c = uv >>> biRadixBits;
                //c = Math.floor(uv / biRadix);
            }
            result.digits[i + n + 1] = c;
        }
        // Someone give me a logical xor, please.
        result.isNeg = x.isNeg != y.isNeg;
        return result;
    };
    RSAUtils.biMultiplyDigit = function (x, y) {
        var n, c, uv;
        result = new BigInt();
        n = RSAUtils.biHighIndex(x);
        c = 0;
        for (var j = 0; j <= n; ++j) {
            uv = result.digits[j] + x.digits[j] * y + c;
            result.digits[j] = uv & maxDigitVal;
            c = uv >>> biRadixBits;
            //c = Math.floor(uv / biRadix);
        }
        result.digits[1 + n] = c;
        return result;
    };
    RSAUtils.arrayCopy = function (src, srcStart, dest, destStart, n) {
        var m = Math.min(srcStart + n, src.length);
        for (var i = srcStart, j = destStart; i < m; ++i, ++j) {
            dest[j] = src[i];
        }
    };
    var highBitMasks = [0x0000, 0x8000, 0xC000, 0xE000, 0xF000, 0xF800,
        0xFC00, 0xFE00, 0xFF00, 0xFF80, 0xFFC0, 0xFFE0,
        0xFFF0, 0xFFF8, 0xFFFC, 0xFFFE, 0xFFFF];
    RSAUtils.biShiftLeft = function (x, n) {
        var digitCount = Math.floor(n / bitsPerDigit);
        var result = new BigInt();
        RSAUtils.arrayCopy(x.digits, 0, result.digits, digitCount, result.digits.length - digitCount);
        var bits = n % bitsPerDigit;
        var rightBits = bitsPerDigit - bits;
        for (var i = result.digits.length - 1, i1 = i - 1; i > 0; --i, --i1) {
            result.digits[i] = ((result.digits[i] << bits) & maxDigitVal) |
                ((result.digits[i1] & highBitMasks[bits]) >>>
                    (rightBits));
        }
        result.digits[0] = ((result.digits[i] << bits) & maxDigitVal);
        result.isNeg = x.isNeg;
        return result;
    };
    var lowBitMasks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,
        0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,
        0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];
    RSAUtils.biShiftRight = function (x, n) {
        var digitCount = Math.floor(n / bitsPerDigit);
        var result = new BigInt();
        RSAUtils.arrayCopy(x.digits, digitCount, result.digits, 0, x.digits.length - digitCount);
        var bits = n % bitsPerDigit;
        var leftBits = bitsPerDigit - bits;
        for (var i = 0, i1 = i + 1; i < result.digits.length - 1; ++i, ++i1) {
            result.digits[i] = (result.digits[i] >>> bits) |
                ((result.digits[i1] & lowBitMasks[bits]) << leftBits);
        }
        result.digits[result.digits.length - 1] >>>= bits;
        result.isNeg = x.isNeg;
        return result;
    };
    RSAUtils.biMultiplyByRadixPower = function (x, n) {
        var result = new BigInt();
        RSAUtils.arrayCopy(x.digits, 0, result.digits, n, result.digits.length - n);
        return result;
    };
    RSAUtils.biDivideByRadixPower = function (x, n) {
        var result = new BigInt();
        RSAUtils.arrayCopy(x.digits, n, result.digits, 0, result.digits.length - n);
        return result;
    };
    RSAUtils.biModuloByRadixPower = function (x, n) {
        var result = new BigInt();
        RSAUtils.arrayCopy(x.digits, 0, result.digits, 0, n);
        return result;
    };
    RSAUtils.biCompare = function (x, y) {
        if (x.isNeg != y.isNeg) {
            return 1 - 2 * Number(x.isNeg);
        }
        for (var i = x.digits.length - 1; i >= 0; --i) {
            if (x.digits[i] != y.digits[i]) {
                if (x.isNeg) {
                    return 1 - 2 * Number(x.digits[i] > y.digits[i]);
                }
                else {
                    return 1 - 2 * Number(x.digits[i] < y.digits[i]);
                }
            }
        }
        return 0;
    };
    RSAUtils.biDivideModulo = function (x, y) {
        var nb = RSAUtils.biNumBits(x);
        var tb = RSAUtils.biNumBits(y);
        var origYIsNeg = y.isNeg;
        var q, r;
        if (nb < tb) {
            // |x| < |y|
            if (x.isNeg) {
                q = RSAUtils.biCopy(bigOne);
                q.isNeg = !y.isNeg;
                x.isNeg = false;
                y.isNeg = false;
                r = biSubtract(y, x);
                // Restore signs, 'cause they're references.
                x.isNeg = true;
                y.isNeg = origYIsNeg;
            }
            else {
                q = new BigInt();
                r = RSAUtils.biCopy(x);
            }
            return [q, r];
        }
        q = new BigInt();
        r = x;
        // Normalize Y.
        var t = Math.ceil(tb / bitsPerDigit) - 1;
        var lambda = 0;
        while (y.digits[t] < biHalfRadix) {
            y = RSAUtils.biShiftLeft(y, 1);
            ++lambda;
            ++tb;
            t = Math.ceil(tb / bitsPerDigit) - 1;
        }
        // Shift r over to keep the quotient constant. We'll shift the
        // remainder back at the end.
        r = RSAUtils.biShiftLeft(r, lambda);
        nb += lambda; // Update the bit count for x.
        var n = Math.ceil(nb / bitsPerDigit) - 1;
        var b = RSAUtils.biMultiplyByRadixPower(y, n - t);
        while (RSAUtils.biCompare(r, b) != -1) {
            ++q.digits[n - t];
            r = RSAUtils.biSubtract(r, b);
        }
        for (var i = n; i > t; --i) {
            var ri = (i >= r.digits.length) ? 0 : r.digits[i];
            var ri1 = (i - 1 >= r.digits.length) ? 0 : r.digits[i - 1];
            var ri2 = (i - 2 >= r.digits.length) ? 0 : r.digits[i - 2];
            var yt = (t >= y.digits.length) ? 0 : y.digits[t];
            var yt1 = (t - 1 >= y.digits.length) ? 0 : y.digits[t - 1];
            if (ri == yt) {
                q.digits[i - t - 1] = maxDigitVal;
            }
            else {
                q.digits[i - t - 1] = Math.floor((ri * biRadix + ri1) / yt);
            }
            var c1 = q.digits[i - t - 1] * ((yt * biRadix) + yt1);
            var c2 = (ri * biRadixSquared) + ((ri1 * biRadix) + ri2);
            while (c1 > c2) {
                --q.digits[i - t - 1];
                c1 = q.digits[i - t - 1] * ((yt * biRadix) | yt1);
                c2 = (ri * biRadix * biRadix) + ((ri1 * biRadix) + ri2);
            }
            b = RSAUtils.biMultiplyByRadixPower(y, i - t - 1);
            r = RSAUtils.biSubtract(r, RSAUtils.biMultiplyDigit(b, q.digits[i - t - 1]));
            if (r.isNeg) {
                r = RSAUtils.biAdd(r, b);
                --q.digits[i - t - 1];
            }
        }
        r = RSAUtils.biShiftRight(r, lambda);
        // Fiddle with the signs and stuff to make sure that 0 <= r < y.
        q.isNeg = x.isNeg != origYIsNeg;
        if (x.isNeg) {
            if (origYIsNeg) {
                q = RSAUtils.biAdd(q, bigOne);
            }
            else {
                q = RSAUtils.biSubtract(q, bigOne);
            }
            y = RSAUtils.biShiftRight(y, lambda);
            r = RSAUtils.biSubtract(y, r);
        }
        // Check for the unbelievably stupid degenerate case of r == -0.
        if (r.digits[0] == 0 && RSAUtils.biHighIndex(r) == 0)
            r.isNeg = false;
        return [q, r];
    };
    RSAUtils.biDivide = function (x, y) {
        return RSAUtils.biDivideModulo(x, y)[0];
    };
    RSAUtils.biModulo = function (x, y) {
        return RSAUtils.biDivideModulo(x, y)[1];
    };
    RSAUtils.biMultiplyMod = function (x, y, m) {
        return RSAUtils.biModulo(RSAUtils.biMultiply(x, y), m);
    };
    RSAUtils.biPow = function (x, y) {
        var result = bigOne;
        var a = x;
        while (true) {
            if ((y & 1) != 0)
                result = RSAUtils.biMultiply(result, a);
            y >>= 1;
            if (y == 0)
                break;
            a = RSAUtils.biMultiply(a, a);
        }
        return result;
    };
    RSAUtils.biPowMod = function (x, y, m) {
        var result = bigOne;
        var a = x;
        var k = y;
        while (true) {
            if ((k.digits[0] & 1) != 0)
                result = RSAUtils.biMultiplyMod(result, a, m);
            k = RSAUtils.biShiftRight(k, 1);
            if (k.digits[0] == 0 && RSAUtils.biHighIndex(k) == 0)
                break;
            a = RSAUtils.biMultiplyMod(a, a, m);
        }
        return result;
    };
    $w.BarrettMu = function (m) {
        this.modulus = RSAUtils.biCopy(m);
        this.k = RSAUtils.biHighIndex(this.modulus) + 1;
        var b2k = new BigInt();
        b2k.digits[2 * this.k] = 1; // b2k = b^(2k)
        this.mu = RSAUtils.biDivide(b2k, this.modulus);
        this.bkplus1 = new BigInt();
        this.bkplus1.digits[this.k + 1] = 1; // bkplus1 = b^(k+1)
        this.modulo = BarrettMu_modulo;
        this.multiplyMod = BarrettMu_multiplyMod;
        this.powMod = BarrettMu_powMod;
    };
    function BarrettMu_modulo(x) {
        var $dmath = RSAUtils;
        var q1 = $dmath.biDivideByRadixPower(x, this.k - 1);
        var q2 = $dmath.biMultiply(q1, this.mu);
        var q3 = $dmath.biDivideByRadixPower(q2, this.k + 1);
        var r1 = $dmath.biModuloByRadixPower(x, this.k + 1);
        var r2term = $dmath.biMultiply(q3, this.modulus);
        var r2 = $dmath.biModuloByRadixPower(r2term, this.k + 1);
        var r = $dmath.biSubtract(r1, r2);
        if (r.isNeg) {
            r = $dmath.biAdd(r, this.bkplus1);
        }
        var rgtem = $dmath.biCompare(r, this.modulus) >= 0;
        while (rgtem) {
            r = $dmath.biSubtract(r, this.modulus);
            rgtem = $dmath.biCompare(r, this.modulus) >= 0;
        }
        return r;
    }
    function BarrettMu_multiplyMod(x, y) {
        /*
        x = this.modulo(x);
        y = this.modulo(y);
        */
        var xy = RSAUtils.biMultiply(x, y);
        return this.modulo(xy);
    }
    function BarrettMu_powMod(x, y) {
        var result = new BigInt();
        result.digits[0] = 1;
        var a = x;
        var k = y;
        while (true) {
            if ((k.digits[0] & 1) != 0)
                result = this.multiplyMod(result, a);
            k = RSAUtils.biShiftRight(k, 1);
            if (k.digits[0] == 0 && RSAUtils.biHighIndex(k) == 0)
                break;
            a = this.multiplyMod(a, a);
        }
        return result;
    }
    var RSAKeyPair = function (encryptionExponent, decryptionExponent, modulus) {
        var $dmath = RSAUtils;
        this.e = $dmath.biFromHex(encryptionExponent);
        this.d = $dmath.biFromHex(decryptionExponent);
        this.m = $dmath.biFromHex(modulus);
        // We can do two bytes per digit, so
        // chunkSize = 2 * (number of digits in modulus - 1).
        // Since biHighIndex returns the high index, not the number of digits, 1 has
        // already been subtracted.
        this.chunkSize = 2 * $dmath.biHighIndex(this.m);
        this.radix = 16;
        this.barrett = new $w.BarrettMu(this.m);
    };
    RSAUtils.getKeyPair = function (encryptionExponent, decryptionExponent, modulus) {
        return new RSAKeyPair(encryptionExponent, decryptionExponent, modulus);
    };
    if (typeof $w.twoDigit === 'undefined') {
        $w.twoDigit = function (n) {
            return (n < 10 ? "0" : "") + String(n);
        };
    }
    // Altered by Rob Saunders (rob@robsaunders.net). New routine pads the
    // string after it has been converted to an array. This fixes an
    // incompatibility with Flash MX's ActionScript.
    RSAUtils.encryptedString = function (key, s) {
        var a = [];
        var sl = s.length;
        var i = 0;
        while (i < sl) {
            a[i] = s.charCodeAt(i);
            i++;
        }
        while (a.length % key.chunkSize != 0) {
            a[i++] = 0;
        }
        var al = a.length;
        var result = "";
        var j, k, block;
        for (i = 0; i < al; i += key.chunkSize) {
            block = new BigInt();
            j = 0;
            for (k = i; k < i + key.chunkSize; ++j) {
                block.digits[j] = a[k++];
                block.digits[j] += a[k++] << 8;
            }
            var crypt = key.barrett.powMod(block, key.e);
            var text = key.radix == 16 ? RSAUtils.biToHex(crypt) : RSAUtils.biToString(crypt, key.radix);
            result += text + " ";
        }
        return result.substring(0, result.length - 1); // Remove last space.
    };
    RSAUtils.decryptedString = function (key, s) {
        var blocks = s.split(" ");
        var result = "";
        var i, j, block;
        for (i = 0; i < blocks.length; ++i) {
            var bi;
            if (key.radix == 16) {
                bi = RSAUtils.biFromHex(blocks[i]);
            }
            else {
                bi = RSAUtils.biFromString(blocks[i], key.radix);
            }
            block = key.barrett.powMod(bi, key.d);
            for (j = 0; j <= RSAUtils.biHighIndex(block); ++j) {
                result += String.fromCharCode(block.digits[j] & 255, block.digits[j] >> 8);
            }
        }
        // Remove trailing null, if any.
        if (result.charCodeAt(result.length - 1) == 0) {
            result = result.substring(0, result.length - 1);
        }
        return result;
    };
    RSAUtils.setMaxDigits(130);
    return RSAUtils;
});

define('rxmgsturd', [], function () {
    var g = {};
    //单击最大时长
    g.duration = 280;
    //长按的时长
    g.pressDuration = 320;
    //  判断swipe 在收到几个 move 时候开始
    g.swipeStartPos = 2;
    // 几个 touchmove 发出一次swipe
    g.swipeInterval = 1;
    //移动敏感度
    g.thresholdmove = 0.05;
    g.xyMulti = 2;
    return g;
});

//// <reference path="../../../../../../orm/jslib/rxm/ormImport.js" />
define('rxmGstr', ['RxmGstrtmr', 'RxmGstrEsy', 'rxmgsturd'], function (pressTimer, esy, defval) {
    var the;
    var gdefautl = {};
    $.extend(gdefautl, {
        //
        //单击
        tap: 'tap',
        //单击开始
        touchStart: "touchStart",
        //单击移动
        touchMove: "touchMove",
        //单击结束
        touchEnd: "touchEnd",
        //滑动开始
        swipeStart: 'swipeStart',
        //正在滑动
        swipeMove: 'swipeMove',
        //滑动结束
        swipeEnd: 'swipeEnd',
        //开始向上滑动
        swipeUpStart: 'swipeUpStart',
        //开始向下滑动
        swipeDownStart: 'swipeDownStart',
        //开始向左滑动
        swipeLeftStart: 'swipeLeftStart',
        //开始向右滑动
        swipeRightStart: 'swipeRightStart',
        //正在向上滑动
        swipeUpMove: 'swipeUpMove',
        //正在向下滑动
        swipeDownMove: 'swipeDownMove',
        //正在向左滑动
        swipeLeftMove: 'swipeLeftMove',
        //正在向右滑动
        swipeRightMove: 'swipeRightMove',
        //向左滑动结束
        swipeLeftEnd: 'swipeLeftEnd',
        //向右滑动结束
        swipeRightEnd: 'swipeRightEnd',
        //向上滑动结束
        swipeUpEnd: 'swipeUpEnd',
        //向下滑动结束
        swipeDownEnd: 'swipeDownEnd',
        //长按
        press: 'press'
    });
    var cls = function (startTouch, movePath, endTouch, position) {
        ///<param name="startTouch"  type="ormGestureArg.touch"></param>
        ///<param name="movePath"  type="Array"  elementType="ormGestureArg.touch"></param>
        ///<param name="endTouch"  type="ormGestureArg.touch"></param>
        ///<param name="position"  value="ormGestureArg.calResult"></param>
        this.data = {
            startTouch: startTouch,
            movePath: movePath,
            endTouch: endTouch,
            //isSwipe: false,
            position: position,
            curSwipe: "",
            moveCount: 0,
            hasMove: false
        };
        this.defval = defval;
        var capableDevicesInUserAgentString = ['iPad', 'iPhone', 'iPod', 'Mobile Safari', 'Android']; // basic functionality such as swipe, pinch, rotate, tap should work on every mobile safari, e.g. GalaxyTab
        this.hasGestures = (function () { var _i; for (_i = 0; _i < capableDevicesInUserAgentString.length; _i++) {
            if (window.navigator.userAgent.indexOf(capableDevicesInUserAgentString[_i]) !== -1) {
                return true;
            }
        } return false; })();
    };
    cls.prototype.start = function (evt, touch) {
        //event.preventDefault();
        ///<param name="evt"  value="ormGestureArg.touchEvent"></param>
        ///<param name="touch"  type="ormGestureArg.touch"></param>
        var msgGesture = gdefautl;
        this.data.startTouch = $.extend(true, {}, touch);
        this.data.moveCount = 0;
        this.data.position = undefined;
        this.data.curSwipe = "";
        this.data.movePath = [];
        this.data.initSwipe = "";
        this.data.hasMove = false;
        if (jQuery.event.global[msgGesture.touchStart]) {
            $(touch.target).trigger(msgGesture.touchStart, this.data.startTouch);
        }
        ;
        return false;
    };
    cls.prototype._clone = function (args) {
        var ret = args ? $.extend(true, {}, args) : $.extend(true, {}, {
            startTouch: this.data.startTouch,
            moveCount: this.data.moveCount,
            position: this.data.position,
            curSwipe: this.data.curSwipe,
            movePath: this.data.movePath,
        });
        return ret;
    };
    cls.prototype._swipeDirection = function (a) {
        ///<param  name="a"  value="this._clone()"></param>
        var defVal = defval;
        var dx = this.data.position.delta[0].startX || 0;
        var dy = this.data.position.delta[0].startY || 0;
        if (Math.abs(dx) > defVal.xyMulti * Math.abs(dy)) {
            this.data.curSwipe = dx < 0 ? "Left" : "Right";
        }
        else if (Math.abs(dy) > defVal.xyMulti * Math.abs(dx)) {
            this.data.curSwipe = dy < 0 ? "Up" : "Down";
        }
        else {
            this.data.curSwipe = "none";
        }
        ;
    };
    cls.prototype.move = function (evt, touch) {
        this.data.hasMove = true;
        var msgGesture = gdefautl;
        ///<param name="evt"  value="ormGestureArg.touchEvent"></param>
        ///<param name="touch"  type="ormGestureArg.touch"></param>
        var defValue = defval;
        var tmp = this.data.moveCount - defValue.swipeStartPos;
        this.data.movePath.push(touch);
        this.data.moveCount++;
        var tmp = this.data.moveCount - defValue.swipeStartPos;
        this.calPosition(evt, touch);
        //console.info(Math.ceil((tmp = this.data.moveCount - defValue.swipeStartPos) / (defValue.swipeInterval * 1.0)), parseInt(tmp / (defValue.swipeInterval * 1.0)), tmp);
        var r = this._clone();
        var $target = $(touch.target);
        if ($.event.global[msgGesture.touchMove]) {
            r = this._clone(r);
            r.type = msgGesture.touchMove;
            $target.trigger(msgGesture.touchMove, r);
        }
        ;
        if (this.data.moveCount == defValue.swipeStartPos) {
            //swipe  direction  
            this._swipeDirection(r);
            r.curSwipe = this.data.curSwipe;
            if ($.event.global[msgGesture.swipeStart]) {
                r = this._clone(r);
                r.type = msgGesture.swipeStart;
                $target.trigger(msgGesture.swipeStart, r);
            }
            ;
            if (this.data.curSwipe != "none") {
                this.data.initSwipe = this.data.curSwipe;
                var arr = ["swipe"];
                arr.push(this.data.curSwipe);
                arr.push("Start");
                var s = arr.join("");
                if ($.event.global[s])
                    ;
                r = this._clone(r);
                r.type = s;
                $target.trigger(s, r);
            }
            if ($.event.global[msgGesture.swipeStart]) {
                r = this._clone(r);
                r.type = msgGesture.swipeStart;
                $target.trigger(msgGesture.swipeStart, r);
            }
        }
        else if ((tmp > 0) && Math.ceil(tmp / (defValue.swipeInterval * 1.0)) == parseInt(tmp / (defValue.swipeInterval * 1.0))) {
            if ($.event.global[msgGesture.swipeMove]) {
                r = this._clone(r);
                r.type = msgGesture.swipeMove;
                $target.trigger(msgGesture.swipeMove);
            }
            ;
            if ((r.curSwipe.length > 0) && (r.curSwipe == this.data.initSwipe) && (r.curSwipe !== "none")) {
                var arr = ["swipe"];
                arr.push(r.curSwipe);
                if (r.curSwipe == this.data.curSwipe) {
                    arr.push("Move");
                    var s = arr.join("");
                    r = this._clone(r);
                    r.type = s;
                    $target.trigger(s, r);
                }
                else {
                    //this.data.curSwipe = "none";
                    //arr.push("End");
                }
                ;
            }
            ;
            this.data.movePath = [];
        }
    };
    cls.prototype.stop = function (evt, pressCall, touch) {
        ///<param name="evt"  value="ormGestureArg.touchEvent"></param>
        ///<param name="touch"  type="ormGestureArg.touch"></param>
        var msgGesture = gdefautl;
        var $target = $(touch.target);
        if ($.event.global[msgGesture.touchEnd]) {
            var r = this._clone();
            r.type = msgGesture.touchEnd;
            ;
            $target.trigger(msgGesture.touchEnd, r);
        }
        ;
        var isMove = this.data.hasMove;
        if ((!isMove) && $.event.global[msgGesture.tap] && (touch.timestamp - this.data.startTouch.timestamp < this.defval.duration)) {
            $(touch.target).trigger(msgGesture.tap, touch);
        }
        else if (this.data.curSwipe.length > 0) {
            this.data.movePath.push(touch);
            var r = this._clone();
            if ($.event.global[msgGesture.swipeEnd]) {
                r.type = msgGesture.swipeEnd;
                $target.trigger(msgGesture.swipeEnd, touch);
            }
            ;
            if (this.data.curSwipe !== "none") {
                var arr = ['swipe'];
                arr.push(this.data.initSwipe);
                arr.push("End");
                var s = arr.join("");
                var r = this._clone();
                if ($.event.global[s]) {
                    $target.trigger(s, r);
                }
            }
        }
    };
    cls.prototype.calPosition = function (evt, touch) {
        ///<param name="evt"  value="ormGestureArg.touchEvent"></param>
        ///<param name="touch"  value="ormGestureArg.touch"></param>
        var startPos = this.data.startTouch;
        var timeNow = new Date().getTime();
        var lastPos = this.data.position;
        var direction;
        var delta;
        // calculate touch differences
        if (touch) {
            // store delta values
            delta = [
                {
                    lastX: $.isExist(lastPos) && lastPos.delta[0] ? lastPos.delta[0].startX : 0,
                    lastY: $.isExist(lastPos) && lastPos.delta[0] ? lastPos.delta[0].startY : 0,
                    moved: null,
                    startX: touch.screenX - startPos.screenX,
                    startY: touch.screenY - startPos.screenY
                }
            ];
            direction = {
                vector: null,
                orientation: window.orientation || null,
                lastX: ((delta[0].lastX > 0) ? +1 : ((delta[0].lastX < 0) ? -1 : 0)),
                lastY: ((delta[0].lastY > 0) ? +1 : ((delta[0].lastY < 0) ? -1 : 0)),
                startX: ((delta[0].startX > 0) ? +1 : ((delta[0].startX < 0) ? -1 : 0)),
                startY: ((delta[0].startY > 0) ? +1 : ((delta[0].startY < 0) ? -1 : 0))
            };
            // calculate distance traveled using the pythagorean theorem
            delta[0].moved = Math.sqrt(Math.pow(Math.abs(delta[0].startX), 2) + Math.pow(Math.abs(delta[0].startY), 2));
        }
        var r = {
            type: touch.type,
            originalEvent: "ormGesture" || null,
            delta: delta || null,
            direction: direction || { orientation: window.orientation || null, vector: null },
            duration: timeNow - this.data.startTouch.timestamp,
            rotation: null,
            scale: null
        };
        this.data.position = r;
        return r;
    };
    cls.prototype._onTouchstart = function (evt) {
        var msgGesture = gdefautl;
        if (the.hasGestures) {
            document.body.addEventListener('touchmove', cls.prototype._onTouchmove, false);
            document.body.addEventListener('touchend', cls.prototype._onTouchend, false);
        }
        // event substitution
        else {
            //			evt.currentTarget.addEventListener('mousemove', _onTouchmove, false);
            //			evt.currentTarget.addEventListener('mouseup', _onTouchend, false);
            $(document.body).on('mousemove', cls.prototype._onTouchmove);
            $(document.body).on('mouseup', cls.prototype._onTouchend);
        }
        if (jQuery.event.global[msgGesture.press]) {
            pressTimer.start(evt);
        }
        var touch = evt.touches;
        touch = touch ? touch[0] : evt;
        touch.timestamp = new Date().getTime();
        the.start(evt, touch);
        //console.info("_onTouchstart end");
        return false;
    };
    cls.prototype._onTouchmove = function (evt) {
        var msgGesture = gdefautl;
        if (jQuery.event.global[msgGesture.press]) {
            pressTimer.stop();
        }
        var touch = evt.changedTouches[0];
        touch.timestamp = new Date().getTime();
        ;
        the.move(evt, touch);
    };
    cls.prototype._onTouchend = function (evt, pressCall) {
        //console.info("_onTouchend");
        document.body.removeEventListener('touchmove', cls.prototype._onTouchmove, false);
        document.body.removeEventListener('touchend', cls.prototype._onTouchend, false);
        if (pressTimer.alreadyPress()) {
            event.preventDefault();
            event.stopPropagation();
            var msgGesture = gdefautl;
            var $target = $(evt.changedTouches[0].target);
            if ($.event.global[msgGesture.touchEnd]) {
                var r = this._clone();
                r.type = msgGesture.touchEnd;
                ;
                $target.trigger(msgGesture.touchEnd, r);
            }
            ;
            return false;
        }
        else {
            pressTimer.stop();
            var touch = evt.changedTouches[0];
            //var touch = evt.touches;
            //touch = touch ? touch[0] : evt;
            touch.timestamp = new Date().getTime();
            the.stop(evt, pressCall, touch);
            //console.info("_onTouchend", "end");
            //return false;
        }
    };
    if (document.body.addEventListener) {
        document.body.addEventListener('touchstart', cls.prototype._onTouchstart, false);
    }
    else if (_$element.get(0).attachEvent) {
        ///micsoft
        document.body.attachEvent('touchstart', cls.prototype._onTouchstart, false);
    }
    ;
    the = new cls();
    return the;
});

define('RxmGstrEsy', ['RxmAppTool'], function (t) {
    if (typeof $.isExit === "undefined") {
        $.extend({
            isString: function (it) {
                return (typeof it == "string" || it instanceof String); // Boolean
            }
        });
        $.extend({
            isDom: (typeof HTMLElement === 'object') ?
                function (obj) {
                    return obj instanceof HTMLElement;
                } :
                function (obj) {
                    return obj && typeof obj === 'object' && obj.nodeType === 1 && typeof obj.nodeName === 'string';
                }
        });
        $.extend({
            isExist: function (obj) {
                return (typeof obj !== "undefinded") && (obj != null);
            },
            isJquery: function (obj) {
                return (obj instanceof jQuery);
            }
        });
    }
    ;
    var rxmEv = function () {
    };
    if (!$.prototype.tap) {
        /**
         * 轻按手势
         * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
         * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
         * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
         * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
         */
        $.prototype.tap = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on("tap", selector, data, fn, one);
            }
            else {
                this.on("click", selector, data, fn, one);
            }
            return this;
        };
        /**
        * 长按手势
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.press = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on("press", selector, data, fn, one);
            }
            return this;
        };
        /**
        * touchStart，相当于touchstart
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.touchStart = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on("touchStart", selector, data, fn, one);
            }
            return this;
        };
        /**
        * touchMove，相当于touchmove
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.touchMove = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on("touchMove", selector, data, fn, one);
            }
            return this;
        };
        /**
        * touch事件结束，相当于touchend<
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.touchEnd = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on("touchEnd", selector, data, fn, one);
            }
            return this;
        };
        /**
        * 滑动开始，不区分方向
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.swipeStart = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on('swipeStart', selector, data, fn, one);
            }
            return this;
        };
        /**
        * 正在滑动，不区分方向
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.swipeMove = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on('swipeMove', selector, data, fn, one);
            }
            return this;
        };
        /**
        * 滑动结束，不区分方向
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.swipeEnd = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on('swipeEnd', selector, data, fn, one);
            }
            return this;
        };
        /**
        * 向上滑动开始
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.swipeUpStart = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on('swipeUpStart', selector, data, fn, one);
            }
            return this;
        };
        /**
        * 向下滑动开始
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.swipeDownStart = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on('swipeDownStart', selector, data, fn, one);
            }
            return this;
        };
        /**
        * 向左滑动开始
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.swipeLeftStart = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on('swipeLeftStart', selector, data, fn, one);
            }
            ;
            return this;
        };
        /**
        * 向右滑动开始
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.swipeRightStart = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on('swipeRightStart', selector, data, fn, one);
            }
            return this;
        };
        /**
        * 向上滑动
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.swipeUpMove = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on('swipeUpMove', selector, data, fn, one);
            }
            return this;
        };
        /**
        * 向下滑动
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.swipeDownMove = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on('swipeDownMove', selector, data, fn, one);
            }
            return this;
        };
        /**
        * 向左滑动
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.swipeLeftMove = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on('swipeLeftMove', selector, data, fn, one);
            }
            return this;
        };
        /**
        * 向右滑动
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.swipeRightMove = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on('swipeRightMove', selector, data, fn, one);
            }
            return this;
        };
        /**
        * 向左滑动结束
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.swipeLeftEnd = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on('swipeLeftEnd', selector, data, fn, one);
            }
            return this;
        };
        /**
        * 向右滑动结束
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.swipeRightEnd = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on('swipeRightEnd', selector, data, fn, one);
            }
            return this;
        };
        /**
        * 向上滑动结束
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.swipeUpEnd = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on('swipeUpEnd', selector, data, fn, one);
            }
            return this;
        };
        /**
        * 向下滑动结束
        * @param  {String} selector 子代选择器 参考 http://api.jquery.com/on/
        * @param  {Object} data 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Function} fn 事件激活时需要传递的数据 参考 http://api.jquery.com/on/
        * @param  {Boolean} one 事件是否只是执行一次 参考 http://api.jquery.com/on/
        */
        $.prototype.swipeDownEnd = function (selector, data, fn, one) {
            if (t.isAndriod() || t.isIOS()) {
                this.on('swipeDownEnd', selector, data, fn, one);
            }
            return this;
        };
    }
    return rxmEv;
});

define('RxmGstrtmr', ['rxmgsturd'], function (defVal) {
    var the;
    $.extend({
        isString: function (it) {
            return (typeof it == "string" || it instanceof String); // Boolean
        }
    });
    $.extend({
        isDom: (typeof HTMLElement === 'object') ?
            function (obj) {
                return obj instanceof HTMLElement;
            } :
            function (obj) {
                return obj && typeof obj === 'object' && obj.nodeType === 1 && typeof obj.nodeName === 'string';
            }
    });
    $.extend({
        isExist: function (obj) {
            ///<summary>判断对象不是 undefined 和 null</summary>
            ///<param name="obj" type="Object">对象</param>
            return (typeof obj !== "undefinded") && (obj != null);
        }
    });
    function cls() {
        this.evtArr = [];
        this.intervalID;
        this._alreadyPress = false;
    }
    ;
    cls.prototype.alreadyPress = function (isPress) {
        if ($.isExist(isPress)) {
            this._alreadyPress = isPress;
        }
        return this._alreadyPress;
    };
    cls.prototype.start = function (evt) {
        this._alreadyPress = false;
        var pressTimer = the;
        if (this.evtArr.length == 0) {
            if ($.isExist(this.intervalID)) {
                clearInterval(this.intervalID);
                this.intervalID = undefined;
            }
            this.intervalID = setInterval($.proxy(pressTimer.fire, pressTimer), defVal.pressDuration);
        }
        evt.d = evt.currentTarget;
        this.evtArr.push(evt);
    };
    cls.prototype.stop = function () {
        this._alreadyPress = false;
        if ($.isExist(this.intervalID)) {
            clearInterval(this.intervalID);
            this.intervalID = undefined;
            this.evtArr = [];
        }
        // console.info("stop" + this.intervalID)
    };
    cls.prototype.fire = function () {
        this._alreadyPress = true;
        if ($.isExist(this.intervalID)) {
            clearInterval(this.intervalID);
            this.intervalID = undefined;
            var eArr = this.evtArr;
            this.evtArr = [];
            $.each(eArr, function (index, evt) {
                evt.currentTarget = evt.d;
                the._fire(evt);
            });
        }
    };
    cls.prototype._fire = function (evt) {
        ///<param name="evt"  value="ormGestureArg.touchEvent"></param>
        ///<param name="touch"  type="ormGestureArg.touch"></param>
        var touch = $.extend(true, {}, evt.changedTouches[0] || evt.touches[0]);
        touch.timestamp = new Date().getTime();
        $target = $(touch.target);
        if ($.event.global["press"]) {
            $target.trigger("press", touch);
        }
    };
    the = new cls();
    return the;
});

define('RxmBufferGrid', [require.rxm.Util, 'RxmAppTool'], function (Util, appTool) {
    var clsdef = {
        rxmPath: require.rxm.BufferGrid,
        clsName: 'rxm-buffer-grid',
        juryFn: 'rxmBufferGrid'
    };
    /**
     * @param  {{cId:String,id:String}} cfg
     */
    var ClsFactory = function (cfg) {
        var id;
        var thisObj;
        (cfg) && (cfg.id) && (id = cfg.id);
        if (id) {
            /** @type {Cls} */
            thisObj = $('#' + id).data(clsdef.rxmPath);
            if (thisObj) {
                if ($.isArray(cfg.override)) {
                    for (var f in cfg.override) {
                        thisObj[f] = override[f];
                    }
                }
                return thisObj;
            }
        }
        var arrObj;
        $.isArray(cfg) && (arrObj = cfg);
        var RxmBufferGrid = function () {
            /**
            * 表格初始化配置对象
            */
            this._config = {
                //gridWrap 唯一id
                id: appTool.unid() + "",
                //数据选中 单选[radio]还是多选[checkbox],默认checkbox
                multi: true,
                //数据表显示模式  custom:定制表格高度（包裹器，表格高度） auto:包裹器与表格根据数据自动填充高度
                viewMode: "custom",
                //数据是否换行，还是隐藏多余字符(true 省略多余字符,其他字符用三个点代替  false 换行显示所有内容 ) 默认省略多余字符
                textEllipsis: true,
                //行（列）头信息
                layout: [],
                //工具栏
                toolbar: [],
                //行点击事件
                rowevent: [],
                refreshTip: {
                    nodataTip: "暂无数据！"
                },
                leftSlideParam: {
                    btnWidth: 60,
                    viewWidth: 60,
                    traDuration: "200",
                    traFunction: "ease-out" //开始到结束的过渡效果 默认以慢速结束的过渡效果
                },
                trRowParam: {
                    iconWidth: 55,
                    parHeight: 21,
                    dataMargin: 16,
                    trMargin: 20 //tr距离屏幕左右边距
                },
                //表格数据对象，数组类型，数组元素为json对象
                data: []
            };
            //获取html定义属性生成表格config对象
            var htmlCfg = getHtmlAttr(cfg.id);
            this._config = $.extend(true, this._config, htmlCfg, cfg);
            this._arrowImg = getServer() + "/www/modules/utils/img/arrow-right.png";
            //包裹器高度
            this.wrapHeight = document.body.scrollHeight;
            //全选状态标志  默认为true
            this._allChecked = true;
            //长按状态标志  默认为false
            this._pressFlag = false;
            //点击、长按事件返回数据参数
            this._pageInfo = {
                curPage: 1,
                pageData: [],
                dataCount: 0,
                pageCount: 1 //总页数
            };
            this.$gridWrap = $("#" + this._config.id);
            if (this.$gridWrap.length == 0) {
                console.error("id=" + this._config.id + "表格不存在");
            }
            this.$titlebar = $("");
            this.$toolbar = $("");
            this.$searchbar = $("");
            this.$gridContent = $("");
            this.$tableBody = $("");
            this.$tBody = $("");
            this._isRender = false;
            //滑动菜单全局变量定义
            this.slideCurSwipeTr; //当前左滑的对象
            this.slideLastSwipeTr; //上一个左滑的对象 
            this.btnAreaWidth;
            this.dataParNum = this._config.layout.length;
            this.scrollDivWidth;
            this.dataDivWidth;
            this.iconMargin;
            //行数据中具有icon列
            this._hasIcon = false;
        };
        /**
        * 获取html表格属性 重组config对象
        * @param {String} wrapId  - 表格包裹器ID
        * @returns {Object} gridCfg - config对象
        */
        function getHtmlAttr(wrapId) {
            //表格config对象定义
            var gridCfg = {};
            //表格layout
            var layout = [];
            //桌面端是否显示行索引值
            var idx = false;
            //表格包裹器对象
            var $gridWrap = $("#" + wrapId);
            //获取表格每列属性值与名称  
            //移动端端 获取具有mview的列
            var tabth = $("#" + wrapId + " .rxm-table-head th[mview]").not("[hidden]");
            if (isDesktop(wrapId)) {
                //桌面端 排除具有hidden属性的列
                tabth = $("#" + wrapId + " .rxm-table-head th").not("[hidden]");
            }
            //迭代表格列属性
            for (var i = 0; i < tabth.length; i++) {
                //判断列表是否显示索引号列
                if ($(tabth[i]).is(".index")) {
                    idx = true;
                }
                //判断列表是否显示多行框列
                if ($(tabth[i]).is(".ormmulti")) {
                    if ($(tabth[i]).children("input").attr("type") == "checkbox") {
                        gridCfg.multi = true;
                    }
                    if ($(tabth[i]).children("input").attr("type") == "radio") {
                        gridCfg.multi = false;
                    }
                }
                //layout属性设定
                if (typeof ($(tabth[i]).attr("fieldvalue")) != "undefined") {
                    var lo = {};
                    lo.name = $(tabth[i]).text();
                    lo.field = $(tabth[i]).attr("fieldvalue");
                    layout.push(lo);
                }
            }
            //设置行索引值
            gridCfg.index = idx;
            //设置layout
            gridCfg.layout = layout;
            //单选[radio]还是多选[checkbox],默认checkbox
            if (typeof ($gridWrap.attr("rxmmulti")) != "undefined") {
                if ($gridWrap.attr("rxmmulti") == 'true') {
                    gridCfg.multi = true;
                }
                else {
                    gridCfg.multi = false;
                }
            }
            //数据表显示模式 custom:定制表格高度（包裹器，表格高度） auto:包裹器与表格根据数据自动填充高度
            if (typeof ($gridWrap.attr("rxmviewmode")) != "undefined") {
                gridCfg.viewMode = $gridWrap.attr("rxmviewmode");
            }
            //数据行图标区域宽度
            if (typeof ($gridWrap.attr("rxmrowiconwidth")) != "undefined") {
                gridCfg.trRowParam.iconWidth = $gridWrap.attr("rxmrowiconwidth");
            }
            //数据行数据字段单个高度
            if (typeof ($gridWrap.attr("rxmrowparheight")) != "undefined") {
                gridCfg.trRowParam.parHeight = $gridWrap.attr("rxmrowparheight");
            }
            //数据行数据显示div距离上下边距
            if (typeof ($gridWrap.attr("rxmrowdatamargin")) != "undefined") {
                gridCfg.trRowParam.dataMargin = $gridWrap.attr("rxmrowdatamargin");
            }
            //数据行距离屏幕左右边距
            if (typeof ($gridWrap.attr("rxmrowtrmargin")) != "undefined") {
                gridCfg.trRowParam.trMargin = $gridWrap.attr("rxmrowtrmargin");
            }
            //左滑菜单每个选项默认宽度
            if (typeof ($gridWrap.attr("rxmleftbtnwidth")) != "undefined") {
                gridCfg.leftSlideParam.btnWidth = $gridWrap.attr("rxmleftbtnwidth");
            }
            //左滑出现菜单区域的最小距离值，小于此值则隐藏 
            if (typeof ($gridWrap.attr("rxmviwemaxlen")) != "undefined") {
                gridCfg.leftSlideParam.viewWidth = $gridWrap.attr("rxmviwemaxlen");
            }
            //左滑菜单滑动隐藏时间设定 
            if (typeof ($gridWrap.attr("rxmleftaduration")) != "undefined") {
                gridCfg.leftSlideParam.traDuration = $gridWrap.attr("rxmleftaduration");
            }
            return gridCfg;
        }
        ///所有的自定义消息 
        RxmBufferGrid.msgEnum = {
            appendRow: "append",
            insertRow: "insert",
            deleteRow: "delete",
            updateRow: "update",
            ormRereshGridView: "ormRereshGridView",
            tapInLine: "tapInLine",
            pressInLine: "pressInLine"
        };
        RxmBufferGrid.prototype.getRowViewIndex = function (domElement) {
            ///<summary>根据domelement信息获取所在的视图行索引</summary>
            ///<param>tr dom对象</param>
            var $tr = $(domElement).closest("tr");
            index = this.$tBody.find("tr").index($tr);
            return index;
        };
        RxmBufferGrid.prototype.getAllData = function () {
            ///<summary> 获取当前表格所有数据</summary>
            var cf = this._config;
            return cf.data;
        };
        RxmBufferGrid.prototype.getSelectedRow = function () {
            ///<summary> 获取当前选择行索引 </summary>
            ///<return type="Array"  elementType="Number">索引数组</param>
            var selectedIdxArr = [];
            var $tableBody = this.$gridWrap.find(".rxm-s-grid-table tbody");
            //获取表格所有tr对象
            var $gridTr = $tableBody.find("tr");
            $tableBody.find("input:checked").each(function () {
                var index = $gridTr.index($(this).closest("tr"));
                selectedIdxArr.push(index);
            });
            return selectedIdxArr;
        };
        RxmBufferGrid.prototype.getSelectedData = function (bClone) {
            ///<summary> 获取选中数据</summary>
            var rows = this.getSelectedRow();
            var rd = this.getRowDataByViewIndexs(rows, bClone);
            return rd;
        };
        /**
        * 获取滑动行数据
        * @param {String} domElement - dom选择器
        * @returns {Object} rd - 当前滑动行数据对象
        */
        RxmBufferGrid.prototype.getSlideRowData = function (domElement, bClone) {
            var rows = this.getRowViewIndex(domElement);
            var rd = this.getRowDataByViewIndexs(rows, bClone);
            return rd;
        };
        RxmBufferGrid.prototype.checkRow = function (viewIndexs) {
            ///<summary> 通过index选中一行、多行或者全选 </summary>
            ///<param  name ="viewIndexs"  type="Number">行索引 此参数可为数字、数组、空<param>
            //获取表格中所有checkbox  jquery对象
            var $checkTr = this.$gridWrap.find("input[name='s_gird_multi_" + this._config.id + "']");
            //参数为数字,选中单行
            if ($.isNumeric(viewIndexs)) {
                $($checkTr[viewIndexs]).prop("checked", true);
            }
            else if ($.isArray(viewIndexs)) {
                //参数为数组,选中多行
                $.each(viewIndexs, function (index, it) {
                    $($checkTr[it]).prop("checked", true);
                });
            }
            else {
                //参数为为空,全选
                $checkTr.prop("checked", true);
            }
        };
        RxmBufferGrid.prototype.uncheckRow = function (viewIndexs) {
            ///<summary> 通过index取消选中一行、多行或者全部 </summary>
            ///<param  name ="viewIndexs"  type="Number">行索引 此参数可为数字、数组、空<param>
            //获取表格中所有checkbox  jquery对象
            var $checkTr = this.$gridWrap.find("input[name='s_gird_multi_" + this._config.id + "']");
            //参数为数字,选中单行
            if ($.isNumeric(viewIndexs)) {
                $($checkTr[viewIndexs]).prop("checked", false);
            }
            else if ($.isArray(viewIndexs)) {
                //参数为数组,选中多行
                $.each(viewIndexs, function (index, it) {
                    $($checkTr[it]).prop("checked", false);
                });
            }
            else {
                //参数为为空,全选
                $checkTr.prop("checked", false);
            }
        };
        RxmBufferGrid.prototype.appendRow = function (rows) {
            ///<summary> 追加数据 </summary>
            ///<param name="rows" type="Array">当前页数据</param>
            ///<param name="beginPageNum" type="number">起始页面码数</param>
        };
        RxmBufferGrid.prototype.insertRow = function (arg) {
            ///<summary> 插入数据 </summary>
            ///<param name="arg" type="Array">插入数据数组</param>
            var dArr = this._config.data;
            var cf = this._config;
            var viewIndexs = [];
            for (var item in arg) {
                var n = parseInt(item);
                viewIndexs.push(n);
            }
            viewIndexs.sort(function (a, b) {
                return b - a;
            });
            $.each(viewIndexs, function (index, it) {
                it = arg[it];
                var its = [];
                if (!$.isArray(it))
                    its.push(it);
                else
                    its = it;
                for (var i = 0; i < its.length; i++) {
                    dArr.splice(index, 0, its[i]);
                    ///
                }
            });
        };
        RxmBufferGrid.prototype.deleteRow = function (viewIndexs) {
            ///<summary> 删除数据 </summary>
            ///<param  name ="viewIndexs"  type="Array">删除数据的行索引数组<param>
            var dArr = this._config.data;
            var cf = this._config;
            if ($.isNumeric(viewIndexs)) {
                var t = viewIndexs;
                viewIndexs = [];
                viewIndexs.push(t);
            }
            viewIndexs.sort(function (a, b) {
                return b - a;
            });
            var trs = this.$gridWrap.find("tr");
            $.each(viewIndexs, function (index, it) {
                var cache = it;
                dArr.splice(cache, 1);
                $(trs[it]).remove();
            });
        };
        RxmBufferGrid.prototype.updateRow = function (arg) {
            ///<summary> 更新行数据 </summary>
            ///<param  name ="arg"  type="Array">更新数据的行索<param>
            var the = this;
            var dArr = this._config.data;
            var cf = this._config;
            var viewIndexs = [];
            for (var item in arg) {
                var n = parseInt(item);
                viewIndexs.push(n);
            }
            viewIndexs.sort(function (a, b) {
                return b - a;
            });
            $.each(viewIndexs, function (index, it) {
                // index = the.chgIndexViewToCache(index);
                var item = $.extend(dArr[i], arg[it]);
                dArr.splice(it, 1, item);
            });
        };
        RxmBufferGrid.prototype.getPageInfo = function () {
            ///<summary> 获取page信息</summary>
            return this._pageInfo;
        };
        RxmBufferGrid.prototype.reload = function (arg) {
            ///<summary> 重新加载表格(数据更新) </summary>
            ///<param  name ="arg"  type="Array">数组数据,数组元素为json对象<param>
            if (!this._isRender) {
                //判断是否为桌面版
                if (isDesktop(this._config.id)) {
                    this._renderPc();
                }
                else {
                    this._render();
                }
                this._isRender = true;
            }
            if (arg && arg.data) {
                this._config.data = arg.data;
                //表格追加原数据  the._pageInfo  
                this._pageInfo.pageData = arg.data;
                this._pageInfo.dataCount = arg.data.length;
            }
            this.refresh();
        };
        RxmBufferGrid.prototype.refresh = function () {
            ///<summary> 刷新表格（视图更新） </summary>
            var cf = this._config;
            //清空表格中所有数据
            this.$tBody.empty();
            var begin = 0;
            var end = cf.data.length;
            if (cf.data) {
                //表格追加原数据  the._pageInfo  
                this._pageInfo.pageData = cf.data;
                this._pageInfo.dataCount = cf.data.length;
            }
            //循环迭代数据创建表格行
            //console.info("begin:"+begin+" end:"+end)
            var i = 0;
            if (end > 0) {
                for (var j = begin; j < end; j++) {
                    var item = this._config.data[j];
                    this.$tBody.append(this._createRow(this, item, i + 1, j));
                }
            }
            else {
                //桌面版表格,无数据时需要设置colspan
                if (isDesktop) {
                    var thLen = this.$gridWrap.find(".rxm-table-body th").length;
                    this.$tBody.append($("<tr class='rxm-nodata-tip-tr'><td class='rxm-nodata-tip' colspan = '" + thLen + "'>" + this._config.refreshTip.nodataTip + "</td></tr>"));
                }
                else {
                    this.$tBody.append($("<tr class='rxm-nodata-tip-tr'><td class='rxm-nodata-tip'>" + this._config.refreshTip.nodataTip + "</td></tr>"));
                }
            }
            //点击checkbox防止触发行事件
            if (this._config.slidemenu) {
                //左滑行 checkbox的input框放在div中
                this.$gridWrap.find(".rxm-multi-check").closest("div").tap(function () {
                    return false;
                });
            }
            else {
                //普通行 checkbox的input框放在td中
                this.$gridWrap.find(".rxm-multi-check").closest("td").tap(function () {
                    return false;
                });
            }
            //设置表格tableBody高度
            if (this._config.viewMode == "auto") {
                this.$tableBody.css("height", "auto");
            }
            else {
                //计算表格tableBody高度
                if (!!this._config.height) {
                    //处理_config.height配置参数中包含px，将px替换为空
                    if (this._config.height.toString().indexOf("px") > 0) {
                        this._config.height = this._config.height.replace('px', '');
                    }
                }
                else {
                    this._config.height = this.wrapHeight;
                    if (this.$titlebar.html() != "" && this.$titlebar.css("display") != 'none') {
                        this._config.height = this._config.height - 50;
                    }
                    if (this.$toolbar.html() != "" && this.$toolbar.css("display") != 'none') {
                        this._config.height = this._config.height - 50;
                    }
                    if (this.$searchbar.html() != "" && this.$searchbar.css("display") != 'none') {
                        this._config.height = this._config.height - 50;
                    }
                }
                //设置表格tableBody高度
                this.$tableBody.css("height", this._config.height + "px");
            }
        };
        RxmBufferGrid.prototype._render = function () {
            ///<summary> 加载视图内所有属性（表格、标题栏、工具栏、搜索栏) </summary>
            //首先检查根据ID判断表容器$gridWrap是否存在，若存在即设置容器
            // if(!this._isHtmlAttrCfg()){//false
            //     this.$gridWrap.addClass("s_grid").empty();
            // }
            this._config.textEllipsis && this.$gridWrap.addClass("rxm-s-grid-ellipsis");
            //设置包裹器高度
            if (this._config.viewMode == "auto") {
                this.$gridWrap.css("height", "auto");
            }
            else {
                if (this.$gridWrap.height() !== 0) {
                    this.wrapHeight = this.$gridWrap.height();
                }
                else {
                    var otherHeight = 0;
                    var siblings = this.$gridWrap.siblings();
                    //迭代表格包裹器同级div
                    for (var i = 0; i < siblings.length; i++) {
                        if ($(siblings[i]).css("display") != "none") {
                            //计算表格包裹器所有同级div的高度和
                            otherHeight += $(siblings[i]).height();
                        }
                    }
                    //计算表格包裹器的高度
                    this.wrapHeight = document.body.scrollHeight - otherHeight;
                }
                //设置表格包裹器的高度
                this.$gridWrap.css("height", this.wrapHeight);
            }
            //判断html文件中是否存在定制titlebar
            if (this.$gridWrap.find(".rxm-s-grid-titlebar").length == 0) {
                this.$gridWrap.append($('<div class="rxm-s-grid-titlebar"></div>'));
                this.$gridWrap.find(".rxm-s-grid-titlebar").css("display", "none");
            }
            ;
            //判断html文件中是否存在定制searchbar
            if (this.$gridWrap.find(".rxm-s-grid-searchbar").length == 0) {
                this.$gridWrap.append($('<div class="rxm-s-grid-searchbar"></div>'));
                this.$gridWrap.find(".rxm-s-grid-searchbar").css("display", "none");
            }
            ;
            //判断html文件中是否存在定制toolbar
            if (this.$gridWrap.find(".rxm-s-grid-toolbar").length == 0) {
                this.$gridWrap.append($('<div class="rxm-s-grid-toolbar"></div>'));
                this.$gridWrap.find(".rxm-s-grid-toolbar").css("display", "none");
            }
            ;
            //判断html文件中是否存在定制表格
            if (this.$gridWrap.find(".rxm-s-grid-content").length == 0) {
                this.$gridWrap.append($('<div class="rxm-s-grid-content"><div class="rxm-s-grid-table"></div></div>'));
            }
            ;
            this.$titlebar = $("#" + this._config.id + " .rxm-s-grid-titlebar");
            this.$searchbar = $("#" + this._config.id + " .rxm-s-grid-searchbar");
            this.$toolbar = $("#" + this._config.id + " .rxm-s-grid-toolbar");
            this.$gridContent = $("#" + this._config.id + " .rxm-s-grid-content");
            this.$gridWrap.on(RxmBufferGrid.msgEnum.ormRereshGridView, $.proxy(this._onRefreshView, this));
            //加载表格    标题栏、工具栏、搜索栏、表格数据
            this.renderTitleBar();
            this.renderToolbar();
            this.renderSearchBar();
            this._renderTable();
        };
        RxmBufferGrid.prototype._renderTable = function () {
            ///<summary> 渲染表格 </summary>
            var $table = this.$gridWrap.find(".rxm-s-grid-table").empty();
            //表格滚动条样式设置
            var $tableBody = $('<div class="rxm-table-body"><table class="table rxm-table-hover"><tbody></tbody></table></div>');
            $table.append($tableBody);
            this.$tableBody = this.$gridWrap.find(".rxm-table-body");
            this.$tBody = this.$gridWrap.find("tbody");
            //点击事件绑定
            this.$tableBody.tap("tr", $.proxy(this._onTapLine, this));
            //长按事件绑定
            this.$tableBody.press("tr", $.proxy(this._onPressLine, this));
            var clkFun;
            var preFun;
            for (var i = 0; i < this._config.rowevent.length; i++) {
                if (!!this._config.rowevent[i].click) {
                    clkFun = this._config.rowevent[i].click;
                }
                if (!!this._config.rowevent[i].press) {
                    preFun = this._config.rowevent[i].press;
                }
            }
            //绑定数据列表配置的所有事件
            if (!!clkFun) {
                this.bindTapLineElement({ fn: clkFun }, this);
            }
            if (!!preFun) {
                this.bindPressLineElement({ fn: preFun }, this);
            }
        };
        RxmBufferGrid.prototype._createRow = function (grid, row, rowIndex, baseIndex) {
            ///<summary> 向表格中追加一行数据 </summary>
            ///<param name="grid" type="Object">表格对象</param>
            ///<param name="row" type="Array">行数据</param>
            //渲染表格行前触发
            if (typeof (this._config.onBeforeRenderRow) == "function") {
                //可对行数据进行处理
                row = this._config.onBeforeRenderRow.apply(this, [row]) || row;
            }
            //配置tr rowevent
            var $tr = $("<tr></tr>");
            if (!!this._config.rowevent && this._config.rowevent.length > 0) {
                for (var i = 0, length = this._config.rowevent.length; i < 1; i++) {
                    var item = this._config.rowevent[i];
                    $tr = $("<tr class='" + item.field + "'></tr>");
                }
            }
            if (isDesktop(this._config.id)) {
                $tr = this.createRowInPc(row, $tr, rowIndex, baseIndex);
            }
            else {
                if (!!this._config.slidemenu && this._config.slidemenu.length > 0) {
                    $tr = this.createSlideRow(this, row, $tr);
                }
                else {
                    $tr = this.createRow(this, row, $tr);
                }
            }
            return $tr;
        };
        RxmBufferGrid.prototype.createRow = function (grid, row, $tr) {
            ///<summary> 渲染表格行数据(可重写) </summary>
            ///<param name="grid" type="Object">表格对象</param>
            ///<param name="row" type="Array">行数据</param>
            ///<param name="$tr" type="Object">表格行对象</param>
            //创建表格行数据   共4列  icon 数据内容 (标题+内容)  右向箭头   复选框(默认隐藏)  
            var $tdIcon = $('<td class="rxm-td-icon"></td>');
            var $tdInfo = $('<td></td>');
            var $tdArrow = $('<td class="rxm-td-arrow" ></td>');
            var $tdCheckbox = $('<td class="rxm-td-checkbox fix" style="display:none;"></td>');
            var firstField = '1';
            //循环创建icon与数据列
            for (var j = 0, item; item = this._config.layout[j++]; j < item.length) {
                var tdName = item.name;
                var tdValue = item.format ? item.format({ "row": row }) : row[item.field];
                if (item.field == "icon") {
                    tdValue = (tdValue || tdValue == 0) ? "" + tdValue : "";
                    $tdIcon.append(tdValue);
                    $tr.append($tdIcon);
                }
                else {
                    tdValue = (tdValue || tdValue == 0) ? "" + tdValue : "";
                    if (firstField === '1') {
                        if (tdName !== "" && tdName !== null) {
                            $tdInfo.append("<span class='rxm-col-name'>" + tdName + '&nbsp;:&nbsp;' + "</span><span class='rxm-col-value'>" + tdValue + "</span>");
                            firstField = '2';
                        }
                        else {
                            $tdInfo.append("<span class='rxm-col-value'>" + tdValue + "</span>");
                            firstField = '2';
                        }
                    }
                    else {
                        if (tdName !== "" && tdName !== null) {
                            //其他字段换行
                            $tdInfo.append("</br><span class='rxm-col-name'>" + tdName + '&nbsp;:&nbsp;' + "</span><span class='rxm-col-value'>" + tdValue + "</span>");
                        }
                        else {
                            //其他字段换行
                            $tdInfo.append("</br><span class='rxm-col-value'>" + tdValue + "</span>");
                        }
                    }
                }
                $tr.append($tdInfo);
            }
            //创建checkbox列   multi属性配置为true：多选框      false：单选按钮
            if (typeof this._config.multi != "undefined") {
                $tdCheckbox.append('<input class="rxm-multi-check" type="' + (this._config.multi ? 'checkbox' : 'radio') + '" name="s_gird_multi_' + (this._config.id) + '" ' + (row["_checked"] ? "checked" : "") + '>');
                $tr.append($tdCheckbox);
            }
            //创建箭头列 
            $tdArrow.append($('<img src="' + this._arrowImg + '"/>'));
            $tr.append($tdArrow);
            //渲染表格行后触发
            if (typeof (this._config.onAfterRenderRow) == "function") {
                this._config.onAfterRenderRow.apply($tr, [row]);
            }
            return $tr;
        };
        /**
          * 创建左滑菜单行
          * @param {Object} grid - 表格对象
          * @param {Object} row - 行数据
          * @param {Object} $tr - 表格行对象
          * @returns {Object} $tr - 表格行对象 jquery对象
          */
        RxmBufferGrid.prototype.createSlideRow = function (grid, row, $tr) {
            //创建表格行数据   共4列  icon 数据内容 (标题+内容)   复选框(默认隐藏)  
            var the = this;
            var $td = $('<td width="100%" style="padding:0px"></td>');
            var $wrapperDiv = $('<div class="rxm-slide-wrapper clearfix"></div>');
            var $scrollDiv = $('<div class="rxm-slide-scroll-wrapper clearfix"></div>');
            var $iconDiv = $('<div class="rxm-icon-div clearfix"></div>');
            var $dataDiv = $('<div class="rxm-data-div clearfix"></div>');
            var $slideBtnDiv = $('<div class="rxm-slide-btn-div clearfix"></div>');
            var $checkboxDiv = $('<div class="rxm-td-checkbox fix" style="display:none;float:left" ></div>');
            //数据字段个数
            var parNum = this._config.layout.length;
            var firstField = '1';
            //循环创建icon与数据列
            for (var j = 0, item; item = this._config.layout[j++]; j < item.length) {
                var tdName = item.name;
                var tdValue = item.format ? item.format({ "row": row }) : row[item.field];
                if (item.field == "icon") {
                    the._hasIcon = true;
                    parNum = parNum - 1;
                    tdValue = (tdValue || tdValue == 0) ? "" + tdValue : "";
                    $iconDiv.append(tdValue);
                    $scrollDiv.append($iconDiv);
                }
                else {
                    tdValue = (tdValue || tdValue == 0) ? "" + tdValue : "";
                    if (firstField === '1') {
                        if (tdName !== "" && tdName !== null) {
                            $dataDiv.append("<span class='rxm-col-name'>" + tdName + '&nbsp;:&nbsp;' + "</span><span class='rxm-col-value'>" + tdValue + "</span>");
                            firstField = '2';
                        }
                        else {
                            $dataDiv.append("<span class='rxm-col-value'>" + tdValue + "</span>");
                            firstField = '2';
                        }
                    }
                    else {
                        if (tdName !== "" && tdName !== null) {
                            //其他字段换行
                            $dataDiv.append("</br><span class='rxm-col-name'>" + tdName + '&nbsp;:&nbsp;' + "</span><span class='rxm-col-value'>" + tdValue + "</span>");
                        }
                        else {
                            //其他字段换行
                            $dataDiv.append("</br><span class='rxm-col-value'>" + tdValue + "</span>");
                        }
                    }
                }
                $scrollDiv.append($dataDiv);
            }
            //创建checkbox列   multi属性配置为true：多选框      false：单选按钮
            if (typeof this._config.multi != "undefined") {
                $checkboxDiv.append('<input class="rxm-multi-check" type="' + (this._config.multi ? 'checkbox' : 'radio') + '" name="s_gird_multi_' + (this._config.id) + '" ' + (row["_checked"] ? "checked" : "") + '>');
                $scrollDiv.append($checkboxDiv);
            }
            //渲染表格行后触发
            if (typeof (this._config.onAfterRenderRow) == "function") {
                this._config.onAfterRenderRow.apply($tr, [row]);
            }
            $scrollDiv.append($slideBtnDiv);
            $wrapperDiv.append($scrollDiv);
            $td.append($wrapperDiv);
            $tr.append($td);
            //设置tr中各个部分的div高度值、宽度值
            this._attrSlideRowStyle($slideBtnDiv, $dataDiv, $scrollDiv, $iconDiv, parNum);
            //数据行绑定touchStart触屏开始事件
            this._bindTrSlideEvent($scrollDiv);
            return $tr;
        };
        /**
         * 设置左滑行内div高度与宽度
         * @param {Number} parNum - 单个字段高度值
         */
        RxmBufferGrid.prototype._attrSlideRowStyle = function ($slideBtnDiv, $dataDiv, $scrollDiv, $iconDiv, parNum) {
            //数据div高度
            var dataDivHeight = parNum * this._config.trRowParam.parHeight;
            //滑动菜单div设置高度
            //$slideBtnDiv.height(dataDivHeight + this._config.trRowParam.dataMargin);
            $slideBtnDiv.height(dataDivHeight + this._config.trRowParam.dataMargin / 2);
            if (this._hasIcon) {
                this.iconMargin = dataDivHeight / 2 + this._config.trRowParam.dataMargin / 2 - 20;
                $iconDiv.css("margin-top", this.iconMargin);
            }
            //tr宽度
            var screenWidth = $(window).width() - this._config.trRowParam.trMargin;
            //数据显示div宽度 tr宽度 减去 icon宽度
            var dataWidth = screenWidth;
            //判断是否具有icon列,若有即减去icon列宽度
            if (this._hasIcon) {
                dataWidth = screenWidth - this._config.trRowParam.iconWidth;
            }
            //数据显示div设置宽度
            $dataDiv.width(dataWidth);
            //获取左滑按钮的数量，计算左滑按钮区域面积
            var itemWidth = 0;
            for (var i = 0, length = this._config.slidemenu.length; i < length; i++) {
                var item = this._config.slidemenu[i];
                var $btnWrap = $('<div class="rxm-slide-btn"></div>');
                $btnWrap.tap(this, item.callback);
                var $btn = $('<button>' + item.name + '</button>');
                $btn.attr("style", item.style);
                $btn.attr("class", item.icon);
                $btn.addClass(item.class);
                if (!!item.width) {
                    $btn.width(item.width);
                }
                $btnWrap.append($btn);
                $slideBtnDiv.append($btnWrap);
                itemWidth += item.width ? parseInt(item.width) : this._config.leftSlideParam.btnWidth;
                console.info(this.btnAreaWidth);
            }
            //滑动菜单区域div宽度 每个按钮宽度之和
            this.btnAreaWidth = itemWidth;
            //滑动按钮div设置宽度  默认宽度每个60  可配置
            $slideBtnDiv.width(this.btnAreaWidth);
            //具有滚动条div宽度 tr宽度 加上 隐藏按钮宽度
            var scrollWidth = screenWidth + this.btnAreaWidth;
            //滚动条div设置宽度  
            $scrollDiv.width(scrollWidth);
            this.scrollDivWidth = scrollWidth;
            this.dataDivWidth = dataWidth;
        };
        /**
         * 绑定表格行左滑事件
         * @param {Object} $slideTr - 表格行对象
         */
        RxmBufferGrid.prototype._bindTrSlideEvent = function ($slideTr) {
            var the = this;
            //数据行绑定touchStart触屏开始事件
            $slideTr.touchStart(function (e, data) {
                if (!the._pressFlag) {
                    // 记录当前触屏的行对象 
                    the.slideCurSwipeTr = this;
                    // 当前滑动数据行设定过渡效果设置  1、过渡效果的 CSS 属性的名称   2、完成过渡效果需要多少秒或毫秒  3、速度效果的速度曲线（过渡效果）
                    the._setTransition($(the.slideCurSwipeTr));
                    // 点击除当前左滑对象之外的任意其他位置
                    if (the.slideLastSwipeTr && the.slideCurSwipeTr != the.slideLastSwipeTr) {
                        $(the.slideCurSwipeTr).removeData("position");
                        $(the.slideLastSwipeTr).removeData("position");
                        // 上一个左滑对象设定过渡效果设置  1、过渡效果的 CSS 属性的名称   2、完成过渡效果需要多少秒或毫秒  3、速度效果的速度曲线（过渡效果）
                        the._setTransition($(the.slideLastSwipeTr));
                        // 隐藏上一个左滑对象按钮
                        the._resetStatus($(the.slideLastSwipeTr));
                        // 清空上一个左滑的对象
                        the.slideLastSwipeTr = null;
                    }
                }
            });
            //数据行绑定touchMove触屏移动事件
            $slideTr.touchMove(function (e, data) {
                if (!the._pressFlag) {
                    //滑动距离  当前滑动横向坐标减去起始横向坐标
                    var moveDis = data.position.delta[0].moved;
                    //滑动方向
                    var curSwipe = data.curSwipe;
                    //console.info('moveDis==='+moveDis);
                    //左滑，距离在75之内，按钮区域随着左滑距离逐渐显示，大于75后按钮区域不变
                    console.info('btnAreaWidth===' + the.btnAreaWidth);
                    if (moveDis <= the.btnAreaWidth && curSwipe == "Left" && $(the.slideCurSwipeTr).data("position") != "view") {
                        $(the.slideCurSwipeTr).css('-webkit-transform', 'translate3d(' + -moveDis + 'px, 0px, 0px)');
                    }
                    //左滑完全显示按钮区域，标识词条数据位置为显示
                    if (moveDis > the.btnAreaWidth && curSwipe == "Left") {
                        $(the.slideCurSwipeTr).data("position", "view");
                        console.info('position===' + the.slideCurSwipeTr);
                    }
                    //右滑，按钮区域直接隐藏
                    if (curSwipe == "Right") {
                        the._resetStatus($(the.slideCurSwipeTr));
                    }
                }
            });
            //数据行绑定touchEnd触屏结束事件
            $slideTr.touchEnd(function (e, data) {
                if (!the._pressFlag) {
                    // 点击除当前左滑对象之外的任意其他位置
                    if (the.slideLastSwipeTr && the.slideCurSwipeTr != the.slideLastSwipeTr) {
                        // 右滑隐藏按钮
                        the._resetStatus($(the.slideLastSwipeTr));
                        // 清空上一个左滑的对象
                        the.slideLastSwipeTr = null;
                    }
                    //滑动方向
                    var curSwipe = data.curSwipe;
                    if (curSwipe != "") {
                        //移动距离  结束时横向坐标减去起始横向坐标
                        var moveDis = data.position.delta[0].moved;
                        console.info('moveDis===' + moveDis);
                        //当滑动结束时，左滑距离大于设置距离数值，显示按钮区域
                        if (moveDis > the._config.leftSlideParam.viewWidth && curSwipe == "Left") {
                            //显示按钮区域
                            $(the.slideCurSwipeTr).css('-webkit-transform', 'translate3d(' + (-the.btnAreaWidth) + 'px, 0px, 0px)');
                            $(the.slideCurSwipeTr).data("position", "view");
                            the.slideLastSwipeTr && the.slideLastSwipeTr != the.slideCurSwipeTr &&
                                $(the.slideLastSwipeTr).css('-webkit-transform', 'translate3d(0px, 0px, 0px)'); // 已经左滑状态的按钮右滑
                            the.slideLastSwipeTr = the.slideCurSwipeTr; // 记录上一个左滑的对象
                        }
                        else if (moveDis < the._config.leftSlideParam.viewWidth && curSwipe == "Left") {
                            the._resetStatus($(the.slideCurSwipeTr));
                            if (the.slideCurSwipeTr == the.slideLastSwipeTr) {
                                // 右滑
                                the._resetStatus($(the.slideCurSwipeTr));
                                // 清空上一个左滑的对象
                                the.slideLastSwipeTr = null;
                            }
                        }
                    }
                }
            });
        };
        RxmBufferGrid.prototype.renderTitleBar = function () {
            ///<summary> 渲染表格标题栏(可重写) </summary>
            if (this._config.title) {
                this.$titlebar.css("display", "");
                this.$titlebar.empty().append(this._config.title);
            }
        };
        RxmBufferGrid.prototype.renderToolbar = function () {
            ///<summary> 渲染表格工具栏(可重写) </summary>
            //html页面中已经定义工具栏，并且将默认按钮绑定默认事件
            var liBtn = this.$toolbar.find("ul li");
            for (var i = 0; i < liBtn.length; i++) {
                if ($(liBtn[i]).is(".rxm-default-delete")) {
                    $(liBtn[i]).tap($.proxy(this.bindDeleteBtn, this));
                }
                if ($(liBtn[i]).is(".rxm-default-all-select")) {
                    $(liBtn[i]).tap($.proxy(this.bindSelectAllBtn, this));
                }
                if ($(liBtn[i]).is(".rxm-default-cancel")) {
                    $(liBtn[i]).tap($.proxy(this.bindCancelBtn, this));
                }
            }
            if (!!this._config.toolbar && this._config.toolbar.length > 0) {
                var $ul = $("<ul style='width:330px;'></ul>");
                for (var i = 0, length = this._config.toolbar.length; i < length; i++) {
                    var item = this._config.toolbar[i];
                    var $li = $('<li></li>');
                    $li.tap(this, item.callback);
                    $li.attr("style", item.style);
                    var $a = $('<a></a>');
                    var $i = $('<i></i>');
                    $i.attr("class", item.icon);
                    $i.appendTo($a);
                    $a.append(item.name);
                    $a.appendTo($li);
                    $li.appendTo($ul);
                }
                this.$toolbar.empty().append($ul);
            }
        };
        RxmBufferGrid.prototype.renderSearchBar = function () {
            ///<summary> 渲染表格搜索栏(可重写) </summary>
            if (!!this._config.searchbar) {
                this.$searchbar.css("display", "");
            }
        };
        RxmBufferGrid.prototype.initPress = function () {
            ///<summary> 触发长按状态函数 </summary>
            this._pressFlag = true;
            if (!!this._config.slidemenu) {
                this.$gridWrap.find(".rxm-data-div").css("width", this.dataDivWidth - 30);
                this.$gridWrap.find(".rxm-slide-scroll-wrapper").css("width", this.scrollDivWidth + 40);
                this.$gridWrap.find(".rxm-td-checkbox").css("margin-top", this.iconMargin);
                if (!!this._config.toolbar || this.$gridWrap.find(".rxm-s-grid-toolbar").length > 0) {
                    //显示toolbar
                    this.$gridWrap.find(".rxm-s-grid-toolbar").css("display", "");
                    this._config.height = this._config.height - 50;
                    this.$tableBody.css("height", this._config.heigh + "px");
                }
                //显示行数据右侧复选框
                this.$gridWrap.find(".rxm-td-checkbox").css("display", "");
            }
            else {
                //隐藏行数据右侧箭头
                this.$gridWrap.find(".rxm-td-arrow").css("display", "none");
                if (this.$toolbar.html() != "" && this.$toolbar.css("display") == 'none') {
                    //显示toolbar
                    this.$gridWrap.find(".rxm-s-grid-toolbar").css("display", "");
                    //设置tableBody高度
                    this._config.height = this._config.height - 50;
                    this.$tableBody.css("height", this._config.height + "px");
                }
                //显示行数据右侧复选框
                this.$gridWrap.find(".rxm-td-checkbox").css("display", "");
            }
        };
        RxmBufferGrid.prototype.cancelPress = function () {
            ///<summary> 取消长按状态 </summary>
            this.$gridWrap.find(".rxm-multi-check").prop("checked", false);
            this._pressFlag = false;
            this._allChecked = true;
            //隐藏行数据右侧复选框
            this.$gridWrap.find(".rxm-td-checkbox").css("display", "none");
            if (!!this._config.slidemenu) {
                this.$gridWrap.find(".rxm-data-div").css("width", this.dataDivWidth);
                this.$gridWrap.find(".rxm-slide-scroll-wrapper").css("width", this.scrollDivWidth);
            }
            //显示行数据右侧箭头
            this.$gridWrap.find(".rxm-td-arrow").css("display", "");
            if (this.$toolbar.html() != "" && this.$toolbar.css("display") != 'none') {
                //隐藏toolbar
                this.$gridWrap.find(".rxm-s-grid-toolbar").css("display", "none");
                //设置tableBody高度
                this._config.height = this._config.height + 50;
                this.$tableBody.css("height", this._config.height + "px");
            }
        };
        RxmBufferGrid.prototype.allSelect = function () {
            ///<summary> 全选/取消全选函数 </summary>
            //获取表格中所有checkbox  jquery对象
            var $checkTr = this.$gridWrap.find("input[name='s_gird_multi_" + this._config.id + "']");
            if (this._allChecked) {
                $checkTr.prop("checked", true);
                this._allChecked = false;
            }
            else {
                $checkTr.prop("checked", false);
                this._allChecked = true;
            }
        };
        RxmBufferGrid.prototype.bindTapLineElement = function (arg, scope) {
            ///<summary> 表格行绑定tap事件 </summary>
            ///<param name=""  value=""></param>
            if (!arg.selector) {
                arg.selector = "tr:not(.rxm-nodata-tip-tr)";
            }
            else if (arg.selector.indexOf("tr") !== 0) {
                arg.selector = "tr:not(.rxm-nodata-tip-tr) " + arg.selector;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            //this.$gridWrap.on("append", arg.data, $.proxy(arg.fn, the), arg.one)
            this.$gridWrap.on(RxmBufferGrid.msgEnum.tapInLine, arg.selector, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格行绑定tap事件(兼容工作流)
        */
        RxmBufferGrid.prototype.callbackTapLineElement = RxmBufferGrid.prototype.bindTapLineElement;
        RxmBufferGrid.prototype.bindPressLineElement = function (arg, scope) {
            ///<summary> 表格行绑定长按事件 </summary>
            ///<param name=""  value=""></param>
            if (!arg.selector) {
                //暂无数据不绑定点击事件
                arg.selector = "tr:not(.rxm-nodata-tip-tr)";
            }
            else if (arg.selector.indexOf("tr") !== 0) {
                arg.selector = "tr:not(.rxm-nodata-tip-tr) " + arg.selector;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            //this.$gridWrap.press("tr", arg.data, $.proxy(arg.fn, the), arg.one);
            this.$gridWrap.on(RxmBufferGrid.msgEnum.pressInLine, arg.selector, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格行绑定长按事件(兼容工作流)
        */
        RxmBufferGrid.prototype.callbackPressLineElement = RxmBufferGrid.prototype.bindPressLineElement;
        /**
        * 表格绑定删除按钮默认事件 删除选中的数据行
        */
        RxmBufferGrid.prototype.bindDeleteBtn = function () {
            var the = this;
            //获取选中行的index数据
            var selIdx = the.getSelectedRow();
            if (!selIdx || selIdx.length < 1) {
                Util.alert("您好，请选择一条数据");
                return;
            }
            Util.confirm("您是否要删除选中的数据？", function () {
                //获取选中行数据
                var selData = the.getSelectedData();
                the.deleteRow(selIdx);
            }, function () {
                return;
            });
        };
        /**
        * 表格绑定全选按钮默认事件 选中当前页面所有数据
        */
        RxmBufferGrid.prototype.bindSelectAllBtn = function () {
            this.allSelect();
        };
        /**
        * 表格绑定取消按钮默认事件 长按事件取消
        */
        RxmBufferGrid.prototype.bindCancelBtn = function () {
            this.cancelPress();
        };
        RxmBufferGrid.prototype.formatDataAfterAjaxSuccess = function (args) {
            ///<summary> </summary>
            ///<param name=""  value=""></param>
            return args;
        };
        RxmBufferGrid.prototype.formatDataBeforeAjax = function (args) {
            ///<summary> </summary>
            ///<param name=""  value=""></param>
            return args;
        };
        RxmBufferGrid.prototype.callbackDataAppend = function (arg, scope) {
            ///<summary> 追加</summary>
            if (typeof arg == "boolean") {
                arg = {
                    fn: this._onAppend,
                };
                scope = this;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            this.$gridWrap.on(RxmBufferGrid.msgEnum.appendRow, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        RxmBufferGrid.prototype.callbackDataInsert = function (arg, scope) {
            if (typeof arg == "boolean") {
                arg = {
                    fn: this._onInsert,
                };
                scope = this;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            this.$gridWrap.on(RxmBufferGrid.msgEnum.insertRow, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        RxmBufferGrid.prototype.callbackDataDelete = function (arg, scope) {
            if (typeof arg == "boolean") {
                arg = {
                    fn: this._onDelete,
                };
                scope = this;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            this.$gridWrap.on(RxmBufferGrid.msgEnum.deleteRow, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        RxmBufferGrid.prototype.callbackDataUpdate = function (arg, scope) {
            if (typeof arg == "boolean") {
                arg = {
                    fn: this._onUpdate,
                };
                scope = this;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            this.$gridWrap.on(RxmBufferGrid.msgEnum.updateRow, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        RxmBufferGrid.prototype._onAppend = function (e, data) {
            this.refresh();
        };
        RxmBufferGrid.prototype._onInsert = function (e, data) {
            this.refresh();
        };
        RxmBufferGrid.prototype._onDelete = function (e, data) {
            this.refresh();
        };
        RxmBufferGrid.prototype._onUpdate = function (e, data) {
            this.refresh();
        };
        RxmBufferGrid.prototype._onRefreshView = function (e, arg) {
            ///<summary>响应 ormRereshGridView消息</summary>
            ///<param  name="arg"  value="cssArgs.clsGridMobile.refresh"></param>
            this.refresh(arg);
        };
        RxmBufferGrid.prototype._onPressLine = function (e, data) {
            ///<summary> 默认长按事件  </summary>
            var $tr = e.currentTarget;
            var index = this.$tBody.find("tr").index($tr);
            var data = {
                "index": index,
                "row": this.getRowDataByViewIndexs(index),
                "pageInfo": this._pageInfo
            };
            e.data = data;
            $(e.target).trigger(RxmBufferGrid.msgEnum.pressInLine, data);
            return false;
        };
        /**
         * 默认点击事件
         * @param {Event} e - jquery Event对象
         */
        RxmBufferGrid.prototype._onTapLine = function (e, data) {
            if (isDesktop(this._config.id) && $(e.target)[0].tagName === "INPUT") {
            }
            else {
                var $tr = e.currentTarget;
                var index = this.$tBody.find("tr").index($tr);
                var data = {
                    "index": index,
                    "row": this.getRowDataByViewIndexs(index),
                    "pageInfo": this._pageInfo
                };
                e.data = data;
                $(e.target).trigger(RxmBufferGrid.msgEnum.tapInLine, data);
                return false;
            }
        };
        RxmBufferGrid.prototype.getRowDataByViewIndexs = function (viewIndexs, bClone) {
            ///<summary>根据grid 视图索引返回行数据</summary>
            ///<param  name="viewIndexs" type="Array"> 视图索引，number 或者 数组 </param>
            ///<return type="Array"  elementype=""></return>
            ///<summary> 根据索引查询行数据  </summary>
            ///<param name="viewIndexs" type="Array">viewIndexs为数组</param>
            var isOne = false;
            var cf = this._config;
            bClone = bClone || false;
            var ret;
            if ($.isNumeric(viewIndexs)) {
                var t = viewIndexs;
                if (t >= 0 && t < cf.data.length)
                    ;
                {
                    ret = cf.data[t];
                }
                return ret;
            }
            var the = this;
            var rowData;
            ret = {};
            if ($.isArray(viewIndexs)) {
                $.each(viewIndexs, function (index, it) {
                    var t = it;
                    if (t >= 0 && t < cf.data.length)
                        ;
                    {
                        rowData = cf.data[t];
                        if (bClone) {
                            rowData = $.extend(true, {}, rowData);
                        }
                        ret[it] = rowData;
                    }
                });
                return ret;
            }
            return ret;
        };
        /**
        * 判断是否通过html属性配置生成表格
        * @returns {Boolean} - 状态值
        */
        RxmBufferGrid.prototype._isHtmlAttrCfg = function () {
            if (this.$gridWrap.find("rxm-table-head").length != 0) {
                return true;
            }
            else {
                return false;
            }
        };
        //重置按钮区域处于隐藏状态
        RxmBufferGrid.prototype._resetStatus = function ($obj) {
            $obj.css('-webkit-transform', 'translate3d(0px, 0px, 0px)');
        };
        //设定过渡效果参数
        RxmBufferGrid.prototype._setTransition = function ($obj) {
            var the = this;
            $obj.css({
                '-webkit-transition-property': '-webkit-transform',
                '-webkit-transition-duration': the._config.leftSlideParam.traDuration + 'ms',
                '-webkit-transition-timing-function': the._config.leftSlideParam.traFunction
            });
        };
        /**
         * 判断是否为桌面版
         * @param {String} wrapId - 表格包裹器ID
         * @returns {Boolean} - 桌面版状态值
         */
        function isDesktop(wrapId) {
            var $gw = $("#" + wrapId);
            if ($gw.is(".rxm-grid-desktop")) {
                return true;
            }
            if ($gw.is(".rxm-grid-mobile")) {
                return false;
            }
            if ($gw.is(".rxm-grid-mobile-desktop")) {
                if ($(document.body).is(".rxm-desktop")) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        /***************************************************** 桌面版表格函数 ********************************************************/
        /**
         * 渲染PC端表格行数据(可重写)
         * @param {Object} row - 行数据
         * @param {Object} $tr - 行数据
         * @param {Number} rowIndex - 行索引
         * @param {Number} baseIndex - true克隆数据，undefined，false 返回 view 数据此为默认
         * @returns {Object} $tr - 表格行对象 jquery对象
         */
        RxmBufferGrid.prototype.createRowInPc = function (row, $tr, rowIndex, baseIndex) {
            var _index = rowIndex || (function guid() {
                function s4() {
                    return Math.floor((1 + Math.random()) * 0x10000)
                        .toString(16)
                        .substring(1);
                }
                return s4() + s4() + '' + s4() + '' + s4() + '' +
                    s4() + '' + s4() + s4() + s4();
            })();
            //console.log(_index);
            $tr.data("index", _index);
            row["_index"] = _index;
            if (!!this._config.index) {
                $tr.append('<td align="center" class="index" width="35px">' + (rowIndex + baseIndex) + '</td>');
            }
            if (typeof this._config.multi != "undefined") {
                $tr.append('<td align="center" class="fix" width="24px"><input type="' + (this._config.multi ? 'checkbox' : 'radio') + '" name="rxm-s-gird-multi-' + (this._config.id) + '" ' + (row["_checked"] ? "checked" : "") + '></td>');
            }
            for (var j = 0, item, $td; item = this._config.layout[j++];) {
                tdValue = row[item.field];
                //format重写函数名称定义
                var formatFun = "format" + item.field;
                //表格config对象中layout中数据format处理
                if (item.format) {
                    tdValue = item.format({ "row": row });
                }
                //重写format函数
                if ($.isFunction(this[formatFun])) {
                    tdValue = this[formatFun](row);
                }
                tdValue = (tdValue || tdValue == 0) ? tdValue : "";
                $td = $('<td class="' + this._config.id + '-' + item.field + '"' + (item.align ? ' align="' + item.align + '"' : '') + '></td>');
                //td添加点击效果样式
                if (item.clickstyle) {
                    $td.addClass("rxm-click-style");
                }
                item.click ? function () {
                    $td.append('<a' + (item.field ? ' class="' + item.field + '"' : '') + '></a>');
                    $td.children("a").append(tdValue);
                }() : $td.append(tdValue);
                $tr.append($td);
            }
            $tr.children("td").each(function () {
                $(this).attr("title", $(this).text());
            });
            return $tr;
        };
        /**
        * 桌面端 加载视图内所有属性（表格、标题栏、工具栏、搜索栏、分页栏)
        */
        RxmBufferGrid.prototype._renderPc = function () {
            //行高
            var trHeight = 40;
            //清空表格包裹器
            this.$gridWrap.addClass("rxm-s-grid");
            //添加隐藏多余字符样式
            this._config.textEllipsis && this.$gridWrap.addClass("rxm-s-grid-ellipsis");
            //判断html文件中是否存在定制titlebar
            if (this.$gridWrap.find(".rxm-s-grid-titlebar").length == 0) {
                this._renderTitleBarPc();
            }
            //判断html文件中是否存在定制searchbar
            if (this.$gridWrap.find(".rxm-s-grid-searchbar").length == 0) {
                this._renderSearchBarPc();
            }
            //判断html文件中是否存在定制toolbar
            if (this.$gridWrap.find(".rxm-s-grid-toolbar").length == 0) {
                this._renderToolbarPc();
            }
            else {
                //工具栏默认按钮事件绑定
                this._setDefalToolbarEvent();
            }
            //判断html文件中是否存在定制表格
            if (this.$gridWrap.find(".rxm-s-grid-content").length == 0) {
                this._renderContentPc();
            }
            else {
                //行事件绑定
                this._setTableRowEvent();
                //表头全选checkbox点击事件绑定
                this._setTableHeadEvent();
            }
            //隐藏分页栏 buffer表格没有分页功能
            this.$gridWrap.find(".rxm-s-grid-pagination").css('display', 'none');
            //设置表格高度 如果设置表格高速则直接使用设置高度 
            /**
            * 设置表格rxm-table-body高度
            * 1、如果直接配置高度则直接使用设置高度
            * 2、如果没有设置表格高度，但是设置分页，表格高度则是分页行数的高度
            * 3、如果没有设置高度、也没有分页，则表格根据数据条目数据自动填充
            */
            if (!!this._config.height) {
                _wrapHeight = this._config.height;
                this.$gridWrap.find(".rxm-table-body").css("height", _wrapHeight);
            }
            else {
                this.$gridWrap.find(".rxm-table-body").css("height", "auto");
            }
            //绑定刷新函数  doc中_refresh()函数激发
            this.$gridWrap.on(RxmBufferGrid.msgEnum.ormRereshGridView, $.proxy(this._onRefreshView, this));
        };
        /**
        * 桌面端 渲染表格
        */
        RxmBufferGrid.prototype._renderTablePc = function () {
            //清空表格中行数据
            var $table = this.$gridWrap.find(".rxm-s-grid-table").empty();
            $table.append('<div class="rxm-table-head"><table onselectstart="return false;" class="rxm-table rxm-table-hover"><thead></thead></table><div class="dragTrigger"></div></div>');
            var style = 'style="overflow-x:hidden;overflow-y:auto;' + (this._config.height && "height:" + this._config.height) + '"';
            var $tableBody = $('<div class="rxm-table-body"' + style + '><table class="table rxm-table-hover"><thead></thead><tbody></tbody></table></div>');
            $table.append($tableBody);
            this._setTableRowEvent();
            this._renderTableHeadPc();
        };
        /**
        * 桌面端 渲染表格头部
        */
        RxmBufferGrid.prototype._renderTableHeadPc = function () {
            var $tableHead = this.$gridWrap.find(".rxm-s-grid-table table thead").empty();
            var html = "";
            //渲染索引表头
            if (!!this._config.index) {
                html += '<th align="center" class="index noDrag" width="35px"></th>';
            }
            //渲染checkbox表头
            if (typeof this._config.multi != "undefined") {
                html += '<th align="center" class="fix noDrag" width="24px">' + (this._config.multi ? '<input type="checkbox">' : '') + '</th>';
            }
            var layout = this._config.layout;
            for (var i = 0, item; item = layout[i++];) {
                var width = (item.width ? "width:" + item.width + ";" : "width:" + (100 / layout.length + '%') + ";");
                var align = (item.align ? "text-align:" + item.align + ";" : "");
                var style = 'style="' + align + ' ' + width + '"';
                html += '<th ' + style + ' class="' + item.field + '" title="' + item.name + '">' + item.name + (item.sort ? '<i class="fa fa-sort"></i>' : '') + '</th>';
            }
            $tableHead.append('<tr>' + html + '</tr>');
            this.$gridWrap.find(".rxm-s-grid-table .rxm-table-body thead th").removeAttr("title").empty();
            //表头全选checkbox点击事件绑定
            this._setTableHeadEvent();
        };
        /**
        * 桌面端 表格行事件绑定
        */
        RxmBufferGrid.prototype._setTableRowEvent = function () {
            //点击事件绑定  这个需要认真斟酌
            this.$tBody = this.$gridWrap.find(".rxm-s-grid-table .rxm-table-body tbody");
            this.$tBody.tap("tr", $.proxy(this._onTapLine, this));
            var clkFun;
            var aFun;
            var aFunClass;
            for (var i = 0; i < this._config.rowevent.length; i++) {
                if (!!this._config.rowevent[i].click) {
                    clkFun = this._config.rowevent[i].click;
                }
            }
            for (var i = 0; i < this._config.layout.length; i++) {
                if (!!this._config.layout[i].click) {
                    aFun = this._config.layout[i].click;
                    aFunClass = "." + this._config.layout[i].field;
                }
            }
            //绑定数据列表配置的所有事件
            if (!!clkFun) {
                this.bindTapLineElement({ fn: clkFun }, this);
            }
            if (!!aFun) {
                this.bindTapLineElement({ selector: aFunClass, fn: aFun }, this);
            }
        };
        /**
        * 桌面端 表头全选checkbox点击事件绑定
        */
        RxmBufferGrid.prototype._setTableHeadEvent = function () {
            var $tHead = this.$gridWrap.find(".rxm-s-grid-table .rxm-table-head thead"), _$tBody = this.$gridWrap.find(".rxm-s-grid-table .rxm-table-body tbody");
            $tHead.tap("th", function (event) {
                var nodeName = event.target.nodeName;
                if (nodeName == "INPUT") {
                    var checked = $(event.target).is(":checked");
                    _$tBody.find("input").each(function () {
                        if (checked) {
                            this.checked = true;
                        }
                        else {
                            $(this).removeAttr("checked");
                        }
                    });
                }
            });
        };
        /**
        * 渲染表格标题栏
        */
        RxmBufferGrid.prototype._renderTitleBarPc = function () {
            this.$gridWrap.append($('<div class="rxm-s-grid-titlebar"></div>'));
            this.$titlebar = this.$gridWrap.find(".rxm-s-grid-titlebar");
            this.$titlebar.css("display", "none");
            if (this._config.title) {
                this.$titlebar.css("display", "");
                this.$titlebar.empty().append(this._config.title);
            }
        };
        /**
        * 渲染表格搜索栏
        */
        RxmBufferGrid.prototype._renderSearchBarPc = function () {
            this.$gridWrap.append($('<div class="rxm-s-grid-searchbar"></div>'));
            this.$gridWrap.find(".rxm-s-grid-searchbar").css("display", "none");
            if (!!this._config.searchbar) {
                this.$searchbar.css("display", "");
            }
        };
        /**
        * 桌面端 渲染表格工具栏
        */
        RxmBufferGrid.prototype._renderToolbarPc = function () {
            this.$gridWrap.append($('<div class="rxm-s-grid-toolbar"></div>'));
            this.$toolbar = this.$gridWrap.find(".rxm-s-grid-toolbar");
            this.$gridWrap.find(".rxm-s-grid-toolbar").css("display", "none");
            //通过config对象生成工具栏
            if (!!this._config.toolbar && this._config.toolbar.length > 0) {
                this.$toolbar.css("display", "");
                var $ul = $("<ul style='width:100%'></ul>");
                for (var i = 0, length = this._config.toolbar.length; i < length; i++) {
                    var item = this._config.toolbar[i];
                    var $li = $('<li></li>');
                    $li.tap(this, item.callback);
                    $li.attr("style", item.style);
                    var $a = $('<a></a>');
                    var $i = $('<i></i>');
                    $i.attr("class", item.icon);
                    $i.appendTo($a);
                    $a.append(item.name);
                    $a.appendTo($li);
                    $li.appendTo($ul);
                }
                this.$toolbar.empty().append($ul);
                //表格工具栏默认按钮事件绑定
                this._setDefalToolbarEvent();
            }
        };
        /**
        * 桌面端 表格工具栏默认按钮事件绑定
        */
        RxmBufferGrid.prototype._setDefalToolbarEvent = function () {
            //获取所有按钮，判断是否有默认值定义
            var liBtn = this.$gridWrap.find(".rxm-s-grid-toolbar ul li");
            //包裹器html中默认定义三个按钮  删除、全选、取消
            if (liBtn.length > 0) {
                for (var i = 0; i < liBtn.length; i++) {
                    if ($(liBtn[i]).is(".rxm-default-delete")) {
                        $(liBtn[i]).tap($.proxy(this.bindDeleteBtn, this));
                    }
                    if ($(liBtn[i]).is(".rxm-default-all-select")) {
                        $(liBtn[i]).tap($.proxy(this.bindSelectAllBtn, this));
                    }
                    if ($(liBtn[i]).is(".rxm-default-cancel")) {
                        $(liBtn[i]).tap($.proxy(this.bindCancelBtn, this));
                    }
                }
            }
        };
        /**
        * 桌面端 渲染表格数据包裹器
        */
        RxmBufferGrid.prototype._renderContentPc = function () {
            this.$gridWrap.append($('<div class="rxm-s-grid-content"><div class="rxm-s-grid-table"></div></div>'));
            this._renderTablePc();
        };
        thisObj = new RxmBufferGrid(cfg);
        return thisObj;
    };
    if (!$.fn.RxmBufferGrid) {
        ClsFactory.clsDefine = clsdef;
    }
    return ClsFactory;
});

define("RxmGridDocument", [], function () {
    var cls = function (config, $grid) {
        ///<param  name="config" value="cssArgs.clsGridMobile.clsGridMobile"></param>
        ///<param name="$grid"  type="jQuery"></param>
        this.$gridWrap = $grid;
        this._config = config;
        //真分页时，后端返回数据类型结构为此结构即可      
        //排序参数
        this._sortParam = {
            field: "",
            order: ""
        };
        this.$gridWrap = $("#" + this._config.id);
        if (this.$gridWrap.length == 0) {
            console.error("id=" + this._config.id + "表格不存在");
        }
    };
    /**
    * 返回页面缓存的首页索引
    * @param {Array} dec - 开始索引值
    * @param {Number} index - 开始索引值
    * @param {Number} delLen - 开始索引值
    * @param {Array} src - 开始索引值
    * @returns {Array} dec - 处理后的数据数组
    */
    cls.prototype._spliceEx = function (dec, index, delLen, src) {
        dec.splice(index, delLen);
        var rear = dec.splice(index, dec.length);
        rear = src.concat(rear);
        var i = 0;
        for (i = 0; i < rear.length; i++) {
            dec.splice(dec.length, 0, rear[i]);
        }
        return dec;
    };
    /**
    * 返回页面缓存的首页索引
    * @param {Number} beginIndex - 开始索引值
    * @returns {Number} - 缓存首页索引
    */
    cls.prototype.cacheBegin = function (beginIndex) {
        var cf = this._config;
        if (!!beginIndex) {
            cf.param.cacheBegin = beginIndex;
            cf.curPage = beginIndex;
        }
        else {
            return cf.param.cacheBegin;
        }
        ;
    };
    /**
    * 缓存页参数
    * @param {Number} totalPage - 总页码数
    * @returns {Object} ret - 缓存页数据
    */
    cls.prototype.cachePageNum = function (totalPage) {
        var cf = this._config;
        var ret = {
            viewPage: 0,
            cachePage: 1
        };
        ret.cacheBegin = cf.param.cacheBegin;
        ret.viewBegin = cf.param.viewBegin;
        ret.viweMaxLen = cf.param.viweMaxLen;
        ret.cacheMaxLen = cf.param.cacheMaxLen;
        ret.data = cf.param.data;
        if ($.isExist(totalPage)) {
            ret.cachePage = totalPage - cf.param.cacheBegin; //从1开始
            ret.viewPage = totalPage - cf.param.cacheBegin + cf.param.viewBegin;
        }
        else {
            ret.cachePage = undefined;
            ret.viewPage = undefined;
        }
        ;
        return ret;
    };
    /**
    * 插入分页的一页数据
    * @param {Number} totalIndex - 总页码数
    * @returns {invalidMode} ret - 缓存页数据
    */
    cls.prototype.insertPageByTotal = function (rows, totalIndex, invalidMode) {
        var ret = {};
        var cf = this._config;
        invalidMode = $.extend(true, {}, cf.invalidMode, invalidMode);
        var spliceBegin = 0, spliceLen = 0;
        var cache = this.cachePageNum(totalIndex);
        var oldLen = cf.param.data.length;
        var isInsertInHeader = cache.cachePage < 0;
        //cache.cachePage + 1  预计新的内存长度
        var isInsertInRear = (cache.cachePage + 1 - Math.ceil(cache.data.length / cf.pageSize)) > 0;
        if (totalIndex >= cache.cacheBegin - 1 && totalIndex <= cache.cacheBegin + cache.cacheMaxLen) {
            if (invalidMode.up == 0) {
                if (invalidMode.down == 0) { //data  in front is invalid  data behind  is invalid
                    cf.param.data = rows;
                    cf.param.cacheBegin = totalIndex;
                    cf.param.viewBegin = 0;
                    ret.refresh = 0;
                    //console.info("00");
                }
                else {
                    //console.info("01");
                    //data in front is invalid   data  behind is valid
                    spliceBegin = 0; //data  in front is all invalid
                    spliceLen = cache.cachePage * cf.pageSize;
                    spliceLen = spliceLen <= cache.data.length ? spliceLen : cache.data.length;
                    if (cache.cachePage == -1) { // insert  in head;
                        spliceBegin = 0;
                        spliceLen = 0;
                    }
                    this._spliceEx(cf.param.data, spliceBegin, spliceLen * cf.pageSize, rows);
                    cf.param.cacheBegin = totalIndex;
                    cf.param.viewBegin = 0;
                    ret.refresh = 0;
                    if (spliceLen == 0 && cache.data.length > cf.param.cacheMaxLen * cf.pageSize) {
                        //保持长度
                        this._spliceEx(cf.param.data, cache.cacheMaxLen * cf.pageSize, cache.data.length - cache.cacheMaxLen * cf.pageSize);
                        cf.param.cacheBegin++;
                    }
                }
            }
            else {
                if (invalidMode.down == 0) {
                    //console.info("10");
                    spliceBegin = cache.cachePage >= 0 ? (cache.cachePage) * cf.pageSize : 0;
                    spliceLen = cache.data.length;
                    //data in front is valid   data  behind is invalid
                    this._spliceEx(cf.param.data, spliceBegin, spliceLen, rows);
                    //cf.param.cacheBegin = totalIndex;
                    //cf.param.viewBegin = 0;
                    ret.refresh = cache.viewPage;
                    if (spliceBegin == cf.param.cacheMaxLen * cf.pageSize && cache.data.length > cf.param.cacheMaxLen * cf.pageSize) {
                        //保持长度 去掉头
                        cache.data.splice(0, cf.pageSize);
                        cf.param.cacheBegin++;
                    }
                }
                else {
                    //data in front is valid  data  behind is valid
                    //console.info("11");
                    spliceBegin = cache.cachePage >= 0 ? (cache.cachePage) * cf.pageSize : 0;
                    spliceLen = rows.length;
                    this._spliceEx(cf.param.data, spliceBegin, spliceLen, rows);
                    ret.refresh = cache.viewPage;
                    //保持内存的长度
                    if (isInsertInHeader) {
                        //在头部追加的
                        cache.data.splice(cache.cacheMaxLen * cf.pageSize, cache.data.length - cache.cacheMaxLen * cf.pageSize);
                        cf.param.cacheBegin--;
                        cf.param.viewBegin = 0;
                    }
                    else if (isInsertInRear) {
                        if (cache.cachePage > cache.cacheMaxLen) { //在尾部追加的
                            cache.data.splice(0, cf.pageSize);
                            cf.param.cacheBegin++;
                        }
                        else {
                            //移动视图的viewbegin
                            if (Math.ceil((cf.param.data.length) / cf.pageSize) - cf.param.viewBegin > cf.param.viweMaxLen)
                                cf.param.viewBegin++;
                        }
                    }
                }
            }
        }
        else {
            cf.param.data = rows;
            cf.param.cacheBegin = totalIndex;
            cf.param.viewBegin = 0;
            ret.refresh = 0;
        }
        //console.info(cf.param);
        this._refresh(ret);
        return ret;
    };
    cls.prototype._appendByTotalIndex = function (rows, totalIndex) {
        var ret = this.instertPageByTotal(rows, totalIndex);
        this._refresh(ret);
    };
    cls.prototype._refresh = function (arg) {
        this.$gridWrap.trigger("ormRereshGridView", arg);
    };
    cls.prototype.viewInsertHeader = function (rows, forceLoad) {
        ///<param  name="rows" type="Array"></param>
        this.insertRow(rows, forceLoad, "header");
    };
    /**
    * 在视图尾部追加一行或者多行
    * @param {Array} rows - 行数据对象
    * @param {Boolean||Number} forceLoad - 获取数据标识 1、缓存数据获取 2、后台获取
    */
    cls.prototype.viewAppendRow = function (rows, forceLoad) {
        this.viewInsertRow(rows, forceLoad, "append");
    };
    /**
    * 向grid表格中插入一行
    * @param {Object} arg - 行数据对象
    * @param {Boolean||Number} forceLoad - 获取数据方式 1、缓存数据获取 2、后台远程数据获取
    */
    cls.prototype.viewInsertRow = function (arg, forceLoad) {
        var optype = arguments[2] || 'insert';
        if (optype == "append") {
        }
        else if (optype == "header") {
        }
        else {
        }
        ;
        if (forceLoad) {
            //获取远程数据，并刷新
            var reloadarg = 1;
            if (typeof forceLoad === "boolean" && forceLoad) {
                //计算所在的页面
                reloadarg = this.chgIndexViewToCache(viewIndexs[viewIndexs.length - 1]);
            }
            else if ($.isNumeric(forceLoad)) {
                reloadarg = forceLoad;
            }
            this.reload({ totalPage: reloadarg, added: arg });
        }
        else {
            var the = this;
            var dArr = this._config.param.data;
            var cf = this._config;
            var viewIndexs = [];
            for (var item in arg) {
                var n = parseInt(item);
                viewIndexs.push(n);
            }
            viewIndexs.sort(function (a, b) {
                return b - a;
            });
            $.each(viewIndexs, function (index, it) {
                index = the.chgIndexViewToCache(index);
                dArr.splice(index, 0, it);
            });
            this._refresh({ added: arg });
            //this.$gridWrap.trigger(optype, { insert: arg })
        }
    };
    /**
    * 根据页面无效原则，合理化cache 参数
    * @param {Number} validPage - 操作依据页面total索引
    */
    cls.prototype._handleInvalidCache = function (validPage) {
        if (!!validPage) {
            validPage = 1;
        }
        var cf = this._config;
        var preLen = (validPage - cf.param.cacheBegin) * cf.pageSize;
        var spliceStartBehind = (validPage - cf.param.cacheBegin + 1) * cf.pageSize;
        if (cf.invalidMode.up == 1) {
            if (cf.invalidMode.down == 1) {
            }
            else if (cf.invalidMode.down == 0) {
            }
        }
        else if (cf.invalidMode.up == 0) {
            if (cf.invalidMode.down == 1) {
            }
            else if (cf.invalidMode.down == 0) {
                //data  in front is invalid  data behind  is invalid
                cf.param.cacheBegin = validPage;
                cf.param.viewBegin = 0;
                cf.param.data.splice(0, preLen);
                cf.param.data.splice(spliceStartBehind, cf.param.data.length);
            }
        }
    };
    /**
    * 通过界面删除行时使用
    * @param {Array} viewIndexs - 删除数据的行索引数组
    * @param {Boolean} forceLoad - true 到服务器端
    */
    cls.prototype.viewDeleteRow = function (viewIndexs, forceLoad) {
        //排序
        var the = this;
        var dArr = this._config.param.data;
        var cf = this._config;
        if ($.isNumeric(viewIndexs)) {
            var t = viewIndexs;
            viewIndexs = [];
            viewIndexs.push(t);
        }
        viewIndexs.sort(function (a, b) {
            return b - a;
        });
        var reloadarg = 1;
        reloadarg = cf.param.cacheBegin + cf.param.viewBegin + Math.floor(viewIndexs[viewIndexs.length - 1] / cf.pageSize);
        if (forceLoad) {
            var reloadarg = 1;
            if (typeof forceLoad === "boolean" && forceLoad) {
                //计算所在的页面
            }
            else if ($.isNumeric(forceLoad)) {
                reloadarg = forceLoad;
            }
            this.reload({ totalPage: reloadarg, deleted: viewIndexs });
        }
        else {
            //限定tr范围 表格tbody内的tr才是数据行 modify by xiangcq 20180112
            var trs = this.$gridWrap.find(".s_grid_table tbody").find("tr");
            var the = this;
            $.each(viewIndexs, function (index, it) {
                var cache = the.chgIndexViewToCache(it);
                dArr.splice(cache, 1);
                $(trs[it]).remove();
            });
            if (this._handleInvalidCache(reloadarg)) {
                this._refresh();
            }
            ;
            return;
        }
    };
    /**
    * 更新行
    * @param {Array} arg - 更新数据的行索引数组
    * @param {Boolean} forceLoad - true 到服务器端
    */
    cls.prototype.viewUpdateRow = function (arg, forceLoad) {
        if (forceLoad) {
            //获取远程数据，并刷新
            var reloadarg = 1;
            if (typeof forceLoad === "boolean" && forceLoad) {
                //计算所在的页面
                reloadarg = this.chgIndexViewToCache(viewIndexs[viewIndexs.length - 1]);
            }
            else if ($.isNumeric(forceLoad)) {
                reloadarg = forceLoad;
            }
            this.reload({ totalPage: reloadarg, modified: arg });
        }
        else {
            var the = this;
            var dArr = this._config.param.data;
            var cf = this._config;
            var viewIndexs = [];
            for (var item in arg) {
                var n = parseInt(item);
                viewIndexs.push(n);
            }
            viewIndexs.sort(function (a, b) {
                return b - a;
            });
            $.each(viewIndexs, function (index, it) {
                index = the.chgIndexViewToCache(index);
                dArr[i] = $.extend(dArr[i]);
                dArr.splice(index, 0, it);
            });
            this._refresh({ added: arg });
        }
    };
    cls.prototype._hasUrl = function () {
        if (this._config.data.type && this._config.data.type.toUpperCase() == "URL") {
            return true;
        }
        return false;
    };
    cls.prototype.chgIndexViewToCache = function (viewIndex) {
        var cf = this._config;
        return cf.param.viewBegin * cf.pageSize + viewIndex;
    };
    cls.prototype.addNextPageData = function (rows, totalPage) {
        ///<param  name="rows" type="Array"></param>
        ///<param  name="beginPageNum" type="Number"></param>
        if (!$.isExist(totalPage)) {
            totalPage = (this._config.param.cacheBegin - 1 < 1) ? 1 : (this._config.param.cacheBegin - 1);
        }
        this.insertPageByTotal(rows, totalPage, { up: 1, down: 1 });
    };
    cls.prototype.addPrePageData = function (rows, totalPage) {
        ///<param  name="rows" type="Array"></param>
        ///<param  name="beginPageNum" type="Number"></param>
        if (!$.isExist(totalPage)) {
            totalPage = this._config.param.cacheBegin + Math.floor(this._config.param.data.length / this._config.pageSize);
        }
        this.insertPageByTotal(rows, totalPage, { up: 1, down: 1 });
    };
    /**
    * 根据grid视图索引返回行数据
    * @param {Array} viewIndexs - 视图索引，number或者数组
    * @param {Boolean} bClone - true 到服务器端取数据
    * @returns {Array} ret - 行数据 json数组
    */
    cls.prototype.getRowDataByViewIndexs = function (viewIndexs, bClone) {
        var isOne = false;
        var cf = this._config;
        bClone = bClone || false;
        var ret;
        if ($.isNumeric(viewIndexs)) {
            var t = this.chgIndexViewToCache(viewIndexs);
            if (t >= 0 && t < cf.param.data.length)
                ;
            {
                ret = cf.param.data[t];
            }
            return ret;
        }
        var the = this;
        var rowData;
        ret = {};
        if ($.isArray(viewIndexs)) {
            $.each(viewIndexs, function (index, it) {
                var t = the.chgIndexViewToCache(it);
                if (t >= 0 && t < cf.param.data.length)
                    ;
                {
                    rowData = cf.param.data[t];
                    if (bClone) {
                        rowData = $.extend(true, {}, rowData);
                    }
                    ret[it] = rowData;
                }
            });
            return ret;
        }
        return ret;
    };
    /**
    * 重新加载数据，刷新表格
    * @param {Array} arg - 获取数据参数
    */
    cls.prototype.reload = function (arg) {
        var cf = this._config;
        var the = this;
        if ($.isArray(arg)) {
            cf.data = arg;
            return 0;
        }
        var curPage = 1;
        if (!$.isExist(arg)) {
            arg = {
                totalPage: 1
            };
        }
        arg.totalPage = arg.totalPage || 1;
        if (!arg.data) {
            arg.data = cf.data;
        }
        else if ($.isArray(arg.data)) {
            cf.data = arg.data;
            cf.invalidMode = { up: 1, down: 1 };
        }
        else if (arg.data.type && arg.data.value) {
            this._config.data.type = arg.data.type;
            this._config.data.value = arg.data.value;
        }
        ;
        if (arg.totalPage) {
            if (arg.deskCurPage) {
                curPage = arg.deskCurPage;
            }
            else {
                switch (arg.totalPage) {
                    case -1:
                        {
                            curPage = (this._config.param.cacheBegin - 1 < 1) ? 1 : (this._config.param.cacheBegin - 1);
                        }
                        ;
                        break;
                    case -2:
                        {
                            curPage = cf.param.cacheBegin + Math.floor(cf.param.data.length / cf.pageSize);
                        }
                        ;
                        break;
                    case 0:
                        {
                            //this._pageInfo.curPage = this._config.param.cacheBegin;
                            curPage = cf.param.cacheBegin + cf.param.viewBegin;
                        }
                        ;
                        break;
                    default:
                        {
                            if (arg.totalPage > 0) {
                                curPage = arg.totalPage;
                            }
                        }
                        ;
                        break;
                }
            }
        }
        //直接调用reload函数 传入请求ajax地址的参数 modify by xcq 20171226
        cf.queryParam = arg.queryParam || arg.data.queryParam || cf.queryParam;
        if (!this._config.data.value || this._config.data.value.length < 24) {
            console.warn("url  is  empty ! ajax stop");
            return;
        }
        var ajxArg = {
            type: 'POST',
            url: this._config.data.value,
            dataType: "json",
            //async: false,
            data: $.extend({
                "pageSize": this._config.pageSize,
                //"pageNumber": this._pageInfo.curPage,      //兼容0.9.4之前版本
                "curPage": curPage
            }, cf.queryParam, this._sortParam),
        };
        //ajax请求参数格式化 可以重写
        ajxArg = this.formatDataBeforeAjax(ajxArg);
        if (!ajxArg.success)
            ajxArg.success = function (returnData) {
                //ajax请求返回数据格式化 可以重写
                returnData = the.formatDataAfterAjaxSuccess(returnData);
                //兼容返回数据为null格式的数据  add by xiangcq 20180117
                if (returnData == null) {
                    var returnDataObj = {};
                    returnDataObj.dataCount = 0;
                    returnDataObj.pageData = [];
                    returnData = returnDataObj;
                }
                //兼容返回jsonArray格式的数据  add by xiangcq 20180103   
                if ($.isArray(returnData)) {
                    var returnDataObj = {};
                    returnDataObj.dataCount = returnData.length;
                    returnDataObj.pageData = returnData;
                    returnData = returnDataObj;
                }
                //如果model属性存在，则取modle中的内容，兼容使用原始ajax的情况,0.9.8版本新增
                if (returnData.model) {
                    returnData = returnData.model;
                }
                if (typeof the._config.key != "undefined") {
                    returnData = formatData(returnData, the._config.key);
                }
                //表格追加原数据  the._pageInfo  
                $.extend(the._pageInfo, returnData);
                //表格缓存数据数组 如果returnData.pageData为undefined rows定义为空数组  modify by xcq 20171226
                var rows = (typeof (returnData.pageData) != 'undefined') ? returnData.pageData : [];
                switch (arg.totalPage) {
                    case -1:
                        {
                            the.addPrePageData(rows, curPage);
                        }
                        ;
                        break;
                    case -2:
                        {
                            the.addNextPageData(rows, curPage);
                        }
                        ;
                        break;
                    case 0:
                        {
                            the.insertPageByTotal(rows, curPage);
                        }
                        ;
                        break;
                    default: {
                        the.insertPageByTotal(rows, curPage);
                    }
                }
                var data = {
                    status: "sucsess",
                    type: "reload",
                    pageInfo: the._pageInfo,
                    loadParam: arg,
                    grid: the,
                    ajxArg: ajxArg,
                };
                the.$gridWrap.trigger("loadSucsess", data);
                the.$gridWrap.trigger("loadComplete", data);
                if (typeof (arg.loadComplete) == "function") {
                    ajxArg.loadComplete = arg.loadComplete;
                    ajxArg.loadComplete(data);
                }
                return true;
            };
        if (!ajxArg.error) {
            ajxArg.error = function (jqXHR, status, errorThrown) {
                var data = {
                    status: "error",
                    type: "reload",
                    pageInfo: the._pageInfo,
                    loadParam: arg,
                    grid: the,
                    ajxArg: ajxArg,
                };
                the.$gridWrap.trigger("loadSucsess", data);
                the.$gridWrap.trigger("loadComplete", data);
                if (typeof (arg.loadComplete) == "function") {
                    ajxArg.loadComplete = arg.loadComplete;
                    ajxArg.loadComplete(data);
                }
                return false;
            };
        }
        ;
        $.ajax(ajxArg);
    };
    /**
    * 删除行数据
    * @param {Object} arg - 行数据对象
    */
    cls.prototype.ajaxDeleteRow = function (arg) {
        var the = this;
        //请求ajax，将选中的数据传递给url
        var ajxArg = {
            type: 'POST',
            url: arg.delUrl,
            dataType: "json",
            //async: false,
            data: { 'data': arg.delData }
        };
        var page = {};
        var pageArry = [];
        for (var i in arg.delData) {
            pageArry.push(arg.delData[i]);
        }
        page.dataCount = pageArry.length;
        page.pageData = pageArry;
        ajxArg = this.formatDataBeforeDelAjax(ajxArg);
        if (!ajxArg.success) {
            ajxArg.success = function (returnData) {
                var data = {
                    status: "sucsess",
                    type: "delete",
                    pageInfo: page,
                    loadParam: arg,
                    grid: the,
                    ajxArg: ajxArg,
                };
                the.$gridWrap.trigger("loadSucsess", data);
                the.$gridWrap.trigger("loadComplete", data);
                if (typeof (arg.loadComplete) == "function") {
                    ajxArg.loadComplete = arg.loadComplete;
                    ajxArg.loadComplete(data);
                }
                return true;
            };
        }
        if (!ajxArg.error) {
            ajxArg.error = function (jqXHR, status, errorThrown) {
                var data = {
                    status: "error",
                    type: "delete",
                    pageInfo: arg.delData,
                    loadParam: arg,
                    grid: the,
                    ajxArg: ajxArg,
                };
                the.$gridWrap.trigger("loadSucsess", data);
                the.$gridWrap.trigger("loadComplete", data);
                if (typeof (arg.loadComplete) == "function") {
                    ajxArg.loadComplete = arg.loadComplete;
                    ajxArg.loadComplete(data);
                }
                return false;
            };
        }
        ;
        $.ajax(ajxArg);
    };
    /**
    * 转换数据格式
    * @param {Object} data - 行数据对象
    * @param {Object} format - 行数据对象
    */
    function formatData(data, format) {
        var result = {};
        //遍历替换列表
        for (var i in data) {
            if (data.hasOwnProperty(i)) {
                if (!!format[i]) {
                    result[format[i]] = data[i];
                }
                else {
                    result[i] = data[i];
                }
            }
        }
        return result;
    }
    /**
    * 表格缓存数据条目
    * @returns {Boolean} ret - 是否超过长度状态值
    */
    cls.prototype._isBeyondSize = function () {
        //this._config.param.data 缓存数组（条目数）
        if (this._config.param.data.length < this._config.param.cacheMaxLen * this._config.pageSize) {
            return true;
        }
        else {
            return false;
        }
    };
    cls.prototype.callbackSwipeInBottom = function (args) {
        ///<summary> </summary>
        ///<param name=""  value=""></param>
    };
    cls.prototype.callbackSwipeInTop = function (args) {
        ///<summary> </summary>
        ///<param name=""  value=""></param>
    };
    /**
    * reload函数 ajax请求成功函数重写
    * @param {Object} args - 重写数据
    * @returns {Object} args - 返回重写数据
    */
    cls.prototype.formatDataAfterAjaxSuccess = function (args) {
        return args;
    };
    /**
    * reload函数 ajax请求前函数重写
    * @param {Object} args - 重写数据
    * @returns {Object} args - 返回重写数据
    */
    cls.prototype.formatDataBeforeAjax = function (args) {
        return args;
    };
    /**
    * reload函数 ajax数据删除函数重写
    * @param {Object} args - 重写数据
    * @returns {Object} args - 返回重写数据
    */
    cls.prototype.formatDataBeforeDelAjax = function (args) {
        return args;
    };
    cls.prototype.callbackDataAppend = function (arg, scope) {
        if (typeof arg == "boolean") {
            arg = {
                fn: this._onAppend,
            };
            scope = this;
        }
        var the = this;
        if ($.isExist(scope)) {
            the = scope;
        }
        this.$gridWrap.on("append", arg.data, $.proxy(arg.fn, the), arg.one);
    };
    cls.prototype.callbackDataInsert = function (arg, scope) {
        if (typeof arg == "boolean") {
            arg = {
                fn: this._onInsert,
            };
            scope = this;
        }
        var the = this;
        if ($.isExist(scope)) {
            the = scope;
        }
        this.$gridWrap.on("insert", arg.data, $.proxy(arg.fn, the), arg.one);
    };
    cls.prototype.callbackDataDelete = function (arg, scope) {
        if (typeof arg == "boolean") {
            arg = {
                fn: this._onDelete,
            };
            scope = this;
        }
        var the = this;
        if ($.isExist(scope)) {
            the = scope;
        }
        this.$gridWrap.on("delete", arg.data, $.proxy(arg.fn, the), arg.one);
    };
    cls.prototype.callbackDataUpdate = function (arg, scope) {
        if (typeof arg == "boolean") {
            arg = {
                fn: this._onUpdate,
            };
            scope = this;
        }
        var the = this;
        if ($.isExist(scope)) {
            the = scope;
        }
        this.$gridWrap.on("update", arg.data, $.proxy(arg.fn, the), arg.one);
    };
    cssOrm.declare("clsGridDocument", cls);
    return cls;
});

define('RxmMobileGrid', [
    'RxmGridDocument',
    require.rxm.Util, 'RxmAppTool'
], function (doc, Util, appTool) {
    //苹果设备设置避免回弹效果
    if (appTool.isIOS()) {
        //调整后调用的接口
        rxm_page.forbidBounce(0, 1);
    }
    var clsdef = {
        rxmPath: require.rxm.MobileGrid,
        clsName: 'rxm-mobile-grid',
        juryFn: 'rxmMobileGrid'
    };
    /**
     * @param  {rxm.mobilegrid.conf} cfg
     */
    var ClsFactory = function (cfg) {
        //原来_config.
        var _id = cfg.id;
        var thisObj;
        (cfg) && (cfg.id) && (id = cfg.id);
        if (id) {
            /** @type {Cls} */
            thisObj = $('#' + id).data(clsdef.rxmPath);
            if (thisObj) {
                if ($.isArray(cfg.override)) {
                    for (var f in cfg.override) {
                        thisObj[f] = override[f];
                    }
                }
                return thisObj;
            }
        }
        var arrObj;
        $.isArray(cfg) && (arrObj = cfg);
        /**全部的私有变量 18-05-22  */
        var _touchRowInfo = {
            totalIndex: 1,
            //x坐标
            x: 0,
            //y坐标
            y: 0,
            left: 0,
            top: 0,
            scrollPos: 0
        };
        var _loadingImg = getServer() + "/www/rxm/utils/img/Loading.gif";
        var _arrowImg = getServer() + "/www/rxm/utils/img/arrow-right.png";
        var _upArrowImg = getServer() + "/www/rxm/utils/img/uparrow.png";
        var _downArrowImg = getServer() + "/www/rxm/utils/img/downarrow.png";
        //到顶或者到底后 滑动位置坐标值startYMove（默认为0）
        var _startYMove = 0;
        //包裹器高度 设置默认高度为设备屏幕可用高度
        var _wrapHeight = document.body.scrollHeight;
        //全选状态标志  默认为true
        var _allChecked = true;
        //长按状态标志  默认为false
        var _pressFlag = false;
        //第一次初始化表格标志
        var _firstLoad = true;
        //手势滑动方向标志位
        var _swipeDir = "";
        var _footerOffset = 0;
        //真分页时，后端返回数据类型结构为此结构即可
        var _pageInfo = {
            curPage: 1,
            pageData: [],
            dataCount: 0,
            pageCount: 0 //总页数
        };
        //排序参数(必须保留,后台取数据必要字段)
        // var  _sortParam = {
        //     field: "",
        //     order: ""
        // };
        //表格包裹器对象定义
        var $gridWrap = $("#" + _id);
        if ($gridWrap.length == 0) {
            console.error("id=" + _id + "表格不存在");
        }
        var _doc; //new doc(this._config, $gridWrap)
        //标题栏
        var $titlebar = $("");
        //工具栏
        var $toolbar = $("");
        //顶部刷新栏
        var $topRefreshbar = $("");
        //底部刷新栏
        var $bottomRefreshbar = $("");
        //搜索栏
        var $searchbar = $("");
        //表格内容数据包裹器
        var $gridContent = $("");
        //表格主体
        var $tableBody = $("");
        //分页区域（桌面版）
        var $pagination = $("");
        var $tBody = $("");
        var _isRender = false;
        /**滑动菜单全局变量定义*/
        /**当前左滑的对象*/
        var slideCurSwipeTr;
        /**上一个左滑的对象*/
        var slideLastSwipeTr;
        var btnAreaWidth;
        ///this.dataParNum = this._config.layout.length;
        var scrollDivWidth;
        var dataDivWidth;
        var _iconMargin;
        /**行数据中具有icon列*/
        _hasIcon = false;
        //获取radio值
        var getRadioValue = function (arg) {
            var radioValue = false;
            if (typeof arg == "boolean") {
                radioValue = arg;
            }
            else if (typeof arg == "string") {
                radioValue = (arg == "true");
            }
            return radioValue;
        };
        var RxmMobileGrid = function () {
            /**
             * 表格初始化配置对象
             */
            this._config = {
                //gridWrap 唯一id
                id: appTool.unid() + "",
                //是否分页 默认分页
                pagination: true,
                //每页数据条目数  默认30
                pageSize: 30,
                //数据选中 单选[radio]还是多选[checkbox],默认checkbox
                multi: true,
                //数据是否换行，还是隐藏多余字符(true 省略多余字符,其他字符用三个点代替  false 换行显示所有内容 ) 默认省略多余字符
                textEllipsis: true,
                //兼容使用原始ajax的情况,0.9.8版本新增     改变返回数据returnData的key值
                key: {
                    "allDataCount": "dataCount",
                    "curPageData": "pageData"
                },
                //查询参数
                queryParam: {},
                //行（列）头信息
                layout: [],
                //行点击事件
                rowevent: [],
                data: {
                    type: "",
                    value: "",
                    //-1 上一页  -2 下一页  0 config当前页进行刷新，>0 从pageSize页开始取数据，每次只是取1页
                    pageSize: 1,
                    loadComplete: ""
                },
                //缓存数据参数
                param: {
                    //单位为页
                    data: [],
                    //缓存首页面
                    cacheBegin: 1,
                    //最大缓存页数
                    cacheMaxLen: 30,
                    //显示首页面 从0 开始
                    viewBegin: 0,
                    //最大显示页数
                    viweMaxLen: 10
                },
                //上拉、下拉刷新提示语参数
                refreshTip: {
                    topTipBegin: "下拉刷新数据...",
                    topTipRefresh: "松开即可刷新...",
                    topTipLoading: "加载中...",
                    topTipSuccess: "数据刷新成功",
                    topTipError: "数据刷新失败",
                    bottomTipLoading: "加载中...",
                    bottomTipError: "数据加载失败",
                    bottomTipEnd: "没有更多了",
                    nodataTip: "暂无数据！"
                },
                invalidMode: {
                    up: 1,
                    down: 0
                },
                leftSlideParam: {
                    btnWidth: 60,
                    viewWidth: 60,
                    traDuration: "200",
                    traFunction: "ease-out" //开始到结束的过渡效果 默认以慢速结束的过渡效果
                },
                trRowParam: {
                    iconWidth: 55,
                    parHeight: 21,
                    dataMargin: 16,
                    trMargin: 20 //tr距离屏幕左右边距
                }
            };
            //获取html定义属性生成表格config对象
            var htmlCfg = getHtmlAttr(cfg.id);
            this._config = $.extend(true, this._config, cssOrm.default.clsGridMobile, htmlCfg, cfg);
            if (isDesktop(cfg.id)) {
                //如果是桌面版 设置cacheMaxLen与viweMaxLen值均为1 分页显示最新一页
                this._config.param.cacheMaxLen = 1;
                this._config.param.viweMaxLen = 1;
            }
            _doc = new doc(this._config, $gridWrap);
            _doc._pageInfo = _pageInfo;
        };
        /**
        * 获取html表格属性 重组config对象
        * @param {String} wrapId  - 表格包裹器ID
        * @returns {Object} gridCfg - config对象
        */
        function getHtmlAttr(wrapId) {
            //表格config对象定义
            var gridCfg = {};
            //表格layout
            var layout = [];
            var idx = false;
            //表格包裹器对象
            var $gwAttr = $("#" + wrapId);
            //获取表格每列属性值与名称  
            //移动端端 获取具有mview的列(桌面版显示的列数多，从中选取几个字段进行移动端显示)
            var tabth = $("#" + wrapId + " .rxm-table-head th[mview]").not("[hidden]");
            if (isDesktop(wrapId)) {
                //桌面端 排除具有hidden属性的列
                tabth = $("#" + wrapId + " .rxm-table-head th").not("[hidden]");
            }
            for (var i = 0; i < tabth.length; i++) {
                //判断列表是否显示索引号列 桌面端
                if ($(tabth[i]).is(".index")) {
                    idx = true;
                }
                //判断列表是否显示多选框列 桌面端
                if ($(tabth[i]).is(".ormmulti")) {
                    if ($(tabth[i]).children("input").attr("type") == "checkbox") {
                        gridCfg.multi = true;
                    }
                    else {
                        gridCfg.multi = false;
                    }
                }
                //layout属性设定
                if (typeof ($(tabth[i]).attr("fieldvalue")) != "undefined") {
                    var lo = {};
                    lo.name = $(tabth[i]).text();
                    lo.field = $(tabth[i]).attr("fieldvalue");
                    if (typeof ($(tabth[i]).attr("clickstyle")) != "undefined") {
                        lo.clickstyle = true;
                    }
                    layout.push(lo);
                }
            }
            //设置行索引值
            gridCfg.index = idx;
            //设置layout
            gridCfg.layout = layout;
            // //表格主键字段
            // if (typeof ($gwAttr.attr("fieldkey")) != "undefined") {
            //     gridCfg.fieldkey = $gwAttr.attr("fieldkey");
            // }
            //表格请求数据 ajax请求url dataurl 兼容原有项目
            if (typeof ($gwAttr.attr("dataurl")) != "undefined") {
                //将字符串中所有所有单引号替换为双引号 不然JSON.parse报错
                gridCfg.data = JSON.parse($gwAttr.attr("dataurl").replace(/\'/g, '"'));
                //rxmurl处理 判断地址首字符是否添加斜杠 
                if (gridCfg.data.value.substring(0, 1) != "/") {
                    gridCfg.data.value = "/" + gridCfg.data.value;
                }
                //modify 20180907 数据服务添加getServer() 解决本地加载模式无法获取表格数据
                gridCfg.data.value = getServer() + gridCfg.data.value;
            }
            //modify 20181108 表格请求数据 ajax请求url dataurl改为rxmurl
            if (typeof ($gwAttr.attr("rxmurl")) != "undefined") {
                var gridDataUrl = $gwAttr.attr("rxmurl");
                //rxmurl处理 判断地址首字符是否添加斜杠 
                if (gridDataUrl.substring(0, 1) != "/") {
                    gridDataUrl = "/" + gridDataUrl;
                }
                gridCfg.data = {
                    "type": "URL",
                    "value": "",
                };
                //数据服务添加getServer() 解决本地加载模式无法获取表格数据
                gridCfg.data.value = getServer() + gridDataUrl;
            }
            //单选[radio]还是多选[checkbox],默认checkbox
            if (typeof ($gwAttr.attr("rxmmulti")) != "undefined") {
                if ($gwAttr.attr("rxmmulti") == 'true') {
                    gridCfg.multi = true;
                }
                else {
                    gridCfg.multi = false;
                }
            }
            //每页数据显示条目数 兼容以前项目
            if (typeof ($gwAttr.attr("pagesize")) != "undefined") {
                gridCfg.pageSize = $gwAttr.attr("pagesize");
            }
            //每页数据显示条目数
            if (typeof ($gwAttr.attr("rxmpagesize")) != "undefined") {
                gridCfg.pageSize = $gwAttr.attr("rxmpagesize");
            }
            //最大缓存页数
            if (typeof ($gwAttr.attr("rxmcachemaxlen")) != "undefined") {
                gridCfg.param.cacheMaxLen = $gwAttr.attr("rxmcachemaxlen");
            }
            //最大显示页数
            if (typeof ($gwAttr.attr("rxmviwemaxlen")) != "undefined") {
                gridCfg.param.viweMaxLen = $gwAttr.attr("rxmviwemaxlen");
            }
            //表格下拉刷新数据提示语
            if (typeof ($gwAttr.attr("rxmtoptipbegin")) != "undefined") {
                gridCfg.refreshTip.topTipBegin = $gwAttr.attr("rxmtoptipbegin");
            }
            //表格下拉松开刷新提示语
            if (typeof ($gwAttr.attr("rxmtoptiprefresh")) != "undefined") {
                gridCfg.refreshTip.topTipRefresh = $gwAttr.attr("rxmtoptiprefresh");
            }
            //表格下拉刷新失败提示语
            if (typeof ($gwAttr.attr("rxmtoptiperror")) != "undefined") {
                gridCfg.refreshTip.topTipError = $gwAttr.attr("rxmtoptiperror");
            }
            //表格上拉分页加载失败提示语
            if (typeof ($gwAttr.attr("rxmbottomtiperror")) != "undefined") {
                gridCfg.refreshTip.bottomTipError = $gwAttr.attr("rxmbottomtiperror");
            }
            //上拉分页没有更多提示语
            if (typeof ($gwAttr.attr("rxmbottomtipend")) != "undefined") {
                gridCfg.refreshTip.bottomTipEnd = $gwAttr.attr("rxmbottomtipend");
            }
            //表格暂无数据提示语
            if (typeof ($gwAttr.attr("rxmnodatatip")) != "undefined") {
                gridCfg.refreshTip.nodataTip = $gwAttr.attr("rxmnodatatip");
            }
            //数据行图标区域宽度
            if (typeof ($gwAttr.attr("rxmrowiconwidth")) != "undefined") {
                gridCfg.trRowParam.iconWidth = $gwAttr.attr("rxmrowiconwidth");
            }
            //数据行数据字段单个高度
            if (typeof ($gwAttr.attr("rxmrowparheight")) != "undefined") {
                gridCfg.trRowParam.parHeight = $gwAttr.attr("rxmrowparheight");
            }
            //数据行数据显示div距离上下边距
            if (typeof ($gwAttr.attr("rxmrowdatamargin")) != "undefined") {
                gridCfg.trRowParam.dataMargin = $gwAttr.attr("rxmrowdatamargin");
            }
            //数据行距离屏幕左右边距
            if (typeof ($gwAttr.attr("rxmrowtrmargin")) != "undefined") {
                gridCfg.trRowParam.trMargin = $gwAttr.attr("rxmrowtrmargin");
            }
            //左滑菜单每个选项默认宽度
            if (typeof ($gwAttr.attr("rxmleftbtnwidth")) != "undefined") {
                gridCfg.leftSlideParam.btnWidth = $gwAttr.attr("rxmleftbtnwidth");
            }
            //左滑出现菜单区域的最小距离值，小于此值则隐藏 
            if (typeof ($gwAttr.attr("rxmviwemaxlen")) != "undefined") {
                gridCfg.leftSlideParam.viewWidth = $gwAttr.attr("rxmviwemaxlen");
            }
            //左滑菜单滑动隐藏时间设定 
            if (typeof ($gwAttr.attr("rxmleftaduration")) != "undefined") {
                gridCfg.leftSlideParam.traDuration = $gwAttr.attr("rxmleftaduration");
            }
            return gridCfg;
        }
        ///所有的自定义消息 
        RxmMobileGrid.msgEnum = {
            swipeInTopEndAfter: "swipeInTopEndAfter",
            swipeInBottomAfter: "swipeInBottomAfter",
            loadSucsess: "loadSucsess",
            loadComplete: "loadComplete",
            appendRow: "append",
            insertRow: "insert",
            deleteRow: "delete",
            updateRow: "update",
            ormRereshGridView: "ormRereshGridView",
            swipeInTop: "swipeInTop",
            swipeInBottom: "swipeInBottom",
            swipeInTopBegin: "swipeInTopBegin",
            swipeInBottomBegin: "swipeInBottomBegin",
            swipeInTopEnd: "swipeInTopEnd",
            swipeInBottomEnd: "swipeInBottomEnd",
            tapInLine: "tapInLine",
            pressInLine: "pressInLine",
            slideInLine: "slideInLine"
        };
        /**
        * 根据domelement信息获取所在的视图行索引
        * @param {String} domElement - dom选择器
        * @returns {Number} index - 视图行索引
        */
        RxmMobileGrid.prototype.getRowViewIndex = function (domElement) {
            var $tr = $(domElement).closest("tr");
            index = $tBody.find("tr").index($tr);
            return index;
        };
        /**
        * 设置或者获取手指正在触摸的行信息
        * @param {event|Number} arg - event或者行索引值
        * @returns {Object} - 触摸行坐标信息对象
        */
        RxmMobileGrid.prototype.touchRowInfo = function (arg) {
            var viewIndex;
            var cf = this._config;
            if (arg) {
                var viewIndex;
                if (!!arg.target) {
                    viewIndex = this.getRowViewIndex(arg.target);
                    _touchRowInfo.domTr = $(arg.target).closest('tr')[0] || _touchRowInfo.domTr || $($tBody.find("tr:last"))[0];
                }
                else if ($.isNumeric(arg)) {
                    _touchRowInfo.domTr = $tBody.find("tr")[arg] || _touchRowInfo.domTr;
                    viewIndex = arg;
                }
                //输入的是视图索引
                //viewIndex = arg.totalIndex;
                _touchRowInfo.totalIndex = (cf.param.cacheBegin + cf.param.viewBegin - 1) * cf.pageSize + viewIndex;
                _touchRowInfo.oldPos = _touchRowInfo.domTr.getBoundingClientRect();
            }
            else {
                //console.info(_touchRowInfo.domTr);
                var viewIndex = _touchRowInfo.totalIndex - (cf.param.cacheBegin + cf.param.viewBegin - 1) * cf.pageSize;
                var domTr = $tBody.find("tr")[viewIndex];
                if (!!domTr && !!_touchRowInfo.oldPos) {
                    var firstPos = $tBody.find("tr")[0].getBoundingClientRect();
                    var newPos = domTr.getBoundingClientRect();
                    var scrolltop = newPos.top - firstPos.top;
                    _touchRowInfo.scrollPos = scrolltop - _touchRowInfo.oldPos.top + newPos.height;
                }
                else {
                    _touchRowInfo.scrollPos = 0;
                }
            }
            return _touchRowInfo;
        };
        /**
        * 获取当前表格所有数据
        * @param {Boolean} bClone - true取缓存中的全部，undefined，false 取视图数据，此为默认
        * @param {Boolean} bCache - true克隆数据，undefined，false 返回 view 数据此为默认
        * @returns {Object} - 表格所有数据对象
        */
        RxmMobileGrid.prototype.getAllData = function (bClone, bCache) {
            var cf = this._config;
            bClone = bClone || false;
            bCache = bCache || false;
            if (bCache) {
                if (bClone) {
                }
                else {
                    return cf.param.data;
                }
            }
            else {
                var ret = [];
                var dataLen;
                if ((cf.param.viewBegin + cf.param.viweMaxLen) >= Math.ceil(cf.param.data.length / cf.pageSize)) {
                    dataLen = cf.param.data.length;
                }
                else {
                    dataLen = cf.param.viweMaxLen * cf.pageSize;
                }
                for (var j = cf.param.viewBegin * cf.pageSize; j < dataLen; j++) {
                    if (bClone) {
                        ret.push($.extend(true(), {}, cf.param.data[j]));
                    }
                    else {
                        ret.push(cf.param.data[j]);
                    }
                }
                return ret;
            }
        };
        /**
        * 获取当前选择行索引
        * @returns {Array} selectedIdxArr - 索引数组
        */
        RxmMobileGrid.prototype.getSelectedRow = function () {
            var selectedIdxArr = [];
            var $tableBodyRow = $gridWrap.find(".rxm-s-grid-table tbody");
            //获取表格所有tr对象 限定tr范围 表格tbody内的tr才是数据行 modify by xiangcq 20180112
            var $gridTr = $tBody.find("tr");
            $tableBodyRow.find("input:checked").each(function () {
                var index = $gridTr.index($(this).closest("tr"));
                selectedIdxArr.push(index);
            });
            return selectedIdxArr;
        };
        /**
        * 获取选中行数据
        * @param {Boolean} bClone - true取缓存中的全部，undefined，false 取视图数据，此为默认
        * @returns {Object} rd - 选中数据对象
        */
        RxmMobileGrid.prototype.getSelectedData = function (bClone) {
            var rows = this.getSelectedRow();
            var rd = _doc.getRowDataByViewIndexs(rows, bClone);
            return rd;
        };
        /**
        * 获取滑动行数据
        * @param {String} domElement - dom选择器
        * @returns {Object} rd - 当前滑动行数据对象
        */
        RxmMobileGrid.prototype.getSlideRowData = function (domElement, bClone) {
            var rows = this.getRowViewIndex(domElement);
            var rd = _doc.getRowDataByViewIndexs(rows, bClone);
            return rd;
        };
        /**
        * 通过index选中一行、多行或者全选
        * @param {Number|Array} viewIndexs - 行索引 此参数可为数字、数组、空
        */
        RxmMobileGrid.prototype.checkRow = function (viewIndexs) {
            //获取表格中所有checkbox  jquery对象
            var $checkTr = $gridWrap.find("input[name='s_gird_multi_" + this._config.id + "']");
            //参数为数字,选中单行
            if ($.isNumeric(viewIndexs)) {
                $($checkTr[viewIndexs]).prop("checked", true);
            }
            else if ($.isArray(viewIndexs)) {
                //参数为数组,选中多行
                $.each(viewIndexs, function (index, it) {
                    $($checkTr[it]).prop("checked", true);
                });
            }
            else {
                //参数为为空,全选
                $checkTr.prop("checked", true);
            }
        };
        /**
        * 通过index取消选中一行、多行或者全部
        * @param {Number|Array} viewIndexs - 行索引 此参数可为数字、数组、空
        */
        RxmMobileGrid.prototype.uncheckRow = function (viewIndexs) {
            //获取表格中所有checkbox  jquery对象
            var $checkTr = $gridWrap.find("input[name='s_gird_multi_" + this._config.id + "']");
            //参数为数字,选中单行
            if ($.isNumeric(viewIndexs)) {
                $($checkTr[viewIndexs]).prop("checked", false);
            }
            else if ($.isArray(viewIndexs)) {
                //参数为数组,选中多行
                $.each(viewIndexs, function (index, it) {
                    $($checkTr[it]).prop("checked", false);
                });
            }
            else {
                //参数为为空,全选
                $checkTr.prop("checked", false);
            }
        };
        /**
        * 追加数据
        * @param {Array} rows - 当前页数据
        * @param {Number} beginPageNum - 起始页面码数
        */
        RxmMobileGrid.prototype.appendRow = function (rows, forceLoad) {
            ///<param name="beginPageNum" type="number">起始页面码数</param>
            _doc.viewAppendRow(rows, beginPageNum);
        };
        /**
        * 插入数据
        * @param {Array} arg - 插入数据数组
        * @param {Boolean} forceLoad - true 到服务器端,重新取数据
        */
        RxmMobileGrid.prototype.insertRow = function (arg, forceLoad) {
            _doc.viewInsertRow(arg, forceLoad);
        };
        /**
        * 删除数据
        * @param {Array} arg - 删除数据的行索引数组
        * @param {Boolean} forceLoad - true 到服务器端,重新取数据
        */
        RxmMobileGrid.prototype.deleteRow = function (viewIndexs, forceLoad) {
            if ($.isNumeric(viewIndexs)) {
                var t = viewIndexs;
                viewIndexs = [];
                viewIndexs.push(t);
            }
            viewIndexs.sort(function (a, b) {
                return b - a;
            });
            this.touchRowInfo(viewIndexs[viewIndexs.length - 1]);
            _doc.viewDeleteRow(viewIndexs, forceLoad);
        };
        /**
        * 更新行数据
        * @param {Array} arg - 更新数据的行索
        * @param {Boolean} forceLoad - true 到服务器端,重新取数据
        */
        RxmMobileGrid.prototype.updateRow = function (arg, forceLoad) {
            _doc.viewUpdateRow(arg, forceLoad);
        };
        /**
        * 获取page信息
        * @returns {Object}  - page信息对象
        */
        RxmMobileGrid.prototype.getPageInfo = function () {
            return _pageInfo;
        };
        /**
        * 获取page信息
        * @returns {Object}  - page信息对象
        */
        RxmMobileGrid.prototype.pageInfo = function () {
            return _pageInfo;
        };
        /**
        * 重新加载表格(数据更新)
        * @param {Object} arg - 共有三个参数：type,value,page
        */
        RxmMobileGrid.prototype.reload = function (arg) {
            if (!_isRender) {
                //判断是否为桌面版
                if (isDesktop(this._config.id)) {
                    this._renderPc();
                }
                else {
                    this._render();
                }
                _isRender = true;
            }
            _doc.reload(arg);
        };
        /**
        * 刷新表格（视图更新）_doc.reload调用
        */
        RxmMobileGrid.prototype.refresh = function (arg) {
            ///<param  name ="arg"  type="Array"><param>
            var cf = this._config;
            //清空表格中所有数据
            $tBody.empty();
            var trHeight = 40;
            if (isDesktop(this._config.id)) {
                //表格包裹器设置高度
                var $selPageSize = $gridWrap.find(".rxm-page-size select option:selected").val();
                $gridWrap.find(".rxm-table-body").css("height", trHeight * $selPageSize + "px");
                //桌面端 设置分页数据以及绑定分页按钮事件
                this._setPaginationDataEvent();
            }
            var baseIndex = (parseInt(_pageInfo.curPage) - 1) * parseInt(this._config.pageSize);
            var begin = cf.param.viewBegin * cf.pageSize;
            var cacheD = cf.param.data.length;
            var viewD = (cf.param.viweMaxLen + cf.param.viewBegin) * cf.pageSize;
            var end = cacheD < viewD ? cacheD : viewD;
            //循环迭代数据创建表格行
            var i = 0;
            //reload 返回数据即画表格，若无数据则提示"暂无数据！"
            if (end > 0) {
                for (var j = begin; j < end; j++, i++) {
                    var item = this._config.param.data[j];
                    $tBody.append(this._createRow(this, item, i + 1, baseIndex));
                }
            }
            else {
                //桌面版表格,无数据时需要设置colspan
                if (isDesktop(cf.id)) {
                    var thLen = $gridWrap.find(".rxm-table-body th").length;
                    $tBody.append($("<tr class='rxm-nodata-tip-tr'><td class='rxm-nodata-tip' colspan = '" + thLen + "'>" + this._config.refreshTip.nodataTip + "</td></tr>"));
                }
                else {
                    $tBody.append($("<tr class='rxm-nodata-tip-tr'><td class='rxm-nodata-tip'>" + this._config.refreshTip.nodataTip + "</td></tr>"));
                }
            }
            //点击checkbox防止触发行事件
            if (this._config.slidemenu) {
                //左滑行 checkbox的input框放在div中
                $gridWrap.find(".rxm-multi-check").closest("div").tap(function () {
                    return false;
                });
            }
            else {
                //普通行 checkbox的input框放在td中
                $gridWrap.find(".rxm-multi-check").closest("td").tap(function () {
                    return false;
                });
            }
            var touchInfo = this.touchRowInfo();
            $tableBody.scrollTop(touchInfo.scrollPos);
            if (_pressFlag) {
                this.initPress();
            }
            //add by xiangcq 2017.10.27 判断苹果设备 去除高度  去除scroll样式
            if (appTool.isIOS()) {
                $("#rxm_content").css("height", "auto").removeClass('content-class');
            }
        };
        /**
        * 计算表格 包裹器高度
        * @returns {Number} index - 视图行索引
        */
        var _calWrapHeight = function () {
            var wrapHeight = $gridWrap[0].getBoundingClientRect();
            var $wParent = $gridWrap.parent();
            if ($wParent.hasClass("rxm-content-panel") || $wParent.hasClass("rxm-left-panel") || $wParent.hasClass("rxm-top-panel")) {
                wrapHeight = "100%";
            }
            else {
                //如果用户配置高度
                if (!!thisObj._config.height) { //表格config对象 height设置
                    wrapHeight = thisObj._config.height;
                }
                else if (wrapHeight.height) {
                    wrapHeight = wrapHeight.height;
                }
                else {
                    wrapHeight = $('html').height() - wrapHeight.top;
                }
            }
            return wrapHeight;
        };
        /**
        * 移动端 加载视图内所有属性（表格、标题栏、工具栏、搜索栏、刷新栏)
        */
        RxmMobileGrid.prototype._render = function () {
            //首先检查根据ID判断表容器$gridWrap是否存在，若存在即设置容器
            //$gridWrap.attr("dataurl")为undefined 兼容原有表格 只定义包裹器div即可
            if (!this._isHtmlAttrCfg()) { //false
                $gridWrap.addClass("rxm-s-grid").empty();
            }
            this._config.textEllipsis && $gridWrap.addClass("rxm-s-grid-ellipsis");
            //获取包裹器高度
            _wrapHeight = _calWrapHeight();
            //初始化包裹器表格高度值,表格config对象 height属性设置的高度最优先, 其次为html div包裹器设置的高度,如果都不设置默认取屏幕可用高度
            //  if(!!this._config.height){//表格config对象 height设置
            //      _wrapHeight = this._config.height;
            //  }else if($gridWrap.height() !== 0 && $gridWrap.height() !== 100 && !this._config.height){//html div包裹器高度设置
            //     var otherHeight = 0;
            //      for(var i=0;i<$gridWrap.siblings().length;i++){
            //          if($($gridWrap.siblings()[i]).css("display")!="none"  &&  $($gridWrap.siblings()[i]).css("visibility")!="hidden"){
            //              otherHeight += $($gridWrap.siblings()[i]).height();
            //          }
            //      }
            //      _wrapHeight = $gridWrap.height() - otherHeight;
            //      this._config.height = parseInt(_wrapHeight);
            //  }else if($gridWrap.height()==0 && !this._config.height){//未设置高度，默认取屏幕可用高度
            //      var otherHeight = 0;
            //      for(var i=0;i<$gridWrap.siblings().length;i++){
            //          if($($gridWrap.siblings()[i]).css("display")!="none"  &&  $($gridWrap.siblings()[i]).css("visibility")!="hidden"){
            //              otherHeight += $($gridWrap.siblings()[i]).height();
            //          }
            //      }
            //      _wrapHeight = _wrapHeight - otherHeight;
            //      this._config.height = _wrapHeight;
            //  }
            //表格包裹器设置高度
            $gridWrap.css("height", _wrapHeight);
            //判断htm文件中表格包裹器div是否存在定制titlebar
            if ($gridWrap.find(".rxm-s-grid-titlebar").length == 0) {
                $gridWrap.append($('<div class="rxm-s-grid-titlebar"></div>'));
                $gridWrap.find(".rxm-s-grid-titlebar").css("display", "none");
            }
            ;
            //从整个html页面中选择toolbar
            $toolbar = $(".rxm-s-grid-toolbar[ormgrid=" + this._config.id + "]");
            //判断html文件中是否存在定制toolbar,如果没有添加默认
            if ($toolbar.length === 0) {
                //判断html文件中是否存在定制toolbar
                $gridWrap.find(".rxm-s-grid-titlebar").after($('<div class="rxm-s-grid-toolbar" ormgrid=' + this._config.id + '></div>'));
                $gridWrap.find(".rxm-s-grid-toolbar").css("display", "none");
                //重新定义toolbar
                $toolbar = $(".rxm-s-grid-toolbar[ormgrid=" + this._config.id + "]");
            }
            //判断html文件中表格包裹器div是否存在定制searchbar
            if ($gridWrap.find(".rxm-s-grid-searchbar").length == 0) {
                $gridWrap.append($('<div class="rxm-s-grid-searchbar"></div>'));
                $gridWrap.find(".rxm-s-grid-searchbar").css("display", "none");
            }
            ;
            //判断html文件中是否存在定制topRefreshbar
            if ($gridWrap.find(".rxm-s-grid-topRefreshbar").length == 0) {
                $gridWrap.append($('<div class="rxm-s-grid-topRefreshbar"></div>'));
                $gridWrap.find(".rxm-s-grid-topRefreshbar").css("display", "none");
            }
            //判断html文件中是否存在定制表格
            if ($gridWrap.find(".rxm-s-grid-content").length == 0) {
                $gridWrap.append($('<div class="rxm-s-grid-content"><div class="rxm-s-grid-table"></div></div>'));
            }
            ;
            //判断html文件中是否存在定制s_grid_bottomRefreshbar
            if ($gridWrap.find(".rxm-s-grid-bottomRefreshbar").length == 0) {
                $gridWrap.append($('<div class="rxm-s-grid-bottomRefreshbar"></div>'));
                $gridWrap.find(".rxm-s-grid-bottomRefreshbar").css("display", "none");
            }
            //判断操作系统为IOS系统，添加s_grid_content样式 padding-top:1px 解决IOS未定制搜索框、操作栏场景下 下拉刷新失效的问题
            if (appTool.isIOS()) {
                $gridWrap.find(".rxm-s-grid-content").css("padding-top", "1px");
            }
            $titlebar = $("#" + this._config.id + " .rxm-s-grid-titlebar");
            //$toolbar = $("#" + this._config.id + " .rxm-s-grid-toolbar");   
            $searchbar = $("#" + this._config.id + " .rxm-s-grid-searchbar");
            $topRefreshbar = $("#" + this._config.id + " .rxm-s-grid-topRefreshbar");
            $gridContent = $("#" + this._config.id + " .rxm-s-grid-content");
            $bottomRefreshbar = $("#" + this._config.id + " .rxm-s-grid-bottomRefreshbar");
            $gridWrap.on(RxmMobileGrid.msgEnum.ormRereshGridView, $.proxy(this._onRefreshView, this));
            //加载表格  标题栏、工具栏、搜索栏、表格数据、顶部刷新栏、底部刷新栏
            this.renderTitleBar();
            this.renderToolbar();
            this.renderSearchBar();
            this._renderTable();
            if (!this._isHtmlAttrCfg()) {
                this.renderTopRefreshbar();
                this.renderBottomRefreshbar();
            }
        };
        /**
        * 计算表格table-body高度
        * @returns {Number} tBodyHeight - 表格table-body高度值
        */
        var _calTableBodyHeight = function () {
            //计算table-body坐标值
            var tBodyHeight = $gridWrap.find(".rxm-table-body")[0].getBoundingClientRect();
            var $wParent = $gridWrap.parent();
            if ($wParent.hasClass("rxm-content-panel") || $wParent.hasClass("rxm-left-panel") || $wParent.hasClass("rxm-top-panel")) {
                tBodyHeight = $gridWrap.height() - tBodyHeight.top;
            }
            else {
                //计算table-body高度 总高度减去div上沿高度
                tBodyHeight = $('html').height() - tBodyHeight.top - _footerOffset;
            }
            return tBodyHeight;
        };
        /**
         * 设置页面底部补偿
         * @returns {Number} value - 底部补偿值
         */
        RxmMobileGrid.prototype.attrFooterOffset = function (value) {
            if (typeof value != "undefined") {
                _footerOffset = value;
                $gridWrap.attr("footeroffset", _footerOffset);
            }
            else {
                if ($('body').find(".rxm-footerOffset").length > 0) {
                    _footerOffset = $('body').find(".rxm-footer").outerHeight();
                }
            }
            return _footerOffset;
        };
        /**
         * 移动端 渲染表格
         */
        RxmMobileGrid.prototype._renderTable = function () {
            var the = this;
            var _tBodyHeight;
            var $table = $gridWrap.find(".rxm-s-grid-table table tbody").empty();
            if (!this._isHtmlAttrCfg()) {
                $table = $gridWrap.find(".rxm-s-grid-table").empty();
            }
            //清除id为mCSB_1 div的tabindex属性 消除行点击事件表格出现黄色的边线
            $gridWrap.find("#mCSB_1").removeAttr("tabindex");
            //计算总页数
            _pageInfo.pageCount = Math.ceil(_pageInfo.dataCount / this._config.pageSize);
            //数据表格高度样式以及滚动条设置 modify by xiangcq 20180109 设置table-body高度
            //  if (!!this._config.title || $titlebar.css("display")!='none') {   
            //      this._config.height = this._config.height - 50;
            //  }
            //  if (!!this._config.toolbar && $toolbar.css("display")!='none') {
            //      this._config.height = this._config.height - 50;
            //  }
            //  if (!!this._config.searchbar || $searchbar.css("display")!='none') {
            //      this._config.height = this._config.height - $searchbar.outerHeight();
            //  }
            if (!this._isHtmlAttrCfg()) {
                //表格table-body设置高度  此高度小于等于包裹器高度
                // var style = 'style="overflow-x:hidden;overflow-y:auto;' + (_tBodyHeight && "height:" + _tBodyHeight +"px") + '"';
                var $tableBodyOne = $('<div class="rxm-table-body"><table class="table table_hover"><tbody></tbody></table></div>');
                $table.append($tableBodyOne);
                _tBodyHeight = _calTableBodyHeight();
                $gridWrap.find(".rxm-table-body").css("height", _tBodyHeight);
                $gridWrap.find(".rxm-table-body").css("overflow-x", "hidden");
                $gridWrap.find(".rxm-table-body").css("overflow-y", "auto");
            }
            else {
                _tBodyHeight = _calTableBodyHeight();
                //表格table-body设置高度  此高度小于等于包裹器高度
                $gridWrap.find(".rxm-table-body").css("height", _tBodyHeight);
                $gridWrap.find(".rxm-table-body").css("overflow-x", "hidden");
                $gridWrap.find(".rxm-table-body").css("overflow-y", "auto");
            }
            $tableBody = $gridWrap.find(".rxm-table-body");
            $tBody = $gridWrap.find("tbody");
            //上滑手势事件绑定
            $tableBody.swipeUpMove($.proxy(this._onSwipeUpMove, this));
            //下滑手势事件绑定
            $tableBody.swipeDownMove($.proxy(this._onSwipeDownMove, this));
            //上滑结束手势事件绑定
            $tableBody.swipeUpEnd($.proxy(this._onSwipeUpEnd, this));
            //下滑结束手势事件绑定
            $tableBody.swipeDownEnd($.proxy(this._onSwipeDownEnd, this));
            //点击事件绑定
            $tableBody.tap("tr", $.proxy(this._onTapLine, this));
            //长按事件绑定
            $tableBody.press("tr", $.proxy(this._onPressLine, this));
            //上拉到底即激发事件   隐藏底部loading信息
            this.callbackLoadSucsess({ fn: function (e, data) {
                    if (data.loadParam.type == "bottom") {
                        if (data.status == "sucsess") {
                            setTimeout(function () {
                                $bottomRefreshbar.css("display", "none");
                            }, 800);
                        }
                        else {
                            setTimeout(function () {
                                $bottomRefreshbar.empty();
                                var $tip = $('<span>' + the._config.refreshTip.bottomTipError + '</span>');
                                $bottomRefreshbar.append($tip);
                                setTimeout(function () {
                                    $bottomRefreshbar.css("display", "none");
                                    //重置数据加载中提示信息
                                    $bottomRefreshbar.empty();
                                    //			                var $loading = $('<span class="rxm-grid-loading"/>&nbsp;&nbsp;&nbsp;<span>' + the._config.refreshTip.bottomTipLoading + '</span>');
                                    //			                $bottomRefreshbar.append($loading);
                                    the.renderBottomRefreshbar();
                                }, 500);
                            }, 2000);
                        }
                    }
                } });
            var clkFun;
            var preFun;
            for (var i = 0; i < this._config.rowevent.length; i++) {
                if (!!this._config.rowevent[i].click) {
                    clkFun = this._config.rowevent[i].click;
                }
                if (!!this._config.rowevent[i].press) {
                    preFun = this._config.rowevent[i].press;
                }
            }
            //绑定数据列表配置的所有事件
            if (!!clkFun) {
                this.bindTapLineElement({ fn: clkFun }, this);
            }
            if (!!preFun) {
                this.bindPressLineElement({ fn: preFun }, this);
            }
        };
        /**
        * 桌面端 渲染表格
        *
        */
        RxmMobileGrid.prototype._plusViewBegin = function () {
            var cf = this._config;
            var scrollHight = $tableBody[0].scrollHeight;
            var scrollTop = $tableBody.scrollTop();
            //$tableBody高度
            var tableHight = $tableBody.height();
            var b = scrollHight - scrollTop - tableHight < 200;
            // console.info("_downViewBegin" + $tableBody.scrollTop());
            //if (b) { console.info("_plusViewBegin++" + cf.param.viewBegin); };
            if (b && (cf.param.viewBegin + cf.param.viweMaxLen) * cf.pageSize < cf.param.data.length) {
                cf.param.viewBegin++;
                //console.info("_plusViewBegin++" + cf.param.viewBegin);
                this.refresh();
                return true;
            }
            return false;
        };
        RxmMobileGrid.prototype._minViewBegin = function () {
            var cf = this._config;
            var b = $tableBody.scrollTop() < 200;
            if (b && cf.param.viewBegin > 0) {
                cf.param.viewBegin--;
                //console.info("_minViewBegin--" + cf.param.viewBegin);
                this.refresh();
                return true;
            }
            return false;
        };
        /**
        * 上滑手势监听函数(上拉分页)
        * @param {event} evt - jquery event对象
        * @param {Object} data - 滑动位置数据对象
        */
        RxmMobileGrid.prototype._onSwipeUpMove = function (evt, data) {
            //当前移动中tartY值
            var startYMove = data.position.delta[0].startY;
            this.touchRowInfo(evt);
            // if(this._plusViewBegin())return;
            _swipeDir = "up";
            //判定是否到底 如果处于长按状态不可上拉下拉
            if (this._isOnBottom() && _pressFlag == false) {
                if (_startYMove == 0) {
                    $gridWrap.trigger(RxmMobileGrid.msgEnum.swipeInBottom, 0);
                    $gridWrap.trigger(RxmMobileGrid.msgEnum.swipeInBottomBegin);
                    //从到底位置作为起始记录startY值
                    _startYMove = startYMove;
                }
                else {
                    //滑动距离  滑动中startY与到底位置起始记录startY值做差
                    var swipeDIF = startYMove - _startYMove;
                    //判断到底后只激发一次
                    //$gridWrap.trigger(RxmMobileGrid.msgEnum.swipeInBottom,swipeDIF);
                }
            }
        };
        /**
        * 下滑手势监听函数(下拉刷新)
        * @param {event} evt - jquery event对象
        * @param {Boolean} data - 滑动位置数据对象
        */
        RxmMobileGrid.prototype._onSwipeDownMove = function (evt, data) {
            //当前移动中tartY值
            this.touchRowInfo(evt);
            if (this._minViewBegin())
                return;
            _swipeDir = "down";
            var startYMove = data.position.delta[0].startY;
            //判断是否到顶 如果处于长按状态不可上拉下拉
            if (this._isOnTop() && _pressFlag == false) {
                if (_startYMove == 0) {
                    $gridWrap.trigger(RxmMobileGrid.msgEnum.swipeInTop, 0);
                    $gridWrap.trigger(RxmMobileGrid.msgEnum.swipeInTopBegin);
                    _startYMove = startYMove;
                }
                else {
                    var swipeDIF = startYMove - _startYMove;
                    //判断到顶后持续激发 阻尼下拉效果		
                    $gridWrap.trigger(RxmMobileGrid.msgEnum.swipeInTop, swipeDIF);
                }
            }
        };
        /**
        * 上滑手势结束监听函数(上拉分页)
        */
        RxmMobileGrid.prototype._onSwipeUpEnd = function () {
            //滚动距离总长(注意不是滚动条的长度)
            var scrollHight = $tableBody[0].scrollHeight;
            //滚动到的当前位置
            var scrollTop = $tableBody.scrollTop();
            //$tableBody高度
            var tableHight = $tableBody.height();
            //判断是否到底，上拉分页
            if (scrollTop + tableHight >= scrollHight) {
                $gridWrap.trigger(RxmMobileGrid.msgEnum.swipeInBottomEnd);
            }
        };
        /**
        * 下滑手势结束监听函数(下拉刷新)
        */
        RxmMobileGrid.prototype._onSwipeDownEnd = function () {
            //判断是否到顶，如果处于长按状态不可上拉下拉
            if (this._isOnTop() && _pressFlag == false) {
                $gridWrap.trigger(RxmMobileGrid.msgEnum.swipeInTopEnd);
            }
        };
        /**
        * 向表格中追加一行数据
        * @param {Object} grid - 表格对象
        * @param {Object} row - 行数据
        * @param {Number} rowIndex - 行索引
        * @param {Number} baseIndex - true克隆数据，undefined，false 返回 view 数据此为默认
        * @returns {Object} $tr - 行对象
        */
        RxmMobileGrid.prototype._createRow = function (grid, row, rowIndex, baseIndex) {
            //渲染表格行前触发
            if (typeof (this._config.onBeforeRenderRow) == "function") {
                //可对行数据进行处理
                row = this._config.onBeforeRenderRow.apply(this, [row]) || row;
            }
            //配置tr rowevent
            var $tr = $("<tr></tr>");
            if (!!this._config.rowevent && this._config.rowevent.length > 0) {
                for (var i = 0, length = this._config.rowevent.length; i < 1; i++) {
                    var item = this._config.rowevent[i];
                    $tr = $("<tr class='" + item.field + "'></tr>");
                }
            }
            if (isDesktop(this._config.id)) {
                $tr = this.createRowInPc(row, $tr, rowIndex, baseIndex);
            }
            else {
                if (!!this._config.slidemenu && this._config.slidemenu.length > 0) {
                    $tr = this.createSlideRow(this, row, $tr);
                }
                else {
                    $tr = this.createRow(this, row, $tr);
                }
            }
            return $tr;
        };
        /**
        * 创建左滑菜单行
        * @param {Object} grid - 表格对象
        * @param {Object} row - 行数据
        * @param {Object} $tr - 表格行对象
        * @returns {Object} $tr - 表格行对象 jquery对象
        */
        RxmMobileGrid.prototype.createSlideRow = function (grid, row, $tr) {
            //创建表格行数据   共4列  icon 数据内容 (标题+内容)   复选框(默认隐藏)  
            var the = this;
            var $td = $('<td width="100%" style="padding:0px"></td>');
            var $wrapperDiv = $('<div class="rxm-slide-wrapper clearfix"></div>');
            var $scrollDiv = $('<div class="rxm-slide-scroll-wrapper clearfix"></div>');
            var $iconDiv = $('<div class="rxm-icon-div clearfix"></div>');
            var $dataDiv = $('<div class="rxm-data-div clearfix"></div>');
            var $slideBtnDiv = $('<div class="rxm-slide-btn-div clearfix"></div>');
            var $checkboxDiv = $('<div class="rxm-td-checkbox fix" style="display:none;float:left" ></div>');
            //数据字段个数
            var parNum = this._config.layout.length;
            var firstField = '1';
            //循环创建icon与数据列
            for (var j = 0, item; item = this._config.layout[j++]; j < item.length) {
                var tdName = item.name;
                var tdValue = item.format ? item.format({ "row": row }) : row[item.field];
                if (item.field == "icon") {
                    _hasIcon = true;
                    parNum = parNum - 1;
                    tdValue = (tdValue || tdValue == 0) ? "" + tdValue : "";
                    $iconDiv.append(tdValue);
                    $scrollDiv.append($iconDiv);
                }
                else {
                    tdValue = (tdValue || tdValue == 0) ? "" + tdValue : "";
                    if (firstField === '1') {
                        if (tdName !== "" && tdName !== null) {
                            $dataDiv.append("<span class='rxm-col-name'>" + tdName + '&nbsp;:&nbsp;' + "</span><span class='rxm-col-value'>" + tdValue + "</span>");
                            firstField = '2';
                        }
                        else {
                            $dataDiv.append("<span class='rxm-col-value'>" + tdValue + "</span>");
                            firstField = '2';
                        }
                    }
                    else {
                        if (tdName !== "" && tdName !== null) {
                            //其他字段换行
                            $dataDiv.append("</br><span class='rxm-col-name'>" + tdName + '&nbsp;:&nbsp;' + "</span><span class='rxm-col-value'>" + tdValue + "</span>");
                        }
                        else {
                            //其他字段换行
                            $dataDiv.append("</br><span class='rxm-col-value'>" + tdValue + "</span>");
                        }
                    }
                }
                $scrollDiv.append($dataDiv);
            }
            //创建checkbox列   multi属性配置为true：多选框      false：单选按钮
            if (typeof this._config.multi != "undefined") {
                $checkboxDiv.append('<input class="rxm-multi-check" type="' + (this._config.multi ? 'checkbox' : 'radio') + '" name="s_gird_multi_' + (this._config.id) + '" ' + (row["_checked"] ? "checked" : "") + '>');
                $scrollDiv.append($checkboxDiv);
            }
            //渲染表格行后触发
            if (typeof (this._config.onAfterRenderRow) == "function") {
                this._config.onAfterRenderRow.apply($tr, [row]);
            }
            $scrollDiv.append($slideBtnDiv);
            $wrapperDiv.append($scrollDiv);
            $td.append($wrapperDiv);
            $tr.append($td);
            //设置tr中各个部分的div高度值、宽度值
            this._attrSlideRowStyle($slideBtnDiv, $dataDiv, $scrollDiv, $iconDiv, parNum);
            //数据行绑定touchStart触屏开始事件
            this._bindTrSlideEvent($scrollDiv);
            return $tr;
        };
        /**
         * 设置左滑行内div高度与宽度
         * @param {Number} parNum - 单个字段高度值
         */
        RxmMobileGrid.prototype._attrSlideRowStyle = function ($slideBtnDiv, $dataDiv, $scrollDiv, $iconDiv, parNum) {
            //数据div高度
            var dataDivHeight = parNum * this._config.trRowParam.parHeight;
            //滑动菜单div设置高度
            //$slideBtnDiv.height(dataDivHeight + this._config.trRowParam.dataMargin);
            //滑动按钮区域div高度值
            var slideBtnDivHeight = dataDivHeight + this._config.trRowParam.dataMargin / 2;
            //ios处理菜单div高度少4px的问题
            if (appTool.isIOS()) {
                slideBtnDivHeight = dataDivHeight + this._config.trRowParam.dataMargin / 2 + 4;
            }
            $slideBtnDiv.height(slideBtnDivHeight);
            if (_hasIcon) {
                _iconMargin = dataDivHeight / 2 + this._config.trRowParam.dataMargin / 2 - 20;
                $iconDiv.css("margin-top", _iconMargin);
            }
            //tr宽度
            var screenWidth = $(window).width() - this._config.trRowParam.trMargin;
            //数据显示div宽度 tr宽度 减去 icon宽度
            var dataWidth = screenWidth;
            //判断是否具有icon列,若有即减去icon列宽度
            if (_hasIcon) {
                dataWidth = screenWidth - this._config.trRowParam.iconWidth;
            }
            //数据显示div设置宽度
            $dataDiv.width(dataWidth);
            //获取左滑按钮的数量，计算左滑按钮区域面积
            var itemWidth = 0;
            for (var i = 0, length = this._config.slidemenu.length; i < length; i++) {
                var item = this._config.slidemenu[i];
                var $btnWrap = $('<div class="rxm-slide-btn"></div>');
                //滑动菜单绑定事件
                $btnWrap.tap(this, item.callback);
                var $btn = $('<div></div>');
                //滑动菜单内容垂直居中设置
                $btn.css("line-height", slideBtnDivHeight + "px");
                //按钮图标
                if (!!item.icon) {
                    var $btnIcon = $("<i></i>");
                    $btnIcon.attr("class", item.icon);
                    $btn.append($btnIcon);
                }
                //按钮名称
                if (!!item.name) {
                    $btn.append(item.name);
                }
                //按钮文字大小
                if (!!item.fontSize) {
                    $btn.css("font-size", item.fontSize);
                }
                //按钮文字颜色
                if (!!item.fontSize) {
                    $btn.css("color", item.fontColor);
                }
                //按钮背景色
                if (!!item.color) {
                    $btn.css("background-color", item.color);
                }
                //按钮样式表
                $btn.addClass(item.class);
                //按钮宽度
                if (!!item.width) {
                    $btn.width(item.width);
                }
                $btnWrap.append($btn);
                $slideBtnDiv.append($btnWrap);
                itemWidth += item.width ? parseInt(item.width) : this._config.leftSlideParam.btnWidth;
                console.info(btnAreaWidth);
            }
            //滑动菜单区域div宽度 每个按钮宽度之和
            btnAreaWidth = itemWidth;
            //滑动按钮div设置宽度  默认宽度每个60  可配置
            $slideBtnDiv.width(btnAreaWidth);
            //具有滚动条div宽度 tr宽度 加上 隐藏按钮宽度
            var scrollWidth = screenWidth + btnAreaWidth;
            //滚动条div设置宽度  
            $scrollDiv.width(scrollWidth);
            scrollDivWidth = scrollWidth;
            dataDivWidth = dataWidth;
        };
        /**
         * 绑定表格行左滑事件
         * @param {Object} $slideTr - 表格行对象
         */
        RxmMobileGrid.prototype._bindTrSlideEvent = function ($slideTr) {
            var the = this;
            //数据行绑定touchStart触屏开始事件
            $slideTr.touchStart(function (e, data) {
                if (!_pressFlag) {
                    // 记录当前触屏的行对象 
                    slideCurSwipeTr = this;
                    // 当前滑动数据行设定过渡效果设置  1、过渡效果的 CSS 属性的名称   2、完成过渡效果需要多少秒或毫秒  3、速度效果的速度曲线（过渡效果）
                    the._setTransition($(slideCurSwipeTr));
                    // 点击除当前左滑对象之外的任意其他位置
                    if (slideLastSwipeTr && slideCurSwipeTr != slideLastSwipeTr) {
                        $(slideCurSwipeTr).removeData("position");
                        $(slideLastSwipeTr).removeData("position");
                        // 上一个左滑对象设定过渡效果设置  1、过渡效果的 CSS 属性的名称   2、完成过渡效果需要多少秒或毫秒  3、速度效果的速度曲线（过渡效果）
                        the._setTransition($(slideLastSwipeTr));
                        // 隐藏上一个左滑对象按钮
                        the._resetStatus($(slideLastSwipeTr));
                        // 清空上一个左滑的对象
                        slideLastSwipeTr = null;
                    }
                }
            });
            //数据行绑定touchMove触屏移动事件
            $slideTr.touchMove(function (e, data) {
                if (!_pressFlag) {
                    //滑动距离  当前滑动横向坐标减去起始横向坐标
                    var moveDis = data.position.delta[0].moved;
                    //滑动方向
                    var curSwipe = data.curSwipe;
                    //console.info('moveDis==='+moveDis);
                    //左滑，距离在75之内，按钮区域随着左滑距离逐渐显示，大于75后按钮区域不变
                    console.info('btnAreaWidth===' + btnAreaWidth);
                    if (moveDis <= btnAreaWidth && curSwipe == "Left" && $(slideCurSwipeTr).data("position") != "view") {
                        $(slideCurSwipeTr).css('-webkit-transform', 'translate3d(' + -moveDis + 'px, 0px, 0px)');
                    }
                    //左滑完全显示按钮区域，标识词条数据位置为显示
                    if (moveDis > btnAreaWidth && curSwipe == "Left") {
                        $(slideCurSwipeTr).data("position", "view");
                        console.info('position===' + slideCurSwipeTr);
                    }
                    //右滑，按钮区域直接隐藏
                    if (curSwipe == "Right") {
                        the._resetStatus($(slideCurSwipeTr));
                    }
                }
            });
            //数据行绑定touchEnd触屏结束事件
            $slideTr.touchEnd(function (e, data) {
                if (!_pressFlag) {
                    // 点击除当前左滑对象之外的任意其他位置
                    if (slideLastSwipeTr && slideCurSwipeTr != slideLastSwipeTr) {
                        // 右滑隐藏按钮
                        the._resetStatus($(slideLastSwipeTr));
                        // 清空上一个左滑的对象
                        slideLastSwipeTr = null;
                    }
                    //滑动方向
                    var curSwipe = data.curSwipe;
                    if (curSwipe != "") {
                        //移动距离  结束时横向坐标减去起始横向坐标
                        var moveDis = data.position.delta[0].moved;
                        console.info('moveDis===' + moveDis);
                        //当滑动结束时，左滑距离大于设置距离数值，显示按钮区域
                        if (moveDis > the._config.leftSlideParam.viewWidth && curSwipe == "Left") {
                            //显示按钮区域
                            $(slideCurSwipeTr).css('-webkit-transform', 'translate3d(' + (-1 * btnAreaWidth) + 'px, 0px, 0px)');
                            $(slideCurSwipeTr).data("position", "view");
                            slideLastSwipeTr && slideLastSwipeTr != slideCurSwipeTr &&
                                $(slideLastSwipeTr).css('-webkit-transform', 'translate3d(0px, 0px, 0px)'); // 已经左滑状态的按钮右滑
                            slideLastSwipeTr = slideCurSwipeTr; // 记录上一个左滑的对象
                        }
                        else if (moveDis < the._config.leftSlideParam.viewWidth && curSwipe == "Left") {
                            the._resetStatus($(slideCurSwipeTr));
                            if (slideCurSwipeTr == slideLastSwipeTr) {
                                // 右滑
                                the._resetStatus($(slideCurSwipeTr));
                                // 清空上一个左滑的对象
                                slideLastSwipeTr = null;
                            }
                        }
                    }
                }
            });
        };
        /**
        * 渲染表格行数据(可重写)
        * @param {Object} grid - 表格对象
        * @param {Object} row - 行数据
        * @param {Object} $tr - 表格行对象
        * @returns {Object} $tr - 表格行对象 jquery对象
        */
        RxmMobileGrid.prototype.createRow = function (grid, row, $tr) {
            //创建表格行数据   共4列  icon 数据内容 (标题+内容)  右向箭头   复选框(默认隐藏)  
            var $tdIcon = $('<td class="rxm-td-icon"></td>');
            var $tdInfo = $('<td></td>');
            var $tdArrow = $('<td class="rxm-td-arrow" ></td>');
            var $tdCheckbox = $('<td class="rxm-td-checkbox fix" style="display:none;" ></td>');
            var firstField = '1';
            //循环创建icon与数据列
            for (var j = 0, item; item = this._config.layout[j++]; j < item.length) {
                var tdName = item.name;
                var tdValue = item.format ? item.format({ "row": row }) : row[item.field];
                if (item.field == "icon") {
                    tdValue = (tdValue || tdValue == 0) ? "" + tdValue : "";
                    $tdIcon.append(tdValue);
                    $tr.append($tdIcon);
                }
                else {
                    tdValue = (tdValue || tdValue == 0) ? "" + tdValue : "";
                    if (firstField === '1') {
                        if (tdName !== "" && tdName !== null) {
                            $tdInfo.append("<span class='rxm-col-name'>" + tdName + '&nbsp;:&nbsp;' + "</span><span class='rxm-col-value'>" + tdValue + "</span>");
                            firstField = '2';
                        }
                        else {
                            $tdInfo.append("<span class='rxm-col-value'>" + tdValue + "</span>");
                            firstField = '2';
                        }
                    }
                    else {
                        if (tdName !== "" && tdName !== null) {
                            //其他字段换行
                            $tdInfo.append("</br><span class='rxm-col-name'>" + tdName + '&nbsp;:&nbsp;' + "</span><span class='rxm-col-value'>" + tdValue + "</span>");
                        }
                        else {
                            //其他字段换行
                            $tdInfo.append("</br><span class='rxm-col-value'>" + tdValue + "</span>");
                        }
                    }
                }
                $tr.append($tdInfo);
            }
            //创建checkbox列   multi属性配置为true：多选框      false：单选按钮
            if (typeof this._config.multi != "undefined") {
                $tdCheckbox.append('<input class="rxm-multi-check" type="' + (this._config.multi ? 'checkbox' : 'radio') + '" name="s_gird_multi_' + (this._config.id) + '" ' + (row["_checked"] ? "checked" : "") + '>');
                $tr.append($tdCheckbox);
            }
            //创建箭头列 
            $tdArrow.append($('<img src="' + _arrowImg + '"/>'));
            $tr.append($tdArrow);
            //渲染表格行后触发
            if (typeof (this._config.onAfterRenderRow) == "function") {
                this._config.onAfterRenderRow.apply($tr, [row]);
            }
            return $tr;
        };
        /**
        * 渲染表格标题栏(可重写)
        */
        RxmMobileGrid.prototype.renderTitleBar = function () {
            if (this._config.title) {
                $titlebar.css("display", "");
                $titlebar.empty().append(this._config.title);
            }
        };
        /**
        * 渲染表格搜索栏(可重写)
        */
        RxmMobileGrid.prototype.renderSearchBar = function () {
            if (!!this._config.searchbar) {
                $searchbar.css("display", "");
            }
        };
        /**
        * 移动端 渲染表格工具栏(可重写) 以config配置对象中的配置为主
        */
        RxmMobileGrid.prototype.renderToolbar = function () {
            //html页面中已经定义工具栏，并且将默认按钮绑定默认事件
            var liBtn = $toolbar.find("ul li");
            for (var i = 0; i < liBtn.length; i++) {
                if ($(liBtn[i]).is(".rxm-default-delete")) {
                    $(liBtn[i]).tap($.proxy(this.bindDeleteBtn, this));
                }
                if ($(liBtn[i]).is(".rxm-default-all-select")) {
                    $(liBtn[i]).tap($.proxy(this.bindSelectAllBtn, this));
                }
                if ($(liBtn[i]).is(".rxm-default-cancel")) {
                    $(liBtn[i]).tap($.proxy(this.bindCancelBtn, this));
                }
            }
            if (!!this._config.toolbar && this._config.toolbar.length > 0) {
                var $ul = $("<ul style='width:330px;'></ul>");
                for (var i = 0, length = this._config.toolbar.length; i < length; i++) {
                    var item = this._config.toolbar[i];
                    var $li = $('<li></li>');
                    $li.tap(this, item.callback);
                    $li.attr("style", item.style);
                    var $a = $('<a></a>');
                    var $i = $('<i></i>');
                    $i.attr("class", item.icon);
                    $i.appendTo($a);
                    $a.append(item.name);
                    $a.appendTo($li);
                    $li.appendTo($ul);
                }
                $toolbar.empty().append($ul);
            }
        };
        /**
        * 渲染表格顶部刷新栏(可重写)
        */
        RxmMobileGrid.prototype.renderTopRefreshbar = function () {
            var $loading = $('<img class = "rxm-top-loading-arrow" src="' + _downArrowImg + '"/>&nbsp;&nbsp;&nbsp;<span>' + this._config.refreshTip.topTipBegin + '</span>');
            $topRefreshbar.append($loading);
        };
        /**
        * 渲染表格底部刷新栏(可重写)
        */
        RxmMobileGrid.prototype.renderBottomRefreshbar = function () {
            var $loading = $('<span class="rxm-grid-loading"/>&nbsp;&nbsp;&nbsp;<span>' + this._config.refreshTip.bottomTipLoading + '</span>');
            $bottomRefreshbar.append($loading);
        };
        /**
        * 重新设置tbody高度
        */
        var _resize = function (action, height) {
            var _tbodyHeight = _calTableBodyHeight();
            if (action == "add") {
                _tbodyHeight = _tbodyHeight + height;
            }
            else {
                _tbodyHeight = _tbodyHeight - height;
            }
            $tableBody.css("height", _tbodyHeight + "px");
        };
        /**
        * 触发长按状态函数
        */
        RxmMobileGrid.prototype.initPress = function () {
            _pressFlag = true;
            if (!!this._config.slidemenu) {
                $gridWrap.find(".rxm-data-div").css("width", dataDivWidth - 30);
                $gridWrap.find(".rxm-slide-scroll-wrapper").css("width", scrollDivWidth + 40);
                $gridWrap.find(".rxm-td-checkbox").css("margin-top", _iconMargin);
                if (!!this._config.toolbar || $gridWrap.find(".rxm-s-grid-toolbar").length > 0) {
                    //显示toolbar
                    $gridWrap.find(".rxm-s-grid-toolbar").css("display", "");
                    //this._config.heigh = this._config.height - 50;
                    //调用resize 重置tableBody高度 
                    _resize("minus", $gridWrap.find(".rxm-s-grid-toolbar").outerHeight());
                    //$tableBody.css("height", this._config.heigh + "px");
                }
                //显示行数据右侧复选框
                $gridWrap.find(".rxm-td-checkbox").css("display", "");
            }
            else {
                //隐藏行数据右侧箭头
                $gridWrap.find(".rxm-td-arrow").css("display", "none");
                if (!!this._config.toolbar || $gridWrap.find(".rxm-s-grid-toolbar").length > 0) {
                    //显示toolbar
                    $gridWrap.find(".rxm-s-grid-toolbar").css("display", "");
                    //  this._config.heigh = this._config.height - 50;
                    //  $tableBody.css("height", this._config.heigh + "px");
                    _resize("minus", $gridWrap.find(".rxm-s-grid-toolbar").outerHeight());
                }
                //显示行数据右侧复选框
                $gridWrap.find(".rxm-td-checkbox").css("display", "");
            }
        };
        /**
        * 取消长按状态
        */
        RxmMobileGrid.prototype.cancelPress = function () {
            $gridWrap.find(".rxm-multi-check").prop("checked", false);
            _pressFlag = false;
            _allChecked = true;
            //提示全选
            $toolbar.find("ul .rxm-default-all-select a").html("全选");
            //隐藏行数据右侧复选框
            $gridWrap.find(".rxm-td-checkbox").css("display", "none");
            if (!!this._config.slidemenu) {
                $gridWrap.find(".rxm-data-div").css("width", dataDivWidth);
                $gridWrap.find(".rxm-slide-scroll-wrapper").css("width", scrollDivWidth);
            }
            //显示行数据右侧箭头
            $gridWrap.find(".rxm-td-arrow").css("display", "");
            if (!!this._config.toolbar || $gridWrap.find(".rxm-s-grid-searchbar").length > 0) {
                //隐藏toolbar
                $gridWrap.find(".rxm-s-grid-toolbar").css("display", "none");
                //  this._config.heigh = this._config.height + 50;
                //  $tableBody.css("height", this._config.height + "px");
                _resize("add", $gridWrap.find(".rxm-s-grid-toolbar").outerHeight());
            }
        };
        /**
        * 全选/取消全选函数
        */
        RxmMobileGrid.prototype.allSelect = function () {
            //获取表格中所有checkbox  jquery对象
            var $checkTr = $gridWrap.find("input[name='s_gird_multi_" + this._config.id + "']");
            if (_allChecked) {
                $checkTr.prop("checked", true);
                _allChecked = false;
                //提示全不选
                $toolbar.find("ul .rxm-default-all-select a").html("全不选");
            }
            else {
                $checkTr.prop("checked", false);
                _allChecked = true;
                //提示全选
                $toolbar.find("ul .rxm-default-all-select a").html("全选");
            }
        };
        /**
        * 设置长按状态
        * @param {Boolean} value - 状态值参数
        * @returns {Boolean}  - 长按状态
        */
        RxmMobileGrid.prototype.attriPressFlag = function (value) {
            if (!!value) {
                _pressFlag = value;
            }
            return _pressFlag;
        };
        /**
        * 设置top状态
        * @param {Boolean} value - 状态值参数
        * @returns {Boolean}  - top状态
        */
        RxmMobileGrid.prototype.attriTopFlag = function (value) {
            if (typeof value != "undefined") {
                var tmp = this._config._bTop;
                this._config._bTop = value;
                if (tmp != value && value) {
                    $gridWrap.trigger(RxmMobileGrid.msgEnum.swipeInTop);
                    $gridWrap.trigger(RxmMobileGrid.msgEnum.swipeInTopBegin);
                }
            }
            return this._config._bTop;
        };
        /**
        * 设置bottom状态
        * @param {Boolean} value - 状态值参数
        * @returns {Boolean} - bottom状态
        */
        RxmMobileGrid.prototype.attriBottomFlag = function (value) {
            if (typeof value != "undefined") {
                var tmp = this._config._bottom;
                this._config._bottom = value;
                if (tmp != value && value) {
                    if (_startYMove == 0) {
                        $gridWrap.trigger(RxmMobileGrid.msgEnum.swipeInBottom);
                        $gridWrap.trigger(RxmMobileGrid.msgEnum.swipeInBottomBegin);
                    }
                }
            }
            return this._config._bottom;
        };
        /**
        * 表格绑定滑动至顶部事件
        * @param {Object} arg - 参数对象
        * @param {Object} scope - this对象
        */
        RxmMobileGrid.prototype.bindSwipeInTop = function (arg, scope) {
            if (typeof arg == "boolean" || typeof arg == "undefined") {
                arg = {
                    fn: this._onSwipeInTop,
                };
                scope = this;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            $gridWrap.on(RxmMobileGrid.msgEnum.swipeInTop, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格绑定滑动至顶部事件(兼容工作流)
        */
        RxmMobileGrid.prototype.callbackSwipeInTop = RxmMobileGrid.prototype.bindSwipeInTop;
        /**
        * 表格绑定滑动至底部事件
        * @param {Object} arg - 参数对象
        * @param {Object} scope - this对象
        */
        RxmMobileGrid.prototype.bindSwipeInBottom = function (arg, scope) {
            if (typeof arg == "boolean" || typeof arg == "undefined") {
                arg = {
                    fn: this._onSwipeInBottom,
                };
                scope = this;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            $gridWrap.on(RxmMobileGrid.msgEnum.swipeInBottom, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格绑定滑动至底部事件(兼容工作流)
        */
        RxmMobileGrid.prototype.callbackSwipeInBottom = RxmMobileGrid.prototype.bindSwipeInBottom;
        /**
        * 表格绑定滑动至底部后事件
        * @param {Object} arg - 参数对象
        * @param {Object} scope - this对象
        */
        RxmMobileGrid.prototype.bindSwipeInBottomAfter = function (arg, scope) {
            if (typeof arg == "boolean" || typeof arg == "undefined") {
                arg = {
                    fn: this._onSwipeInBottomAfter,
                };
                scope = this;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            $gridWrap.on(RxmMobileGrid.msgEnum.swipeInBottomAfter, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格绑定滑动至顶部结束后事件
        * @param {Object} arg - 参数对象
        * @param {Object} scope - this对象
        */
        RxmMobileGrid.prototype.bindSwipeInTopEndAfter = function (arg, scope) {
            if (typeof arg == "boolean" || typeof arg == "undefined") {
                arg = {
                    fn: this._onSwipeInTopEndAfter,
                };
                scope = this;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            $gridWrap.on(RxmMobileGrid.msgEnum.swipeInTopEndAfter, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格绑定滑动至顶部开始事件
        * @param {Object} arg - 参数对象
        * @param {Object} scope - this对象
        */
        RxmMobileGrid.prototype.bindSwipeInTopBegin = function (arg, scope) {
            if (typeof arg == "boolean" || typeof arg == "undefined") {
                arg = {
                    fn: this._onSwipeInTopBegin,
                };
                scope = this;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            $gridWrap.on(RxmMobileGrid.msgEnum.swipeInTopBegin, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格绑定滑动至顶部开始事件(兼容工作流)
        */
        RxmMobileGrid.prototype.callbackSwipeInTopBegin = RxmMobileGrid.prototype.bindSwipeInTopBegin;
        /**
        * 表格绑定滑动至底部开始事件
        * @param {Object} arg - 参数对象
        * @param {Object} scope - this对象
        */
        RxmMobileGrid.prototype.bindSwipeInBottomBegin = function (arg, scope) {
            if (typeof arg == "boolean" || typeof arg == "undefined") {
                arg = {
                    fn: this._onSwipeInBottomBegin,
                };
                scope = this;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            $gridWrap.on(RxmMobileGrid.msgEnum.swipeInBottomBegin, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格绑定滑动至底部开始事件(兼容工作流)
        */
        RxmMobileGrid.prototype.callbackSwipeInBottomBegin = RxmMobileGrid.prototype.bindSwipeInBottomBegin;
        /**
        * 表格绑定滑动至顶部结束事件
        * @param {Object} arg - 参数对象
        * @param {Object} scope - this对象
        */
        RxmMobileGrid.prototype.bindSwipeInTopEnd = function (arg, scope) {
            if (typeof arg == "boolean" || typeof arg == "undefined") {
                arg = {
                    fn: this._onSwipeInTopEnd,
                };
                scope = this;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            $gridWrap.on(RxmMobileGrid.msgEnum.swipeInTopEnd, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格绑定滑动至顶部结束事件(兼容工作流)
        */
        RxmMobileGrid.prototype.callbackSwipeInTopEnd = RxmMobileGrid.prototype.bindSwipeInTopEnd;
        /**
        * 表格绑定滑动至底部结束事件
        * @param {Object} arg - 参数对象
        * @param {Object} scope - this对象
        */
        RxmMobileGrid.prototype.bindSwipeInBottomEnd = function (arg, scope) {
            if (typeof arg == "boolean" || typeof arg == "undefined") {
                arg = {
                    fn: this._onSwipeInBottomEnd,
                };
                scope = this;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            $gridWrap.on(RxmMobileGrid.msgEnum.swipeInBottomEnd, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格绑定滑动至底部结束事件(兼容工作流)
        */
        RxmMobileGrid.prototype.callbackSwipeInBottomEnd = RxmMobileGrid.prototype.bindSwipeInBottomEnd;
        /**
        * 表格行绑定tap事件
        * @param {Object} arg - 参数对象
        * @param {Object} scope - this对象
        */
        RxmMobileGrid.prototype.bindTapLineElement = function (arg, scope) {
            if (!arg.selector) {
                arg.selector = "tr:not(.rxm-nodata-tip-tr)";
            }
            else if (arg.selector.indexOf("tr") !== 0) {
                arg.selector = "tr:not(.rxm-nodata-tip-tr) " + arg.selector;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            //$gridWrap.on("append", arg.data, $.proxy(arg.fn, the), arg.one)
            $gridWrap.on(RxmMobileGrid.msgEnum.tapInLine, arg.selector, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格行绑定tap事件(兼容工作流)
        */
        RxmMobileGrid.prototype.callbackTapLineElement = RxmMobileGrid.prototype.bindTapLineElement;
        /**
        * 表格行绑定长按事件
        * @param {Object} arg - 参数对象
        * @param {Object} scope - this对象
        */
        RxmMobileGrid.prototype.bindPressLineElement = function (arg, scope) {
            if (!arg.selector) {
                arg.selector = "tr:not(.rxm-nodata-tip-tr)";
            }
            else if (arg.selector.index("tr") !== 0) {
                arg.selector = "tr:not(.rxm-nodata-tip-tr) " + arg.selector;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            //$gridWrap.press("tr", arg.data, $.proxy(arg.fn, the), arg.one);
            $gridWrap.on(RxmMobileGrid.msgEnum.pressInLine, arg.selector, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格行绑定长按事件(兼容工作流)
        */
        RxmMobileGrid.prototype.callbackPressLineElement = RxmMobileGrid.prototype.bindPressLineElement;
        /**
        * 表格绑定删除按钮默认事件 删除选中的数据行
        */
        RxmMobileGrid.prototype.bindDeleteBtn = function () {
            var the = this;
            //获取选中行的index数据
            var selIdx = the.getSelectedRow();
            if (!selIdx || selIdx.length < 1) {
                Util.alert("您好，请选择一条数据");
                return;
            }
            Util.confirm("您是否要删除选中的数据？", function () {
                //获取选中行数据
                var selData = the.getSelectedData();
                the.deleteRow(selIdx);
                //获取删除数据请求的ajax地址
                var delUrl = $gridWrap.find(".rxm-default-delete").attr("rxmurl");
                var arg = {
                    delUrl: delUrl,
                    delData: selData,
                    loadComplete: function () { }
                };
                _doc.ajaxDeleteRow(arg);
            }, function () {
                return;
            });
        };
        /**
        * 表格绑定全选按钮默认事件 选中当前页面所有数据
        */
        RxmMobileGrid.prototype.bindSelectAllBtn = function () {
            this.allSelect();
        };
        /**
        * 表格绑定取消按钮默认事件 长按事件取消
        */
        RxmMobileGrid.prototype.bindCancelBtn = function () {
            this.cancelPress();
        };
        /**
        * reload函数 ajax请求成功函数重写
        * @param {Object} args - 参数对象
        */
        RxmMobileGrid.prototype.formatDataAfterAjaxSuccess = function (args) {
            _doc.formatDataAfterAjaxSuccess(args);
        };
        /**
        * reload函数 ajax重写
        * @param {Object} args - 参数对象
        */
        RxmMobileGrid.prototype.formatDataBeforeAjax = function (args) {
            _doc.formatDataBeforeAjax(args);
        };
        /**
        * 数据删除函数 ajax重写
        * @param {Object} args - 参数对象
        */
        RxmMobileGrid.prototype.formatDataBeforeDelAjax = function (args) {
            _doc.formatDataBeforeDelAjax(args);
        };
        /**
        * 表格绑定数据追加事件
        * @param {Object} arg - 参数对象
        * @param {Object} scope - this对象
        */
        RxmMobileGrid.prototype.bindDataAppend = function (arg, scope) {
            if (typeof arg == "boolean" || typeof arg == "undefined") {
                arg = {
                    fn: this._onAppend,
                };
                scope = this;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            $gridWrap.on(RxmMobileGrid.msgEnum.appendRow, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格绑定数据追加事件(兼容工作流)
        */
        RxmMobileGrid.prototype.callbackDataAppend = RxmMobileGrid.prototype.bindDataAppend;
        /**
        * 表格绑定数据插入事件
        * @param {Object} arg - 参数对象
        * @param {Object} scope - this对象
        */
        RxmMobileGrid.prototype.callbackDataInsert = function (arg, scope) {
            if (typeof arg == "boolean" || typeof arg == "undefined") {
                arg = {
                    fn: this._onInsert,
                };
                scope = this;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            $gridWrap.on(RxmMobileGrid.msgEnum.insertRow, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格绑定数据删除事件
        * @param {Object} arg - 参数对象
        * @param {Object} scope - this对象
        */
        RxmMobileGrid.prototype.callbackDataDelete = function (arg, scope) {
            if (typeof arg == "boolean" || typeof arg == "undefined") {
                arg = {
                    fn: this._onDelete,
                };
                scope = this;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            $gridWrap.on(RxmMobileGrid.msgEnum.deleteRow, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格绑定数据更新事件
        * @param {Object} arg - 参数对象
        * @param {Object} scope - this对象
        */
        RxmMobileGrid.prototype.callbackDataUpdate = function (arg, scope) {
            if (typeof arg == "boolean" || typeof arg == "undefined") {
                arg = {
                    fn: this._onUpdate,
                };
                scope = this;
            }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            $gridWrap.on(RxmMobileGrid.msgEnum.updateRow, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格绑定reload成功事件 没有默认触发函数
        * @param {Object} arg - 参数对象
        * @param {Object} scope - this对象
        */
        RxmMobileGrid.prototype.callbackLoadSucsess = function (arg, scope) {
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            $gridWrap.on(RxmMobileGrid.msgEnum.loadSucsess, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格绑定reload完成后事件  没有默认触发函数
        * @param {Object} arg - 参数对象
        * @param {Object} scope - this对象
        */
        RxmMobileGrid.prototype.bindLoadComplete = function (arg, scope) {
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            $gridWrap.on(RxmMobileGrid.msgEnum.loadComplete, arg.data, $.proxy(arg.fn, the), arg.one);
        };
        /**
        * 表格绑定reload完成后事件(兼容工作流)
        */
        RxmMobileGrid.prototype.callbackLoadComplete = RxmMobileGrid.prototype.bindLoadComplete;
        RxmMobileGrid.prototype._onAppend = function (e, data) {
            this.refresh();
        };
        RxmMobileGrid.prototype.attrRefreshTip = function (arg) {
            return this._config.refreshTip = $.extend(true, this._config.refreshTip, arg);
        };
        /**
         * 属性设置 表格数据url
         * 默认为/resoft/xxx
         */
        RxmMobileGrid.prototype.attrRxmUrl = function (arg) {
            if (typeof arg != "undefined") {
                //rxmurl处理 判断地址首字符是否添加斜杠 
                if (arg.substring(0, 1) != "/") {
                    arg = "/" + arg;
                }
                this._config.data = {
                    "type": "URL",
                    "value": "",
                };
                this._config.data.value = getServer() + arg;
                //包裹器添加rxmurl属性
                $gridWrap.attr("rxmurl", arg);
            }
            else {
                arg = $gridWrap.attr("rxmurl");
            }
            return arg;
        };
        /**
         * 行数据是否省略多余字符 属性设置
         * true 省略多余字符,其他字符用三个点代替,false 换行显示所有内容,默认省略多余字符
         */
        RxmMobileGrid.prototype.attrTextEllipsis = function (arg) {
            if (typeof arg != "undefined") {
                arg = getRadioValue(arg);
                this._config.textEllipsis = arg;
            }
            else {
                if ($gridWrap.hasClass("rxm-s-grid-ellipsis")) {
                    this._config.textEllipsis = true;
                }
                else {
                    this._config.textEllipsis = false;
                }
            }
            this._config.textEllipsis == true ? $gridWrap.addClass("rxm-s-grid-ellipsis") : $gridWrap.removeClass("rxm-s-grid-ellipsis");
            return this._config.textEllipsis;
        };
        /**
         * 属性设置 表格每页数据条目数
         * 默认为30
         */
        RxmMobileGrid.prototype.attrPageSize = function (arg) {
            if (typeof arg != "undefined") {
                this._config.pageSize = arg;
                //包裹器添加pagesize属性
                $gridWrap.attr("pagesize", this._config.pageSize);
            }
            return this._config.pageSize;
        };
        /**
         * 属性设置 最大缓存页数
         * 默认为"30"
         */
        RxmMobileGrid.prototype.attrCacheMaxLen = function (arg) {
            if (typeof arg != "undefined") {
                this._config.param.cacheMaxLen = arg;
                //包裹器添加cachemaxlen属性
                $gridWrap.attr("rxmcachemaxlen", this._config.param.cacheMaxLen);
            }
            return this._config.param.cacheMaxLen;
        };
        /**
         * 属性设置 最大显示页数
         * 默认为"10"
         */
        RxmMobileGrid.prototype.attrViweMaxLen = function (arg) {
            if (typeof arg != "undefined") {
                this._config.param.viweMaxLen = arg;
                //包裹器添加viwemaxlen属性
                $gridWrap.attr("rxmviwemaxlen", this._config.param.viweMaxLen);
            }
            return this._config.param.viweMaxLen;
        };
        /**
         * 属性设置 表格下拉刷新数据提示语
         * 默认为"下拉刷新数据..."
         */
        RxmMobileGrid.prototype.attrTopTipBegin = function (arg) {
            if (typeof arg != "undefined") {
                this._config.refreshTip.topTipBegin = arg;
                //包裹器添加toptipbegin属性
                $gridWrap.attr("rxmtoptipbegin", this._config.refreshTip.topTipBegin);
            }
            return this._config.refreshTip.topTipBegin;
        };
        /**
         * 属性设置 表格下拉松开刷新提示语
         * 默认为"松开即可刷新..."
         */
        RxmMobileGrid.prototype.attrTopTipRefresh = function (arg) {
            if (typeof arg != "undefined") {
                this._config.refreshTip.topTipRefresh = arg;
                //包裹器添加toptiprefresh属性
                $gridWrap.attr("rxmtoptiprefresh", this._config.refreshTip.topTipRefresh);
            }
            return this._config.refreshTip.topTipRefresh;
        };
        /**
        * 属性设置 表格下拉加载中提示语
        * 默认为"加载中..."
        */
        RxmMobileGrid.prototype.attrTopTipLoading = function (arg) {
            if (typeof arg != "undefined") {
                this._config.refreshTip.topTipLoading = arg;
                //包裹器添加toptiploading属性
                $gridWrap.attr("toptiploading", this._config.refreshTip.topTipLoading);
            }
            return this._config.refreshTip.topTipLoading;
        };
        /**
         * 属性设置 表格下拉刷新失败提示语
         * 默认为"数据刷新失败"
         */
        RxmMobileGrid.prototype.attrTopTipError = function (arg) {
            if (typeof arg != "undefined") {
                this._config.refreshTip.topTipError = arg;
                //包裹器添加toptiperror属性
                $gridWrap.attr("rxmtoptiperror", this._config.refreshTip.topTipError);
            }
            return this._config.refreshTip.topTipError;
        };
        /**
         * 属性设置 表格上拉分页加载失败提示语
         * 默认为"数据加载失败"
         */
        RxmMobileGrid.prototype.attrBottomTipError = function (arg) {
            if (typeof arg != "undefined") {
                this._config.refreshTip.bottomTipError = arg;
                //包裹器添加bottomtiperror属性
                $gridWrap.attr("rxmbottomtiperror", this._config.refreshTip.bottomTipError);
            }
            return this._config.refreshTip.bottomTipError;
        };
        /**
         * 属性设置 上拉分页没有更多提示语
         * 默认为"没有更多了"
         */
        RxmMobileGrid.prototype.attrBottomTipEnd = function (arg) {
            if (typeof arg != "undefined") {
                this._config.refreshTip.bottomTipEnd = arg;
                //包裹器添加bottomtipend属性
                $gridWrap.attr("rxmbottomtipend", this._config.refreshTip.bottomTipEnd);
            }
            return this._config.refreshTip.bottomTipEnd;
        };
        /**
         * 属性设置 表格暂无数据提示语
         * 默认为"暂无数据！"
         */
        RxmMobileGrid.prototype.attrNodataTip = function (arg) {
            if (typeof arg != "undefined") {
                this._config.refreshTip.nodataTip = arg;
                //包裹器添加nodatatip属性
                $gridWrap.attr("rxmnodatatip", this._config.refreshTip.nodataTip);
            }
            return this._config.refreshTip.nodataTip;
        };
        /**
        * 属性设置 数据行图标区域宽度
        * 默认为"55px"
        */
        RxmMobileGrid.prototype.attrRowIconWidth = function (arg) {
            if (typeof arg != "undefined") {
                this._config.trRowParam.iconWidth = arg;
                //包裹器添加rowiconwidth属性
                $gridWrap.attr("rxmrowiconwidth", this._config.trRowParam.iconWidth);
            }
            return this._config.trRowParam.iconWidth;
        };
        /**
         * 属性设置 数据行数据字段单个高度
         * 默认为"21px"
         */
        RxmMobileGrid.prototype.attrRowParHeight = function (arg) {
            if (typeof arg != "undefined") {
                this._config.trRowParam.parHeight = arg;
                //包裹器添加rowparheight属性
                $gridWrap.attr("rxmrowparheight", this._config.trRowParam.parHeight);
            }
            return this._config.trRowParam.parHeight;
        };
        /**
         * 属性设置 数据行数据显示div距离上下边距
         * 默认为"16px"
         */
        RxmMobileGrid.prototype.attrRowDataMargin = function (arg) {
            if (typeof arg != "undefined") {
                this._config.trRowParam.dataMargin = arg;
                //包裹器添加rowdatamargin属性
                $gridWrap.attr("rxmrowdatamargin", this._config.trRowParam.dataMargin);
            }
            return this._config.trRowParam.dataMargin;
        };
        /**
         * 属性设置 数据行距离屏幕左右边距
         * 默认为"20px"
         */
        RxmMobileGrid.prototype.attrRowTrMargin = function (arg) {
            if (typeof arg != "undefined") {
                this._config.trRowParam.trMargin = arg;
                //包裹器添加rowtrmargin属性
                $gridWrap.attr("rxmrowtrmargin", this._config.trRowParam.trMargin);
            }
            return this._config.trRowParam.trMargin;
        };
        /**
         * 属性设置 左滑菜单每个选项默认宽度
         * 默认为"60px"
         */
        RxmMobileGrid.prototype.attrLeftBtnWidth = function (arg) {
            if (typeof arg != "undefined") {
                this._config.leftSlideParam.btnWidth = arg;
                //包裹器添加leftbtnwidth属性
                $gridWrap.attr("rxmleftbtnwidth", this._config.leftSlideParam.btnWidth);
            }
            return this._config.leftSlideParam.btnWidth;
        };
        /**
         * 属性设置 左滑出现菜单区域的最小距离值，小于此值则隐藏
         * 默认为"60px"
         */
        RxmMobileGrid.prototype.attrLeftViewWidth = function (arg) {
            if (typeof arg != "undefined") {
                this._config.leftSlideParam.viewWidth = arg;
                //包裹器添加leftviewwidth属性
                $gridWrap.attr("rxmleftviewwidth", this._config.leftSlideParam.viewWidth);
            }
            return this._config.leftSlideParam.viewWidth;
        };
        /**
         * 属性设置 左滑菜单滑动隐藏时间设定
         * 默认为"200ms"
         */
        RxmMobileGrid.prototype.attrLeftTrAduration = function (arg) {
            if (typeof arg != "undefined") {
                this._config.leftSlideParam.traDuration = arg;
                //包裹器添加lefttraduration属性
                $gridWrap.attr("rxmleftaduration", this._config.leftSlideParam.traDuration);
            }
            return this._config.leftSlideParam.traDuration;
        };
        RxmMobileGrid.prototype._onInsert = function (e, data) {
            this.refresh();
        };
        RxmMobileGrid.prototype._onDelete = function (e, data) {
            this.refresh();
        };
        RxmMobileGrid.prototype._onUpdate = function (e, data) {
            this.refresh();
        };
        /**
        * 响应ormRereshGridView消息
        * @param {Object} arg - 参数对象
        */
        RxmMobileGrid.prototype._onRefreshView = function (arg) {
            this.refresh(arg);
        };
        /**
        * 默认长按事件
        * @param {Event} e - jquery event对象
        * @param {Number} data - 下滑距离值
        */
        RxmMobileGrid.prototype._onPressLine = function (e, data) {
            var $tr = e.currentTarget;
            index = $tBody.find("tr").index($tr);
            var data = {
                "index": index,
                "row": _doc.getRowDataByViewIndexs(index),
                "pageInfo": _pageInfo
            };
            e.data = data;
            $(e.target).trigger(RxmMobileGrid.msgEnum.pressInLine, data);
            return false;
        };
        /**
        * 默认点击事件
        * @param {Event} e - jquery Event对象
        */
        RxmMobileGrid.prototype._onTapLine = function (e, data) {
            if (isDesktop(this._config.id) && $(e.target)[0].tagName === "INPUT") {
            }
            else {
                var $tr = e.currentTarget;
                index = $tBody.find("tr").index($tr);
                var data = {
                    "index": index,
                    "row": _doc.getRowDataByViewIndexs(index),
                    "pageInfo": _pageInfo
                };
                e.data = data;
                $(e.target).trigger(RxmMobileGrid.msgEnum.tapInLine, data);
                return false;
            }
        };
        /**
        * 默认左滑事件
        * @param {Event} e - jquery Event对象
        */
        RxmMobileGrid.prototype._onSlideLine = function (e, data) {
            var $tr = e.currentTarget;
            index = $tBody.find("tr").index($tr);
            var data = {
                "index": index,
                "row": _doc.getRowDataByViewIndexs(index),
                "pageInfo": _pageInfo
            };
            e.data = data;
            $(e.target).trigger(RxmMobileGrid.msgEnum.slideInLine, data);
            return false;
        };
        /**
        * 下滑至顶部，从开始至结束持续监听动态设置 $gridContent top值
        * @param {Event} e - jquery Event对象
        * @param {Number} data - 下滑距离值
        */
        RxmMobileGrid.prototype._onSwipeInTop = function (e, data) {
            //1.共xx页，松手获取第x页面
            //2.查看是否是第一页，如果是第一页，显示 ‘松手刷新数据’
            $topRefreshbar.empty();
            _swipeDir = "down";
            $topRefreshbar.css("height", "40px");
            this.renderTopRefreshbar();
            $topRefreshbar.css("display", "");
            //阻尼设置为0.3
            $gridContent.css("top", data * 0.3);
            if (data * 0.3 > 25) {
                var $loading = $('<img class = "rxm-top-loading-arrow" src="' + _upArrowImg + '"/>&nbsp;&nbsp;&nbsp;<span>' + this._config.refreshTip.topTipRefresh + '</span>');
                $topRefreshbar.empty().append($loading);
            }
        };
        /**
        * 上滑至底部，从开始至结束持续监听  动态设置 $gridContent top值
        * @param {Event} e - jquery Event对象
        * @param {Number} data - 滑动位置数据对象
        */
        RxmMobileGrid.prototype._onSwipeInBottom = function (e, data) {
            //1.共xx页，松手获取第x页面
            //2.查看是否是最后一页，如果是最后一页，显示 ‘已经是全部内容’
            var the = this;
            _swipeDir = "up";
            //非最后一页,继续reload数据
            if (!this._isLastPage()) {
                //显示底部刷新栏
                $bottomRefreshbar.css("display", "");
                this.reload({
                    data: { type: this._config.data.type, value: this._config.data.value },
                    totalPage: -2,
                    type: "bottom",
                    loadComplete: function (data) {
                        $gridWrap.trigger(RxmMobileGrid.msgEnum.swipeInBottomAfter);
                    }
                });
            }
            else {
                //最后一页数据,不调用reload方法,直接显示“没有更多了”
                $bottomRefreshbar.css("display", "");
                setTimeout(function () {
                    $bottomRefreshbar.empty();
                    var $loading = $('<span>' + the._config.refreshTip.bottomTipEnd + '</span>');
                    $loading.appendTo($bottomRefreshbar);
                    $gridContent.animate({ top: '0px' }, "slow", function () {
                        $gridContent.stop(true);
                        $bottomRefreshbar.empty();
                        the.renderBottomRefreshbar();
                        $bottomRefreshbar.css("display", "none");
                        $bottomRefreshbar.css("bottom", "45px");
                    });
                }, 500);
                $gridWrap.trigger(RxmMobileGrid.msgEnum.swipeInBottomAfter);
            }
        };
        /**
        * 上滑至底部后需要进行的操作
        */
        RxmMobileGrid.prototype._onSwipeInBottomAfter = function () {
            //TODO
        };
        /**
        * 下滑至顶部结束后需要进行的操作
        */
        RxmMobileGrid.prototype._onSwipeInTopEndAfter = function () {
            //TODO
        };
        /**
        * 下滑至顶部开始
        */
        RxmMobileGrid.prototype._onSwipeInTopBegin = function () {
            //TODO
        };
        /**
        * 上滑至底部开始
        */
        RxmMobileGrid.prototype._onSwipeInBottomBegin = function () {
            //TODO
        };
        /**
        * 下滑至顶部结束
        * @param {Event} e - jquery Event对象
        * @param {Number} data - 滑动位置数据对象
        */
        RxmMobileGrid.prototype._onSwipeInTopEnd = function (e, data) {
            //1.当前的cacheBegin是 1时，刷新全部数据
            //2.当前的cacheBegin 大于1时 取-1 ；
            //3.松手后，应该显示获取动作，直到ajax返回数据
            var the = this;
            var prePageFlag = this._config.param.cacheBegin == 1 ? 1 : -1;
            if (this._isFirstPage()) {
                $gridContent.animate({ top: '0px' }, "slow", function () {
                    $gridContent.stop(true);
                    $topRefreshbar.empty();
                    var $loading = $('<span class="rxm-grid-loading"/>&nbsp;&nbsp;&nbsp;<span>' + the._config.refreshTip.topTipLoading + '</span>');
                    $loading.appendTo($topRefreshbar);
                    //  $topRefreshbar.css("display","none");
                    the.reload({ totalPage: 1, loadComplete: function (data) {
                            setTimeout(function () {
                                $gridContent.stop(true);
                                $topRefreshbar.empty();
                                var $loading;
                                if (data.status === "sucsess") {
                                    $loading = $('<span>' + the._config.refreshTip.topTipSuccess + '</span>');
                                }
                                else {
                                    $loading = $('<span>' + the._config.refreshTip.topTipError + '</span>');
                                }
                                $loading.appendTo($topRefreshbar);
                                $topRefreshbar.animate({ height: '0px' }, "400");
                            }, 300);
                            $gridWrap.trigger(RxmMobileGrid.msgEnum.swipeInTopEndAfter);
                        } });
                });
            }
            else {
                $gridContent.animate({ top: '0px' }, "slow", function () {
                    $gridContent.stop(true);
                    $topRefreshbar.empty();
                    var $loading = $('<img class="rxm-top-loading-img" src="' + _loadingImg + '"/>&nbsp;&nbsp;&nbsp;<span>' + the._config.refreshTip.topTipLoading + '</span>');
                    $loading.appendTo($topRefreshbar);
                    //$topRefreshbar.css("display","none");
                    $gridContent.animate({ top: '0px' }, "slow", function () {
                        $gridContent.stop(true);
                        $topRefreshbar.empty();
                        var $loading = $('<img class="rxm-top-loading-img" src="' + _loadingImg + '"/>&nbsp;&nbsp;&nbsp;<span>' + the._config.refreshTip.topTipBegin + '</span>');
                        $loading.appendTo($topRefreshbar);
                        the.reload({ totalPage: prePageFlag });
                        $topRefreshbar.css("display", "none");
                    });
                });
                $gridWrap.trigger(RxmMobileGrid.msgEnum.swipeInTopEndAfter);
            }
            _startYMove = 0;
        };
        /**
        * 上滑至底部结束，初始化_startYMove值为0
        */
        RxmMobileGrid.prototype._onSwipeInBottomEnd = function () {
            _startYMove = 0;
        };
        /**
        * 判断表格滚动条到顶(下拉刷新)
        * @returns {Boolean} - 到顶状态值
        */
        RxmMobileGrid.prototype._isOnTop = function () {
            //滚动到的当前位置
            var scroHeight = $tableBody.scrollTop();
            //ios的scroHeight到顶判断为负值 安卓scroHeight为0
            if (scroHeight <= 0 && this._config.param.viewBegin == 0) {
                return true;
            }
            else {
                return false;
            }
        };
        /**
        * 判断表格滚动条到底(上拉分页)
        * @returns {Boolean} - 到底状态值
        */
        RxmMobileGrid.prototype._isOnBottom = function () {
            //滚动距离总长(注意不是滚动条的长度)
            var scrollHight = $tableBody[0].scrollHeight;
            //滚动到的当前位置
            var scrollTop = $tableBody.scrollTop();
            //$tableBody高度
            var tableHight = $tableBody.height();
            if ((scrollTop + tableHight >= scrollHight)) {
                return true;
            }
            else {
                return false;
            }
        };
        /**
        * 判断分页是否为最后一页数据(上拉分页)
        * @returns {Boolean} - 最后一页状态值
        */
        RxmMobileGrid.prototype._isLastPage = function () {
            //计算总页数
            _doc._pageInfo.pageCount = Math.ceil(_doc._pageInfo.dataCount / this._config.pageSize);
            //计算当然数组数据条目数
            var caheLength = Math.ceil(this._config.param.data.length / this._config.pageSize) + this._config.param.cacheBegin;
            if (_doc._pageInfo.pageCount < caheLength) {
                return true;
            }
            else {
                return false;
            }
        };
        /**
        * 判断内存中是否为内存中的首页数据(下拉刷新)
        * @returns {Boolean} - 第一页状态值
        */
        RxmMobileGrid.prototype._isFirstPage = function () {
            if (this._isOnTop() && this._config.param.cacheBegin == 1) {
                return true;
            }
            else {
                return false;
            }
        };
        /**
         * 判断是否为桌面版
         * @param {String} wrapId - 表格包裹器ID
         * @returns {Boolean} - 桌面版状态值
         */
        function isDesktop(wrapId) {
            var $gw = $("#" + wrapId);
            if ($gw.is(".rxm-grid-desktop")) {
                return true;
            }
            if ($gw.is(".rxm-grid-mobile")) {
                return false;
            }
            if ($gw.is(".rxm-grid-mobile-desktop")) {
                if ($(document.body).is(".rxm-desktop")) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        /**
        * 判断是否通过html属性配置生成表格
        * @returns {Boolean} - 状态值
        */
        RxmMobileGrid.prototype._isHtmlAttrCfg = function () {
            if ($gridWrap.find(".rxm-table-head").length != 0) {
                return true;
            }
            else {
                return false;
            }
        };
        /**
         * 重置左滑按钮区域处于隐藏状态
         * @param {Object} $obj - 左滑行对象
         */
        RxmMobileGrid.prototype._resetStatus = function ($obj) {
            $obj.css('-webkit-transform', 'translate3d(0px, 0px, 0px)');
        };
        /**
        * 设定左滑菜单过渡效果参数
        * @param {Object} $obj - 左滑行对象
        */
        RxmMobileGrid.prototype._setTransition = function ($obj) {
            var the = this;
            $obj.css({
                '-webkit-transition-property': '-webkit-transform',
                '-webkit-transition-duration': the._config.leftSlideParam.traDuration + "ms",
                '-webkit-transition-timing-function': the._config.leftSlideParam.traFunction
            });
        };
        /**
        * 重新渲染当前页序号
        */
        RxmMobileGrid.prototype._refreshIndex = function () {
            if (grid._config.index) {
                var baseIndex = (parseInt(grid._pageInfo.curPage) - 1) * parseInt(grid._config.pageSize);
                grid._$gridPanel.find(".rxm-s-grid-table .rxm-table-body tbody>tr").each(function (index, element) {
                    var i = baseIndex + index + 1;
                    $(element).children("td:first").attr("title", i).text(i);
                });
            }
        };
        /***************************************************** 桌面版表格函数 ********************************************************/
        /**
        * 渲染PC端表格行数据(可重写)
        * @param {Object} row - 行数据
        * @param {Object} $tr - 行数据
        * @param {Number} rowIndex - 行索引
        * @param {Number} baseIndex - true克隆数据，undefined，false 返回 view 数据此为默认
        * @returns {Object} $tr - 表格行对象 jquery对象
        */
        RxmMobileGrid.prototype.createRowInPc = function (row, $tr, rowIndex, baseIndex) {
            var _index = rowIndex || (function guid() {
                function s4() {
                    return Math.floor((1 + Math.random()) * 0x10000)
                        .toString(16)
                        .substring(1);
                }
                return s4() + s4() + '' + s4() + '' + s4() + '' +
                    s4() + '' + s4() + s4() + s4();
            })();
            //console.log(_index);
            $tr.data("index", _index);
            row["_index"] = _index;
            if (!!this._config.index) {
                $tr.append('<td align="center" class="index" width="35px">' + (rowIndex + baseIndex) + '</td>');
            }
            if (typeof this._config.multi != "undefined") {
                $tr.append('<td align="center" class="fix" width="24px"><input type="' + (this._config.multi ? 'checkbox' : 'radio') + '" name="rxm-s-gird-multi-' + (this._config.id) + '" ' + (row["_checked"] ? "checked" : "") + '></td>');
            }
            for (var j = 0, item, $td; item = this._config.layout[j++];) {
                tdValue = row[item.field];
                //format重写函数名称定义
                var formatFun = "format" + item.field;
                //表格config对象中layout中数据format处理
                if (item.format) {
                    tdValue = item.format({ "row": row });
                }
                //重写format函数
                if ($.isFunction(this[formatFun])) {
                    tdValue = this[formatFun](row);
                }
                tdValue = (tdValue || tdValue == 0) ? tdValue : "";
                $td = $('<td class="' + this._config.id + '-' + item.field + '"' + (item.align ? ' align="' + item.align + '"' : '') + '></td>');
                //td添加点击效果样式
                if (item.clickstyle) {
                    $td.addClass("rxm-click-style");
                }
                item.click ? function () {
                    $td.append('<a' + (item.field ? ' class="' + item.field + '"' : '') + '></a>');
                    $td.children("a").append(tdValue);
                }() : $td.append(tdValue);
                $tr.append($td);
            }
            $tr.children("td").each(function () {
                $(this).attr("title", $(this).text());
            });
            return $tr;
        };
        /**
        * 桌面端 加载视图内所有属性（表格、标题栏、工具栏、搜索栏、分页栏)
        */
        RxmMobileGrid.prototype._renderPc = function () {
            //行高
            var trHeight = 40;
            //清空表格包裹器
            $gridWrap.addClass("rxm-s-grid");
            //添加隐藏多余字符样式
            this._config.textEllipsis && $gridWrap.addClass("rxm-s-grid-ellipsis");
            //判断html文件中是否存在定制titlebar
            if ($gridWrap.find(".rxm-s-grid-titlebar").length == 0) {
                this._renderTitleBarPc();
            }
            //判断html文件中是否存在定制searchbar
            if ($gridWrap.find(".rxm-s-grid-searchbar").length == 0) {
                this._renderSearchBarPc();
            }
            //判断html文件中是否存在定制toolbar
            if ($gridWrap.find(".rxm-s-grid-toolbar").length == 0) {
                this._renderToolbarPc();
            }
            else {
                //工具栏默认按钮事件绑定
                this._setDefalToolbarEvent();
            }
            //判断html文件中是否存在定制表格
            if ($gridWrap.find(".rxm-s-grid-content").length == 0) {
                this._renderContentPc();
            }
            else {
                //行事件绑定
                this._setTableRowEvent();
                //表头全选checkbox点击事件绑定
                this._setTableHeadEvent();
            }
            //判断html文件中是否存在定制分页栏
            if ($gridWrap.find(".rxm-s-grid-pagination").length == 0) {
                this._renderPaginationPc();
            }
            else {
                //设置分页数初始值
                this._setPaginationSize();
            }
            //设置表格高度 如果设置表格高速则直接使用设置高度 
            /**
             * 设置表格rxm-table-body高度
             * 1、如果直接配置高度则直接使用设置高度
             * 2、如果没有设置表格高度，但是设置分页，表格高度则是分页行数的高度
             * 3、如果没有设置高度、也没有分页，则表格根据数据条目数据自动填充
             */
            if (!!this._config.height) {
                _wrapHeight = this._config.height;
                $gridWrap.find(".rxm-table-body").css("height", this._config.height);
            }
            else if (!this._config.height && this._config.pagination) {
                _wrapHeight = this._config.pageSize * trHeight;
                $gridWrap.find(".rxm-table-body").css("height", _wrapHeight);
            }
            else {
                $gridWrap.find(".rxm-table-body").css("height", "auto");
            }
            //绑定刷新函数  doc中_refresh()函数激发
            $gridWrap.on(RxmMobileGrid.msgEnum.ormRereshGridView, $.proxy(this._onRefreshView, this));
        };
        /**
         * 桌面端 渲染表格
         */
        RxmMobileGrid.prototype._renderTablePc = function () {
            //清空表格中行数据
            var $table = $gridWrap.find(".rxm-s-grid-table").empty();
            $table.append('<div class="rxm-table-head"><table onselectstart="return false;" class="rxm-table rxm-table-hover"><thead></thead></table><div class="dragTrigger"></div></div>');
            //var style = 'style="overflow-x:hidden;overflow-y:auto;' + (this._config.height && "height:" + this._config.height) + '"';
            var $tableBody = $('<div class="rxm-table-body"><table class="table rxm-table-hover"><thead></thead><tbody></tbody></table></div>');
            $table.append($tableBody);
            var _tBodyHeight = _calTableBodyHeight();
            $gridWrap.find(".rxm-table-body").css("height", _tBodyHeight);
            $gridWrap.find(".rxm-table-body").css("overflow-x", "hidden");
            $gridWrap.find(".rxm-table-body").css("overflow-y", "auto");
            this._setTableRowEvent();
            this._renderTableHeadPc();
        };
        /**
         * 桌面端 渲染表格头部
         */
        RxmMobileGrid.prototype._renderTableHeadPc = function () {
            var $tableHead = $gridWrap.find(".rxm-s-grid-table table thead").empty();
            var html = "";
            //渲染索引表头
            if (!!this._config.index) {
                html += '<th align="center" class="index noDrag" width="35px"></th>';
            }
            //渲染checkbox表头
            if (typeof this._config.multi != "undefined") {
                html += '<th align="center" class="fix noDrag" width="24px">' + (this._config.multi ? '<input type="checkbox">' : '') + '</th>';
            }
            var layout = this._config.layout;
            for (var i = 0, item; item = layout[i++];) {
                var width = (item.width ? "width:" + item.width + ";" : "width:" + (100 / layout.length + '%') + ";");
                var align = (item.align ? "text-align:" + item.align + ";" : "");
                var style = 'style="' + align + ' ' + width + '"';
                html += '<th ' + style + ' class="' + item.field + '" title="' + item.name + '">' + item.name + (item.sort ? '<i class="fa fa-sort"></i>' : '') + '</th>';
            }
            $tableHead.append('<tr>' + html + '</tr>');
            $gridWrap.find(".rxm-s-grid-table .rxm-table-body thead th").removeAttr("title").empty();
            //表头全选checkbox点击事件绑定
            this._setTableHeadEvent();
        };
        /**
         * 桌面端 表格行事件绑定
         */
        RxmMobileGrid.prototype._setTableRowEvent = function () {
            //点击事件绑定  这个需要认真斟酌
            $tBody = $gridWrap.find(".rxm-s-grid-table .rxm-table-body tbody");
            $tBody.tap("tr", $.proxy(this._onTapLine, this));
            var clkFun;
            var aFun;
            var aFunClass;
            for (var i = 0; i < this._config.rowevent.length; i++) {
                if (!!this._config.rowevent[i].click) {
                    clkFun = this._config.rowevent[i].click;
                }
            }
            for (var i = 0; i < this._config.layout.length; i++) {
                if (!!this._config.layout[i].click) {
                    aFun = this._config.layout[i].click;
                    aFunClass = "." + this._config.layout[i].field;
                }
            }
            //绑定数据列表配置的所有事件
            if (!!clkFun) {
                this.bindTapLineElement({ fn: clkFun }, this);
            }
            if (!!aFun) {
                this.bindTapLineElement({ selector: aFunClass, fn: aFun }, this);
            }
        };
        /**
         * 桌面端 表头全选checkbox点击事件绑定
         */
        RxmMobileGrid.prototype._setTableHeadEvent = function () {
            var $tHead = $gridWrap.find(".rxm-s-grid-table .rxm-table-head thead"), _$tBody = $gridWrap.find(".rxm-s-grid-table .rxm-table-body tbody");
            $tHead.tap("th", function (event) {
                var nodeName = event.target.nodeName;
                if (nodeName == "INPUT") {
                    var checked = $(event.target).is(":checked");
                    _$tBody.find("input").each(function () {
                        if (checked) {
                            this.checked = true;
                        }
                        else {
                            $(this).removeAttr("checked");
                        }
                    });
                }
            });
        };
        /**
         * 渲染表格标题栏
         */
        RxmMobileGrid.prototype._renderTitleBarPc = function () {
            $gridWrap.append($('<div class="rxm-s-grid-titlebar"></div>'));
            $gridWrap.find(".rxm-s-grid-titlebar").css("display", "none");
            if (this._config.title) {
                $titlebar.css("display", "");
                $titlebar.empty().append(this._config.title);
            }
        };
        /**
         * 渲染表格搜索栏
         */
        RxmMobileGrid.prototype._renderSearchBarPc = function () {
            $gridWrap.append($('<div class="rxm-s-grid-searchbar"></div>'));
            $gridWrap.find(".rxm-s-grid-searchbar").css("display", "none");
            if (!!this._config.searchbar) {
                $searchbar.css("display", "");
            }
        };
        /**
         * 桌面端 渲染表格工具栏
         */
        RxmMobileGrid.prototype._renderToolbarPc = function () {
            $gridWrap.append($('<div class="rxm-s-grid-toolbar"></div>'));
            $toolbar = $gridWrap.find(".rxm-s-grid-toolbar");
            $gridWrap.find(".rxm-s-grid-toolbar").css("display", "none");
            //通过config对象生成工具栏
            if (!!this._config.toolbar && this._config.toolbar.length > 0) {
                $toolbar.css("display", "");
                var $ul = $("<ul style='width:100%'></ul>");
                for (var i = 0, length = this._config.toolbar.length; i < length; i++) {
                    var item = this._config.toolbar[i];
                    var $li = $('<li></li>');
                    $li.tap(this, item.callback);
                    $li.attr("style", item.style);
                    var $a = $('<a></a>');
                    var $i = $('<i></i>');
                    $i.attr("class", item.icon);
                    $i.appendTo($a);
                    $a.append(item.name);
                    $a.appendTo($li);
                    $li.appendTo($ul);
                }
                $toolbar.empty().append($ul);
                //表格工具栏默认按钮事件绑定
                this._setDefalToolbarEvent();
            }
        };
        /**
         * 桌面端 表格工具栏默认按钮事件绑定
         */
        RxmMobileGrid.prototype._setDefalToolbarEvent = function () {
            //获取所有按钮，判断是否有默认值定义
            var liBtn = $gridWrap.find(".rxm-s-grid-toolbar ul li");
            //包裹器html中默认定义三个按钮  删除、全选、取消
            if (liBtn.length > 0) {
                for (var i = 0; i < liBtn.length; i++) {
                    if ($(liBtn[i]).is(".rxm-default-delete")) {
                        $(liBtn[i]).tap($.proxy(this.bindDeleteBtn, this));
                    }
                    if ($(liBtn[i]).is(".rxm-default-all-select")) {
                        $(liBtn[i]).tap($.proxy(this.bindSelectAllBtn, this));
                    }
                    if ($(liBtn[i]).is(".rxm-default-cancel")) {
                        $(liBtn[i]).tap($.proxy(this.bindCancelBtn, this));
                    }
                }
            }
        };
        /**
         * 桌面端 渲染表格数据包裹器
         */
        RxmMobileGrid.prototype._renderContentPc = function () {
            $gridWrap.append($('<div class="rxm-s-grid-content"><div class="rxm-s-grid-table"></div></div>'));
            this._renderTablePc();
        };
        /**
        * 桌面端 渲染表格分页区域
        */
        RxmMobileGrid.prototype._renderPaginationPc = function () {
            $gridWrap.append($('<div class="rxm-s-grid-pagination"></div>'));
            $pagination = $gridWrap.find(".rxm-s-grid-pagination");
            $pagination.css("display", "none");
            if (!this._config.pagination) {
                $pagination.empty().hide();
            }
            else {
                $pagination.empty().show();
                //render pagination
                $pagination.append($('<a title="第一页" class="GoToFirst"><i class="glyphicon glyphicon-step-backward"></i></a>' +
                    '<a title="上一页" class="GoToPrev"><i class="glyphicon glyphicon-chevron-left"></i></a>' +
                    '<span class="rxm-cur-page"><input type="text" value=""/></span>' +
                    '<a title="下一页" class="GoToNext"><i class="glyphicon glyphicon-chevron-right"></i></a>' +
                    '<a title="最后一页" class="GoToEnd"><i class="glyphicon glyphicon-step-forward"></i></a>'));
                $pagination.append($('<a title="刷新" class="refresh"><i class="glyphicon glyphicon-refresh"></i></a>'));
                $pagination.append($('<span class="rxm-data-count">共<i class="rxm-num"></i>条</span>'));
                var $select = $('<select></select>');
                var pageList = [5, 10, 15, 20, 50, 100];
                for (var i = 0; i < pageList.length; i++) {
                    $select.append('<option value="' + pageList[i] + '">' + pageList[i] + '</option>');
                }
                $pagination.append($('<span class="rxm-page-size">每页' + $select.clone().wrap('<div/>').parent().html() + '条</span>'));
                //设置分页数初始值
                this._setPaginationSize();
            }
        };
        /**
         * 桌面端 表格分页区域设置初始分页数
         */
        RxmMobileGrid.prototype._setPaginationSize = function () {
            $pagination = $gridWrap.find(".rxm-s-grid-pagination");
            $pagination.find(".rxm-page-size select").val(this._config.pageSize);
        };
        /**
         * 桌面端 表格分页区域数据初始化
         */
        RxmMobileGrid.prototype._setPaginationDataEvent = function () {
            var the = this;
            //计算总页数
            _doc._pageInfo.pageCount = Math.ceil(_doc._pageInfo.dataCount / this._config.pageSize);
            //当前页码input框赋值
            $pagination.find(".rxm-cur-page input").val(_pageInfo.curPage);
            //数据总数量
            $pagination.find(".rxm-data-count .rxm-num").text(_pageInfo.dataCount);
            //设置分页 上一页、下一页图标可点击状态  
            this._setPaginationStatus();
            if (!$pagination.data("bindEvent")) {
                $pagination.tap("a", function () {
                    if ($(this).is(".disable")) {
                        return false;
                    }
                    var className = this.className.split()[0];
                    var type = className.substring(4);
                    if (className.indexOf("GoTo") > -1) {
                        curPage = _pageInfo.curPage;
                        pageCount = _pageInfo.pageCount;
                        switch (type) {
                            case 'First':
                                _pageInfo.curPage = 1;
                                break;
                            case 'End':
                                _pageInfo.curPage = pageCount;
                                break;
                            case 'Prev':
                                if (curPage <= 1) {
                                    return false;
                                }
                                _pageInfo.curPage = curPage - 1;
                                break;
                            case 'Next':
                                if (curPage >= pageCount) {
                                    return false;
                                }
                                _pageInfo.curPage = curPage + 1;
                                break;
                        }
                    }
                    else if (className != "refresh" && className != "rxm-cur-page") {
                        _pageInfo.curPage = $(this).text() * 1;
                    }
                    else if (className == "refresh") {
                    }
                    if (type == "Prev") {
                        the.reload({
                            totalPage: -1
                        });
                    }
                    else if (type == "Next") {
                        the.reload({
                            totalPage: -2
                        });
                    }
                    else {
                        the.reload({
                            totalPage: _pageInfo.curPage
                        });
                    }
                }).on("keydown", "input", function (e) {
                    if (e.which != 13) {
                        return true;
                    }
                    var curPage = Math.min($(this).val() * 1, _pageInfo.pageCount);
                    _pageInfo.curPage = curPage > 0 ? curPage : 1;
                    //the.refresh();
                    the.reload({
                        totalPage: _pageInfo.curPage
                    });
                }).on("tap", "input", function () {
                    //$(this).select();
                }).on("blur", "input", function () {
                    //$(this).val(_pageInfo.curPage);
                    var curPage = Math.min($(this).val() * 1, _pageInfo.pageCount);
                    _pageInfo.curPage = curPage > 0 ? curPage : 1;
                    //the.refresh();
                    the.reload({
                        totalPage: _pageInfo.curPage
                    });
                }).on("change", "select", function () {
                    the._config.pageSize = $(this).val() * 1;
                    _pageInfo.curPage = 1;
                    //the.refresh();
                    the.reload({
                        totalPage: _pageInfo.curPage
                    });
                });
                $pagination.data("bindEvent", true);
            }
        };
        /**
         * 桌面端 表格分页区域数据初始化
         */
        RxmMobileGrid.prototype._setPaginationStatus = function () {
            $pagination.children("a.disable").removeClass("disable");
            if (_pageInfo.dataCount <= this._config.pageSize) {
                $pagination.children("a").not(".refresh").addClass("disable");
            }
            if (_pageInfo.curPage == 1) {
                $pagination.children("a.GoToFirst,a.GoToPrev").addClass("disable");
            }
            else if (_pageInfo.curPage == _pageInfo.pageCount) {
                $pagination.children("a.GoToEnd,a.GoToNext").addClass("disable");
            }
        };
        thisObj = new RxmMobileGrid(cfg);
        return thisObj;
    };
    if (!$.fn.RxmMobileGrid) {
        ClsFactory.clsDefine = clsdef;
    }
    return ClsFactory;
});

define('RxmFormUploader', ['RxmFileUploader'], function (Uploader) {
    var ClsFactory = function (config) {
        var $uploadWrap = $("#" + config.id);
        var fileUploader;
        var curFile;
        //获取初始化参数
        var _fileSource = 'startPhoto';
        var _compress = typeof $uploadWrap.attr("rxmcompress") != 'undefined' ?
            ($uploadWrap.attr("rxmcompress") === "false" ? false : true) : false;
        var _chunked = typeof $uploadWrap.attr("rxmchunked") != 'undefined' ?
            ($uploadWrap.attr("rxmchunked") === "false" ? false : true) : true;
        var _chunkSize = typeof $uploadWrap.attr("rxmchunkSize") != 'undefined' ? $uploadWrap.attr("rxmchunkSize") : 1024 * 1024;
        var _chunkRetry = typeof $uploadWrap.attr("rxmchunkRetry") != 'undefined' ? $uploadWrap.attr("rxmchunkRetry") : 2;
        var _fileNumLimit = typeof $uploadWrap.attr("rxmfileNumLimit") != 'undefined' ? $uploadWrap.attr("rxmfileNumLimit") : 1;
        var _fileSingleSizeLimit = typeof $uploadWrap.attr("rxmfileSingleSizeLimit") != 'undefined' ? $uploadWrap.attr("rxmfileSingleSizeLimit") : 100 * 1024 * 1024;
        var _auto = typeof $uploadWrap.attr("rxmauto") != 'undefined' ?
            ($uploadWrap.attr("rxmauto") === "false" ? false : true) : true;
        var _title = typeof $uploadWrap.attr("rxmtitle") != 'undefined' ? $uploadWrap.attr("rxmtitle") : "";
        var _extensions = typeof $uploadWrap.attr("rxmextensions") != 'undefined' ? $uploadWrap.attr("rxmextensions") : "*";
        var _mimeTypes = typeof $uploadWrap.attr("rxmmimeTypes") != 'undefined' ? $uploadWrap.attr("rxmmimeTypes") : "";
        var _url = $uploadWrap.attr("rxmurl");
        // 文件被添加到 fileUploader 中的回叫函数 
        var onFileAdded = function (file, who) {
            ///<summary>添加单个文件事件回叫函数</summary>
            ///<param name="file" type="File">被添加的文件</param>
            ///<param name="who" type="String">who is it</param>
            var appName = $uploadWrap.find('input').val();
            var fileIds = $uploadWrap.find('input').attr("rxmfileid");
            var fileName = !!file.fileRemarks ? file.fileRemarks : file.fileName + "." + file.fileExt;
            if (appName == null || appName == "") {
                $uploadWrap.find('input').val(fileName);
                $uploadWrap.find('input').attr("rxmfileid", !!file.fileId ? file.fileId : file.id);
            }
            else {
                $uploadWrap.find('input').val(appName + ',' + fileName);
                $uploadWrap.find('input').attr("rxmfileid", fileIds + ',' + !!file.fileId ? file.fileId : file.id);
            }
            config.onChange($uploadWrap.find('input').attr("rxmfileid"));
            curFile = file;
        };
        //文件上传进度回叫事件
        var onUploadProgress = function (file, percentage, total) {
            ///<summary>上传过程中触发，携带上传进度。</summary>
            ///<param name="file" type="File"">File对象</param>
            ///<param name="percentage" type="Number"">进度百分比</param>
            //this.updateTotalProgress();
            // $uploadWrap.find(".rxm-upload-progress").show();
            // var num = (percentage * 1).toFixed(2);
            // $uploadWrap.find('div[class="rxm-upload-progress-bar"]').css('width', percentage * 1 + '%').html(num + '%');
            // if (percentage == 100) {
            //     $uploadWrap.find(".rxm-upload-progress").delay(1000).fadeOut();
            // }
            $uploadWrap.find(".circleProgress_wrapper").show();
            var num = (percentage * 1).toFixed(0);
            $uploadWrap.find(".circleProgress_wrapper").find("span").text(num);
            if (percentage == 100) {
                $uploadWrap.find(".circleProgress_wrapper").delay(1000).fadeOut();
            }
        };
        //文件在上传队列中删除响应事件
        var onFileDequeued = function (file) {
            ///<summary>移除文件</summary>
            ///<param name="file"  type="File"> 文件</param>
            var fileName = !!file.fileRemarks ? file.fileRemarks : file.fileName + "." + file.fileExt;
            var appName = $uploadWrap.find('input').val();
            var fileIds = $uploadWrap.find('input').attr("rxmfileid");
            var fileId = !!file.fileId ? file.fileId : file.id;
            if (appName.indexOf(',' + fileName) > -1) {
                appName = appName.replace(',' + fileName, '');
                fileIds = fileIds.replace(',' + fileId, '');
            }
            else if (appName.indexOf(fileName) > -1) {
                appName = appName.replace(fileName, '');
                fileIds = fileIds.replace(fileId, '');
            }
            $uploadWrap.find('input').val(appName);
            $uploadWrap.find('input').attr('rxmfileid', fileIds);
            // $("#appName").attr('value',"");
            config.onChange($uploadWrap.find('input').attr("rxmfileid"));
        };
        //文件上传完成
        var onAfterAllUploadSuccess = function (file) {
            var fileArray = fileUploader.getChangedFiles();
            var fileId = '';
            for (var i = 0; i < fileArray.length; i++) {
                if (fileId == '') {
                    fileId = fileArray[i].id;
                }
                else {
                    fileId = fileId + "," + fileArray[i].id;
                }
            }
            $.ajax({
                url: getServer() + _url,
                data: { fileId: fileId },
                success: function () {
                    fileUploader.submitSuccess();
                }
            });
        };
        //打开文件选择框按钮回叫事件
        var onAddBtnClk = function () {
            ///
            fileUploader.OpenFileDlg({
                //文件路径
                filePath: _fileSource,
                //替换名称 可选（当想修改文件路径中的名字时使用）
                /* realName: "视频1",*/
                multiOption: false
            });
        };
        //文件删除按钮
        var onDelBtnClk = function () {
            if (fileUploader.dataArr._data.length > 0) {
                var flag = false;
                for (var i = 0; i < fileUploader.dataArr._data.length; i++) {
                    if (curFile.id == fileUploader.dataArr._data[i].id) {
                        flag = true;
                    }
                }
                if (!flag) {
                    curFile = fileUploader.dataArr._data[fileUploader.dataArr._data.length - 1];
                }
                fileUploader.delFile(curFile);
            }
        };
        var RxmFormUploader = function () {
            fileUploader = new Uploader({
                accept: {
                    title: _title,
                    //配置上传文件的类型   默认所有类型
                    extensions: _extensions,
                    // mimeTypes: 'application/vnd.android.package-archive'
                    mimeTypes: _mimeTypes
                },
                //pick: { id: this.btnFileChoice, innerHTML: "<h2>打开</h2>", multiple: false },
                compress: _compress,
                chunked: _chunked,
                chunkSize: _chunkSize,
                chunkRetry: _chunkRetry,
                fileNumLimit: _fileNumLimit,
                fileSingleSizeLimit: _fileSingleSizeLimit,
                auto: _auto,
                server: Uploader.urlUpload(),
                disableGlobalDnd: true,
            });
            var $btnFileChoice = $uploadWrap.find('input');
            var $btnDelSelect = $uploadWrap.find('i.fa-trash-o'); //$("#delBtn");
            //文件被添加进来
            fileUploader.bindFileAdded(onFileAdded);
            //文件传递的进度
            fileUploader.bindFileUpProgress(onUploadProgress);
            //文件 被删除
            fileUploader.bindFileDeleted(onFileDequeued);
            //文件上传结束
            //fileUploader.bindFileUpSuccess(onAfterUploadSuccess);
            //全部文件上传结束
            fileUploader.bindFileUpAllCompleted(onAfterAllUploadSuccess);
            //   this.fileUploader.on("uploadError", this.onUploadError, this);
            //   this.fileUploader.on("uploadFinished", this.onUploadFinished, this);
            $btnFileChoice.tap(onAddBtnClk);
            $btnDelSelect.tap(onDelBtnClk);
            var $uploadBtn = $uploadWrap.find('i.fa-cloud-upload'); //$("#uploadBtn");
            $uploadBtn.tap(function () {
                if (fileUploader.getChangedFiles().length == 0) {
                    alert("请选择待上传文件");
                    return;
                }
                fileUploader.beginUpload();
            });
        };
        RxmFormUploader.prototype.addFile = function (file) {
            // var f = new FileItem();
            fileUploader.addFile(file);
        };
        //     /**
        //      * 设置上传title
        //      * @param {String} arg 
        //      * @returns {String}  - 上传title
        //      */
        //     RxmFormUploader.prototype.attrTitle =function(arg){
        //         if (typeof arg != "undefined") {
        //             _title = arg;
        //             $uploadWrap.attr("rxmtitle", _title)
        //         }
        //         return _title
        //     }
        //     /**设置上传文件类型限制
        //      * @param {String} arg 
        //      * @returns {String}  - 上传文件类型
        //      */
        //     RxmFormUploader.prototype.attrExtensions =function(arg){
        //         if (typeof arg != "undefined") {
        //             _extensions = arg;
        //             $uploadWrap.attr("rxmextensions", _extensions)
        //         }
        //         return _extensions
        //     }
        //     RxmFormUploader.prototype.attrMimeTypes =function(arg){
        //         if (typeof arg != "undefined") {
        //             _mimeTypes = arg;
        //             $uploadWrap.attr("rxmmimeTypes", _mimeTypes)
        //         }
        //         return _mimeTypes
        //     }
        //     /**
        //      * 设置是否压缩
        //      * @param {Boolean} arg - 是否压缩
        //      * @returns {Boolean}  - 压缩状态
        //      */
        //     RxmFormUploader.prototype.attrCompress = function (arg) {
        //         if (typeof arg != "undefined") {
        //             _compress = getRadioValue(arg);
        //             $uploadWrap.attr("rxmcompress", _compress)
        //         }
        //         return _compress
        //     }
        //     /**
        //      * 设置是否分片上传
        //      * @param {Boolean} arg - 是否分片
        //      * @returns {Boolean}  - 分片状态
        //      */
        //     RxmFormUploader.prototype.attrChunked = function (arg) {
        //         if (typeof arg != "undefined") {
        //             _chunked = getRadioValue(arg);
        //             $uploadWrap.attr("rxmchunked", _chunked)
        //         }
        //         return _chunked
        //     }
        //     /**
        //      * 设置分片大小
        //      * @param {Number} arg - 分片大小
        //      * @returns {Number}  - 分片大小
        //      */
        //     RxmFormUploader.prototype.attrChunkSize = function (arg) {
        //         if (typeof arg != "undefined") {
        //             _chunkSize = arg;
        //             $uploadWrap.attr("rxmchunkSize", _chunkSize)
        //         }
        //         return _chunkSize
        //     }
        //     /**
        //      * 分片重传次数
        //      * @param {Number} arg - 分片重传次数
        //      * @returns {Number}  - 分片重传次数
        //      */
        //     RxmFormUploader.prototype.attrChunkRetry = function (arg) {
        //         if (typeof arg != "undefined") {
        //             _chunkRetry = arg;
        //             $uploadWrap.attr("rxmchunkRetry", _chunkRetry)
        //         }
        //         return _chunkRetry
        //     }
        //     /**
        //      * 文件数量限制
        //      * @param {Number} arg - 文件数量限制
        //      * @returns {Number}  - 文件数量限制
        //      */
        //     RxmFormUploader.prototype.attrFileNumLimit = function (arg) {
        //         if (typeof arg != "undefined") {
        //             _fileNumLimit = arg;
        //             $uploadWrap.attr("rxmfileNumLimit", _fileNumLimit)
        //         }
        //         return _fileNumLimit
        //     }
        //     /**
        //      * 单文件大小限制
        //      * @param {Number} arg - 单文件大小限制
        //      * @returns {Number}  - 单文件大小限制
        //      */
        //     RxmFormUploader.prototype.attrFileSingleSizeLimit = function (arg) {
        //         if (typeof arg != "undefined") {
        //             _fileSingleSizeLimit = arg;
        //             $uploadWrap.attr("rxmfileSingleSizeLimit", _fileSingleSizeLimit)
        //         }
        //         return  _fileSingleSizeLimit
        //     }
        //     /**
        //     * 自动上传
        //     * @param {Boolean} arg - 自动上传
        //     * @returns {Boolean}  - 自动上传
        //     */
        //     RxmFormUploader.prototype.attrAuto = function (arg) {
        //         if (typeof arg != "undefined") {
        //             _auto = getRadioValue(arg);
        //             $uploadWrap.attr("rxmauto", _auto)
        //         }
        //         return _auto
        //     }
        //      /**
        //     * 上传文件来源
        //     * @param {String} arg - 文件来源
        //     * @returns {String}  - 文件来源
        //     */
        //    RxmFormUploader.prototype.attrFileSource = function (arg) {
        //     if (typeof arg != "undefined") {
        //         _fileSource = arg
        //         $uploadWrap.attr("rxmfilesource", _fileSource)
        //     }
        //     return _fileSource
        // }
        return new RxmFormUploader(config);
    };
    return ClsFactory;
});

//控件名称：clsInputOrmAudio 
//控件说明：音频文件上传
//创建时间：2017-08-09 15:08:54
//创建人：王勇
define("RxmInputOrmAudio", [], function () {
    var cls = function (config) {
        this._cls(config);
    };
    cls.prototype._cls = function (config) {
        var dcfg = {};
        var ucfg = cssOrms.default.clsInputOrmAudio || {};
        ucfg = ucfg.cfg;
        this._cfg = $.extend(true, {}, dcfg, ucfg, config);
        if (typeof this._cfg.id != "undefined") {
            this._cfg.$cls = $("#" + this._cfg.id);
        }
    };
    ///<summary>clsInputOrmAudio控件全局化声明</summary>
    cssOrm.declare("clsInputOrmAudio", cls);
    return cls;
});

define("RxmInputOrmFile", [], function () {
    var cls = function (config) {
        /// <field   name="_cfg"  value="cls._cfgDefault">单文件录入</field>
        this._cls(config);
    };
    cls.rxmtype = 'rxmdk-input-orm-file';
    // 定义cfg 默认
    cls._cfgDefault = {
        accept: '*'
    };
    cls.prototype._cls = function (config) {
        /// <param  name="config"  value="cls._cfgDefault"></param>
        var dcfg = cls._cfgDefault;
        var ucfg = cssOrm.default.clsInputOrmFile || {};
        ucfg = ucfg.cfg;
        this._cfg = $.extend(true, {}, dcfg, ucfg, config);
        if (typeof this._cfg.id !== 'undefined') {
            this._cfg.$cls = $('#' + this._cfg.id);
        }
        ;
    };
    cls.prototype.attrAccept = function (value) {
        /// <summary>设置可打开的文件扩展名</summary>
        /// <param  name="value" value="event"></param>
        (!!value) && (value !== '') && ((this._cfg.$cls.attr('accept', value)));
        (!!value) && (value === '') && ((this._cfg.$cls.removeAttr('accept')));
        return this._cfg.$cls.attr('accept');
    };
    cls.prototype.attrId = function (value) {
        /// <summary>id</summary>
        /// <param  name="value" value="event"></param>
        (!!value) && (value !== '') && ((this._cfg.$cls.attr('id', value)));
        (!!value) && (value === '') && ((this._cfg.$cls.removeAttr('id')));
        return this._cfg.$cls.attr('id');
    };
    cls.prototype.attrAccept = function (value) {
        /// <summary>设置可打开的文件扩展名</summary>
        /// <param  name="value" value="event"></param>
        (!!value) && (value !== '') && ((this._cfg.$cls.attr('ormaccept', value)));
        (!!value) && (value == '') && ((this._cfg.$cls.removeAttr('ormaccept')));
        var r;
        !(r = this._cfg.$cls.attr('ormaccept')) && (r = this._cfg.accept);
        return r;
    };
    // clsInputOrmFile控件事件枚举对象
    cls.msgEnum = {
        /// <summary>上传进度</summary>
        uploadProgress: 'uploadProgress',
        /// <summary>删除上传文件</summary>
        fileDequeued: 'fileDequeued',
        /// <summary>添加文件</summary>
        fileQueued: 'fileQueued',
        /// <summary>文件上传结束</summary>
        uploadFinished: 'uploadFinished',
        /// <summary>单文件上传开始</summary>
        uploadStart: 'uploadStart',
        /// <summary>文件上传成功</summary>
        uploadSuccess: 'uploadSuccess'
    };
    cls.prototype.bindUploadProgress = function (arg, scope) {
        /// <summary>上传进度事件绑定</summary>
        /// <param  name="arg"  type=" vo.orm.cssOrm.on"></param>
        if (typeof arg === 'boolean' || typeof arg === 'undefined') {
            arg = {
                fn: this._onUploadProgress
            };
            scope = this;
        }
        var the = this;
        if ($.isExist(scope)) {
            the = scope;
        }
        this._cfg.$cls.on(cls.msgEnum.UploadProgress, arg.data, $.proxy(arg.fn, the), arg.one);
    };
    cls.prototype._onUploadProgress = function (e, data) {
        /// <summary>上传进度激发函数</summary>
        /// <param  name="e"  value="event"></param>
        /// <param  name="data"   type="Object"></param>
        /// TODO
    };
    cls.prototype.bindFileDequeued = function (arg, scope) {
        /// <summary>删除上传文件事件绑定</summary>
        /// <param  name="arg"  type="vo.orm.bindMsg.arg"></param>
        if (typeof arg === 'boolean' || typeof arg === 'undefined') {
            arg = {
                fn: this._onFileDequeued
            };
            scope = this;
        }
        var the = this;
        if ($.isExist(scope)) {
            the = scope;
        }
        this._cfg.$cls.on(cls.msgEnum.FileDequeued, arg.data, $.proxy(arg.fn, the), arg.one);
    };
    cls.prototype._onFileDequeued = function (e, data) {
        /// <summary>删除上传文件激发函数</summary>
        /// <param  name="e"  value="event"></param>
        /// <param  name="data"   type="Object"></param>
        /// TODO
    };
    cls.prototype.bindFileQueued = function (arg, scope) {
        /// <summary>添加文件事件绑定</summary>
        /// <param  name="arg"  type="vo.orm.bindMsg.arg"></param>
        if (typeof arg === 'boolean' || typeof arg === 'undefined') {
            arg = {
                fn: this._onFileQueued
            };
            scope = this;
        }
        var the = this;
        if ($.isExist(scope)) {
            the = scope;
        }
        this._cfg.$cls.on(cls.msgEnum.FileQueued, arg.data, $.proxy(arg.fn, the), arg.one);
    };
    cls.prototype._onFileQueued = function (e, data) {
        /// <summary>添加文件激发函数</summary>
        /// <param  name="e"  value="event"></param>
        /// <param  name="data"   type="Object"></param>
        /// TODO
    };
    cls.prototype.bindUploadFinished = function (arg, scope) {
        /// <summary>文件上传结束事件绑定</summary>
        /// <param  name="arg"  type="vo.orm.bindMsg.arg"></param>
        if (typeof arg === 'boolean' || typeof arg === 'undefined') {
            arg = {
                fn: this._onUploadFinished
            };
            scope = this;
        }
        var the = this;
        if ($.isExist(scope)) {
            the = scope;
        }
        this._cfg.$cls.on(cls.msgEnum.UploadFinished, arg.data, $.proxy(arg.fn, the), arg.one);
    };
    cls.prototype._onUploadFinished = function (e, data) {
        /// <summary>文件上传结束激发函数</summary>
        /// <param  name="e"  value="event"></param>
        /// <param  name="data"   type="Object"></param>
        /// TODO
    };
    cls.prototype.bindUploadStart = function (arg, scope) {
        /// <summary>单文件上传开始事件绑定</summary>
        /// <param  name="arg"  type="vo.orm.bindMsg.arg"></param>
        if (typeof arg === 'boolean' || typeof arg === 'undefined') {
            arg = {
                fn: this._onUploadStart
            };
            scope = this;
        }
        var the = this;
        if ($.isExist(scope)) {
            the = scope;
        }
        this._cfg.$cls.on(cls.msgEnum.UploadStart, arg.data, $.proxy(arg.fn, the), arg.one);
    };
    cls.prototype._onUploadStart = function (e, data) {
        /// <summary>单文件上传开始激发函数</summary>
        /// <param  name="e"  value="event"></param>
        /// <param  name="data"   type="Object"></param>
        /// TODO
    };
    cls.prototype.bindUploadSuccess = function (arg, scope) {
        /// <summary>文件上传成功事件绑定</summary>
        /// <param  name="arg"  type="vo.orm.bindMsg.arg"></param>
        if (typeof arg === 'boolean' || typeof arg === 'undefined') {
            arg = {
                fn: this._onUploadSuccess
            };
            scope = this;
        }
        var the = this;
        if ($.isExist(scope)) {
            the = scope;
        }
        this._cfg.$cls.on(cls.msgEnum.UploadSuccess, arg.data, $.proxy(arg.fn, the), arg.one);
    };
    cls.prototype._onUploadSuccess = function (e, data) {
        /// <summary>文件上传成功激发函数</summary>
        /// <param  name="e"  value="event"></param>
        /// <param  name="data"   type="Object"></param>
        /// TODO
    };
    cls.prototype.init = function () {
    };
    return cls;
});

// 控件名称：clsInputOrmFiles
// 控件说明：多文件上传
// 创建时间：2017-08-15 16:56:31
// 创建人：韩春晓
define("RxmInputOrmFiles", [], function () {
    var cls = function (config) {
        /// <field   name="_cfg"  value="cls._cfgDefault">多文件上传</field>
        this._cls(config);
    };
    // 定义cfg 默认
    cls._cfgDefault = {};
    cls.prototype._cls = function (config) {
        /// <param  name="config"  value="cls._cfgDefault"></param>
        var dcfg = cls._cfgDefault;
        var ucfg = cssOrm.default.clsInputOrmFiles || {};
        ucfg = ucfg.cfg;
        this._cfg = $.extend(true, {}, dcfg, ucfg, config);
        if (typeof this._cfg.id !== 'undefined') {
            this._cfg.$cls = $('#' + this._cfg.id);
        }
    };
    // clsInputOrmFiles控件事件枚举对象
    cls.msgEnum = {
        /// <summary>文件上传成功</summary>
        uploadSuccess: 'uploadSuccess',
        /// <summary>删除上传文件</summary>
        fileDequeued: 'fileDequeued',
        /// <summary>文件上传结束</summary>
        uploadFinished: 'uploadFinished',
        /// <summary>单文件上传开始</summary>
        uploadStart: 'uploadStart',
        /// <summary>添加多文件</summary>
        fileQueued: 'fileQueued',
        /// <summary>文件上传进度</summary>
        uploadProgress: 'uploadProgress'
    };
    cls.prototype.bindUploadSuccess = function (arg, scope) {
        /// <summary>文件上传成功事件绑定</summary>
        /// <param  name="arg"  type="vo.orm.bindMsg.arg"></param>
        if (typeof arg === 'boolean' || typeof arg === 'undefined') {
            arg = {
                fn: this._onUploadSuccess
            };
            scope = this;
        }
        var the = this;
        if ($.isExist(scope)) {
            the = scope;
        }
        this._cfg.$cls.on(cls.msgEnum.UploadSuccess, arg.data, $.proxy(arg.fn, the), arg.one);
    };
    cls.prototype._onUploadSuccess = function (e, data) {
        /// <summary>文件上传成功激发函数</summary>
        /// <param  name="e"  value="event"></param>
        /// <param  name="data"   type="Object"></param>
        /// TODO
    };
    cls.prototype.bindFileDequeued = function (arg, scope) {
        /// <summary>删除上传文件事件绑定</summary>
        /// <param  name="arg"  type="vo.orm.bindMsg.arg"></param>
        if (typeof arg === 'boolean' || typeof arg === 'undefined') {
            arg = {
                fn: this._onFileDequeued
            };
            scope = this;
        }
        var the = this;
        if ($.isExist(scope)) {
            the = scope;
        }
        this._cfg.$cls.on(cls.msgEnum.FileDequeued, arg.data, $.proxy(arg.fn, the), arg.one);
    };
    cls.prototype._onFileDequeued = function (e, data) {
        /// <summary>删除上传文件激发函数</summary>
        /// <param  name="e"  value="event"></param>
        /// <param  name="data"   type="Object"></param>
        /// TODO
    };
    cls.prototype.bindUploadFinished = function (arg, scope) {
        /// <summary>文件上传结束事件绑定</summary>
        /// <param  name="arg"  type="vo.orm.bindMsg.arg"></param>
        if (typeof arg === 'boolean' || typeof arg === 'undefined') {
            arg = {
                fn: this._onUploadFinished
            };
            scope = this;
        }
        var the = this;
        if ($.isExist(scope)) {
            the = scope;
        }
        this._cfg.$cls.on(cls.msgEnum.UploadFinished, arg.data, $.proxy(arg.fn, the), arg.one);
    };
    cls.prototype._onUploadFinished = function (e, data) {
        /// <summary>文件上传结束激发函数</summary>
        /// <param  name="e"  value="event"></param>
        /// <param  name="data"   type="Object"></param>
        /// TODO
    };
    cls.prototype.bindUploadStart = function (arg, scope) {
        /// <summary>单文件上传开始事件绑定</summary>
        /// <param  name="arg"  type="vo.orm.bindMsg.arg"></param>
        if (typeof arg === 'boolean' || typeof arg === 'undefined') {
            arg = {
                fn: this._onUploadStart
            };
            scope = this;
        }
        var the = this;
        if ($.isExist(scope)) {
            the = scope;
        }
        this._cfg.$cls.on(cls.msgEnum.UploadStart, arg.data, $.proxy(arg.fn, the), arg.one);
    };
    cls.prototype._onUploadStart = function (e, data) {
        /// <summary>单文件上传开始激发函数</summary>
        /// <param  name="e"  value="event"></param>
        /// <param  name="data"   type="Object"></param>
        /// TODO
    };
    cls.prototype.bindFileQueued = function (arg, scope) {
        /// <summary>添加多文件事件绑定</summary>
        /// <param  name="arg"  type="vo.orm.bindMsg.arg"></param>
        if (typeof arg === 'boolean' || typeof arg === 'undefined') {
            arg = {
                fn: this._onFileQueued
            };
            scope = this;
        }
        var the = this;
        if ($.isExist(scope)) {
            the = scope;
        }
        this._cfg.$cls.on(cls.msgEnum.FileQueued, arg.data, $.proxy(arg.fn, the), arg.one);
    };
    cls.prototype._onFileQueued = function (e, data) {
        /// <summary>添加多文件激发函数</summary>
        /// <param  name="e"  value="event"></param>
        /// <param  name="data"   type="Object"></param>
        /// TODO
    };
    cls.prototype.bindUploadProgress = function (arg, scope) {
        /// <summary>文件上传进度事件绑定</summary>
        /// <param  name="arg"  type="vo.orm.bindMsg.arg"></param>
        if (typeof arg === 'boolean' || typeof arg === 'undefined') {
            arg = {
                fn: this._onUploadProgress
            };
            scope = this;
        }
        var the = this;
        if ($.isExist(scope)) {
            the = scope;
        }
        this._cfg.$cls.on(cls.msgEnum.UploadProgress, arg.data, $.proxy(arg.fn, the), arg.one);
    };
    cls.prototype._onUploadProgress = function (e, data) {
        /// <summary>文件上传进度激发函数</summary>
        /// <param  name="e"  value="event"></param>
        /// <param  name="data"   type="Object"></param>
        /// TODO
    };
    /// <summary>clsInputOrmFiles控件全局化声明</summary>
    cssOrm.declare('clsInputOrmFiles', cls);
    return cls;
});

// 控件名称：clsInputOrmImage
// 控件说明：图片文档上传
// 创建时间：2017-12-19 09:49:36
// 创建人：管理员
define("RxmInputOrmImage", [], function () {
    var cls = function (config) {
        /// <field   name="_cfg"  type="vo.orm.图片文档上传.config">图片文档上传</field>
        this._cls(config);
    };
    // 定义cfg 默认
    cls._cfgDefault = {};
    cls.prototype._cls = function (config) {
        /// <param  name="config"  type="vo.orm.图片文档上传.config"></param>
        var dcfg = cls._cfgDefault;
        var ucfg = cssOrm.default.clsInputOrmImage || {};
        ucfg = ucfg.cfg;
        this._cfg = $.extend(true, {}, dcfg, ucfg, config);
        if (typeof this._cfg.id !== 'undefined') {
            this._cfg.$cls = $('#' + this._cfg.id);
        }
    };
    cls.prototype.init = function () {
    };
    /// <summary>clsInputOrmImage控件全局化声明</summary>
    cssOrm.declare('clsInputOrmImage', cls);
    return cls;
});

define("RxmArrEvt", ['RxmEventBase', 'RxmInherit', 'jquery'], function (eventBase, declare) {
    var cls = declare([eventBase], {
        constructor: function (option) {
            this.editType = option.editType;
            this._data = option.data || {};
        }
    });
    cls.prototype.onAdded = function (callback, thisObj) {
        return this.on(cls.enumEvt.added, callback, thisObj);
    };
    cls.prototype.onAdding = function (callback, thisObj) {
        return this.on(cls.enumEvt.adding, callback, thisObj);
    };
    cls.prototype.onModified = function (callback, thisObj) {
        ///<summary>添加数据被修改事件</summary>
        ///<param name="thisObj" value="Object">事件函数this 上下文<br/>不赋值时，上下文为 dataObject本身 </param>
        ///<param name="callback" type="Function">事件叫回函数<br/>形如： function(field){}<br/> </param>
        ///<returns type="Boolean"></returns>
        return this.on(cls.enumEvt.modifed, callback, thisObj);
    };
    cls.prototype.onModifing = function (callback, thisObj) {
        return this.on(cls.enumEvt.modifing, callback, thisObj);
    };
    cls.prototype.onDeleted = function (callback, thisObj) {
        ///<summary>添加数据被删除事件</summary>
        ///<param name="thisObj" value="Object">事件函数this 上下文<br/>不赋值时，上下文为 dataObject本身 </param>
        ///<param name="callback" type="Function">事件叫回函数<br/>形如： function(field){}<br/> </param>
        return this.on(cls.enumEvt.deleted, callback, thisObj);
    };
    cls.prototype.onDeleting = function (callback, thisObj) {
        ///<summary>添加数据即将删除事件</summary>
        ///<param name="thisObj" value="Object">事件函数this 上下文<br/>不赋值时，上下文为 dataObject本身 </param>
        ///<param name="callback" type="Function">事件叫回函数<br/>形如： function(field){}<br/> </param>
        ///<returns type="Boolean"></returns>
        return this.on(cls.enumEvt.deleteing, callback, thisObj);
    };
    cls.enumEvt = {
        adding: 'adding',
        added: 'added',
        deleteing: 'deleteing',
        deleted: 'deleted',
        modifing: 'modifing',
        modifed: 'modifed'
    };
    cls.prototype.add = function (obj) {
        ///<summay></summary>
        ///<param></param>       
        return this;
    };
    cls.prototype.modify = function (obj) {
        ///<summay></summary>
        ///<param></param>
        return this;
    };
    cls.prototype.insert = function (obj, preObj) {
        ///<summay> </summary>
        ///<param>  </param>
        return this;
    };
    cls.prototype.remove = function (obj) {
        ///<summay></summary>
        ///<param></param>
        return this;
    };
    cls.prototype.getDataChanged = function () {
        return this;
    };
    cls.prototype.getRawData = function () {
        return this;
    };
    cls.prototype.getData = function () {
        return this;
    };
    return cls;
});

define("RxmDataBase", [], function () {
    ///<summary><summary>
    var cls = function () { };
    cls.prototype.add = function (newDataObj) {
        ///<summay></summary>
        ///<param></param>       
        return this;
    };
    cls.prototype.modify = function (newDataObj) {
        ///<summay></summary>
        ///<param></param>
        return this;
    };
    cls.prototype.replace = function (newDataObj) {
        ///<summay></summary>
        ///<param></param>
        return this;
    };
    cls.prototype.remove = function (newDataObj) {
        ///<summay></summary>
        ///<param></param>
        return this;
    };
    cls.prototype.getDataChanged = function () {
        return this;
    };
    cls.prototype.getRawData = function () {
        return this;
    };
    cls.prototype.getData = function () {
        return this;
    };
    return cls;
});

define("RxmDataCollectionBase", ['RxmDataEvt', 'RxmInherit', 'RxmDataBase', 'RxmDataObjectBase', 'RxmLang'], function (Evt, declare, dataBase, dataObjectBase, lang) {
    ///<summary><summary>
    ///<param name="Evt" value="PdwebDataEvent"> 事件类</param>
    ///<param name="declare" value="PdwebDeclare"> 事件类</param>
    ///<parm  name="dataBase"  
    var e = $.extend({}, Evt.enumEvt);
    var cls = cssOrm.inherit([Evt, dataBase], {
        constructor: function () {
            ///<field name="_data" type="Array" elementType="PdwebDataObjectBase"> </field>
            this._data = [];
            this._dataDeleted = [];
            this.opTypeName = "opType";
            this.orderNumName = "";
            this.idName = "id";
            this.itemClass = dataObjectBase;
        }
    });
    cls.prototype._newDataToDataObject = function (newObj) {
        if ($.isArray(newObj)) {
            var d = [];
            for (var i = 0; i < newObj.length; i++) {
                var v = newObj[i];
                if (v instanceof this.itemClass) {
                    d.push(v);
                }
                else {
                    var vv = new this.itemClass(v);
                    d.push(vv);
                }
            }
            ;
            return d;
        }
        else {
            var r;
            if (!((newObj instanceof this.itemClass) || (newObj instanceof dataBase.prototype.constructor))) {
                r = new this.itemClass(newObj);
            }
            else
                r = newObj;
            return r;
        }
    };
    cls.prototype.pop = function () {
        ///<returns  type="PdwebDataObjectBase"></returns>
        var r = this._data[this._data.length - 1];
        if (this.trigger(Evt.enumEvt.deleteing, r)) {
            this._data.pop();
            if (r.opType && r.opType != "new") {
                this._dataDeleted.push(r);
            }
            this.trigger(Evt.enumEvt.deleted, r);
        }
    };
    cls.prototype.addData = function (data, senderSelf, ipos) {
        var d = this._newDataToDataObject(data);
        if (this.trigger(Evt.enumEvt.adding, data, senderSelf)) {
            if ($.isArray(data)) {
                //data.foreach(function (v, index) {
                //    temp = new dataBase(v);
                //    d.push(temp);
                //})
                if (ipos) {
                    d.forEach(function (v, index) {
                        this._data.splice(ipos + index, 0, v);
                    });
                }
                else {
                    this._data = this._data.concat(d);
                }
            }
            else {
                if (ipos) {
                    this._data.splice(ipos, 0, d);
                }
                else {
                    this._data.push(d);
                }
            }
            this.trigger(Evt.enumEvt.added, d, senderSelf);
        }
        return d;
    };
    cls.prototype._delRowByID = function (idOrObj) {
        var p = this._getIndexById(idOrObj);
        if (!(p < 0)) {
            this.delRowByIndex(p);
        }
    };
    cls.prototype._getIndexById = function (idOrRowObj) {
        ///<summary>根据id  或者 gridRow对象本身获取行所在顺序，从零开始</summary>
        ///<param  name="idOrRowObj"  type="Object">id 或者行对象数据</param>
        var ID;
        if (lang.isString(idOrRowObj)) {
            ID = idOrRowObj;
        }
        else {
            ID = idOrRowObj[this.idName];
        }
        var index = -1;
        for (var i = 0; i < this._data.length; i++) {
            if (this._data[i][this.idName] == ID) {
                index = i;
                break;
            }
        }
        return index;
    };
    cls.prototype._getMaxOrderNum = function (idOrRowObj) {
        var ret = -1;
        var b = false;
        for (var i = 0; i < this._config.layout.length; i++) {
            var item = this._config.layout[i];
            if (item.field == this.orderNumName) {
                b = true;
                break;
            }
        }
        ;
        if (b) {
            var d = this._data;
            for (var i = 0; i < d.length; i++) {
                var item = d[i][this.orderNumName];
                if (lang.isString(item)) {
                    item = parseInt(item);
                }
                if (item > ret) {
                    ret = item;
                }
            }
        }
        return ret;
    };
    cls.prototype._getNewOrderNum = function () {
        var order = this._getMaxOrderNum();
        return order > 0 ? (order + this.orderInterval) : 1;
    };
    cls.prototype.delRowByIndex = function (rowOrderPosition) {
        ///<summary>删除一行</summary>
        ///<param  name="rowOrderNum" type="Interger">行位置</param>
        var d = this._data[rowOrderPosition];
        this._data.splice(rowOrderPosition, 1);
        if (d && d[this.opTypeName] != "new") {
            d[this.opTypeName] = "deleted";
            this._dataDeleted.push(d);
        }
        var ds = this._data;
        if (this.orderNumName.length > 0) {
            var ditem = d[this.orderNumName];
            ditem = ditem && lang.isString(ditem) ? (parseInt(ditem)) : ditem;
            for (var i = 0; i < ds.length; i++) {
                var item = ds[i][this.orderNumName];
                item = item && lang.isString(item) ? (parseInt(item)) : item;
                if (item > ditem) {
                    item = item - this.orderInterval;
                    ds[i][this.orderNumName] = item;
                    var tmp = {};
                    tmp[this.orderNumName] = item;
                    ds[i].modifyData(tmp, this);
                }
            }
        }
        // this.refresh();
        return d;
    };
    cls.prototype.down = function (row) {
        if (this.orderNumName.length == 0)
            return;
        var ipos = this._getIndexById(rowObjOrid);
        if (ipos >= 0 && ipos != this._data.length - 1) {
            var d = this._data[ipos];
            var ord = this._data[ipos + 1][this.orderNumName];
            this._data[ipos + 1][this.orderNumName] = d[this.orderNumName];
            d[this.orderNumName] = ord;
            this._data[ipos] = this._data[ipos + 1];
            this._data[ipos + 1] = d;
            this._setRowModified(this._data[ipos]);
            this._setRowModified(this._data[ipos + 1]);
            this.refresh();
        }
    };
    cls.prototype.modifyData = function (dOrdArr, senderSelf) {
        ///<summary>修改一行</summary>
        ///<param  name="dOrdArr" type="Array" elemntType="Object">修改的数据</param>
        ///<param  name="senderSelf" type="Object">修改者</param>
        if (this.trigger(cls.enumEvt.modifing, senderSelf)) {
            if ($.isArray(dOrdArr)) {
                for (var it in dOrdArr) {
                    this._modifyData(it, senderSelf);
                }
            }
            else {
                this._modifyData(dOrdArr, senderSelf);
            }
        }
        ;
        this.trigger(cls.enumEvt.modifed, senderSelf);
        return this;
    };
    cls.prototype._modifyData = function (v, senderSelf) {
        if (!v)
            return false;
        var id = v[this.idName];
        if (id) {
            var it = this.getDataById(id);
            it.modifyData(v, senderSelf);
        }
        else {
            this._data.forEach(function (vv) {
                vv.modifyData(v, senderSelf);
            });
        }
        return true;
    };
    cls.prototype.getDataChanged = function (opType) {
        ///<summary>得到转变的数据，包括 添加，删除，修改</summary>
        ///<param name="opType",type="String">数据类型</param>
        var r = [];
        for (var j = 0; j < this._dataDeleted.length; j++) {
            r.push(this._dataDeleted[j].getDataChanged());
        }
        if (typeof opType === "undefined") {
            var d = this._data;
            for (var i = 0; i < d.length; i++) {
                var dd = d[i];
                if (typeof dd[this.opTypeName] != "undefined" && dd[this.opTypeName] != "") {
                    r.push(dd.getDataChanged());
                }
            }
        }
        return r;
    };
    cls.prototype.sort = function (fieldOrCofig, sortType, fun) {
    };
    cls.prototype.up = function (rowObjOrid) {
        if (this.orderNumName.length == 0)
            return;
        var ipos = this._getIndexById(rowObjOrid);
        if (ipos > 0) {
            var d = this._data[ipos];
            var ord = this._data[ipos - 1][this.orderNumName];
            this._data[ipos - 1][this.orderNumName] = d[this.orderNumName];
            d[this.orderNumName] = ord;
            this._data[ipos] = this._data[ipos - 1];
            this._data[ipos - 1] = d;
            this._setRowModified(this._data[ipos]);
            this._setRowModified(this._data[ipos - 1]);
            this.refresh();
        }
    };
    cls.prototype._setRowModified = function (row) {
        if (!row[this.op] || row[this.opTypeName] && row[this.opTypeName] != "new") {
            row[this.opTypeName] = "modified";
        }
    };
    cls.prototype.clear = function () {
        this._data = [];
        this._dataDeleted = [];
    };
    cls.prototype.getData = function () { return this._data; };
    //cls.prototype.getRawData = function () {
    //    var ret;var temp;
    //    this._data.forEach(function (v) {
    //        ret = ret || [];
    //        if ((temp=v.getRawData()))
    //            ret.push(temp);
    //    })
    //    return ret;
    //};
    cls.prototype.replaceData = function (newDataObj, senderSelf) {
        ///<summay></summary>
        ///<param></param>
        return this;
    };
    cls.prototype.removeData = function (newDataObj, senderSelf) {
        ///<summay></summary>
        ///<param></param>
        var id;
        var index = -1;
        var b = false;
        var delData;
        if (lang.isArray(newDataObj)) {
            delData = newDataObj;
        }
        else {
            index = this._getIndexById(newDataObj);
            if (index >= 0) {
                delData = this._data[index];
            }
        }
        if (delData && this.trigger(cls.enumEvt.deleteing, delData, senderSelf)) {
            if (lang.isArray(newDataObj)) {
                for (var it in this._data) {
                    index = this._getIndexById(it);
                    if (index >= 0) {
                        this.delRowByIndex(index);
                    }
                }
            }
            else {
                this.delRowByIndex(index);
            }
            this.trigger(cls.enumEvt.deleted, delData, senderSelf);
        }
        ;
        return this;
    };
    cls.prototype._removedata = function () {
    };
    cls.prototype.submitSuccess = function (data) {
        this._dataDeleted = [];
        if (data) {
            this.modifyData(data);
        }
        else {
            for (var i = 0; i < this._data.length; i++) {
                var it = this._data[i];
                it.submitSuccess();
            }
        }
    };
    cls.enumEvt = $.extend({}, Evt.enumEvt);
    return cls;
});

define("RxmDataEvt", ['RxmEventBase', 'RxmInherit'], function (eventBase, declare) {
    ///<param   name="eventBase"  value="PdwebEventBase"></param>
    var cls = cssOrm.inherit([eventBase], {
    //        constructor:function(option)
    //            {
    //                this.editType = option.editType;
    //                this._data = option.data || {};
    //            }
    });
    cls.prototype.onAdded = function (callback, thisObj) {
        return this.on(cls.enumEvt.added, callback, thisObj);
    };
    cls.prototype.onAdding = function (callback, thisObj) {
        return this.on(cls.enumEvt.adding, callback, thisObj);
    };
    cls.prototype.onModified = function (callback, thisObj) {
        ///<summary>添加数据被修改事件</summary>
        ///<param name="thisObj" value="Object">事件函数this 上下文<br/>不赋值时，上下文为 dataObject本身 </param>
        ///<param name="callback" type="Function">事件叫回函数<br/>形如： function(field){}<br/> </param>
        ///<returns type="Boolean"></returns>
        return this.on(cls.enumEvt.modifed, callback, thisObj);
    };
    cls.prototype.onModifing = function (callback, thisObj) {
        return this.on(cls.enumEvt.modifing, callback, thisObj);
    };
    cls.prototype.onDeleted = function (callback, thisObj) {
        ///<summary>添加数据被删除事件</summary>
        ///<param name="thisObj" value="Object">事件函数this 上下文<br/>不赋值时，上下文为 dataObject本身 </param>
        ///<param name="callback" type="Function">事件叫回函数<br/>形如： function(field){}<br/> </param>
        return this.on(cls.enumEvt.deleted, callback, thisObj);
    };
    cls.prototype.onDeleting = function (callback, thisObj) {
        ///<summary>添加数据即将删除事件</summary>
        ///<param name="thisObj" value="Object">事件函数this 上下文<br/>不赋值时，上下文为 dataObject本身 </param>
        ///<param name="callback" type="Function">事件叫回函数<br/>形如： function(field){}<br/> </param>
        ///<returns type="Boolean"></returns>
        return this.on(cls.enumEvt.deleteing, callback, thisObj);
    };
    cls.enumEvt = {
        adding: 'adding',
        added: 'added',
        deleteing: 'deleteing',
        deleted: 'deleted',
        modifing: 'modifing',
        modifed: 'modifed'
    };
    cls.prototype.add = function (obj) {
        ///<summay></summary>
        ///<param></param>       
        return this;
    };
    cls.prototype.modify = function (obj) {
        ///<summay></summary>
        ///<param></param>
        return this;
    };
    cls.prototype.insert = function (obj, preObj) {
        ///<summay> </summary>
        ///<param>  </param>
        return this;
    };
    cls.prototype.remove = function (obj) {
        ///<summay></summary>
        ///<param></param>
        return this;
    };
    cls.prototype.getDataChanged = function () {
        return this;
    };
    cls.prototype.getRawData = function () {
        return this;
    };
    cls.prototype.getData = function () {
        return this;
    };
    return cls;
});

define("RxmDataList", ['RxmInherit', 'RxmDataCollectionBase', 'RxmDataObjectBase'], function (declare, dataCollectionBase, dataObjectBase) {
    ///<param name="declare" value="PdwebDeclare"> </param>
    ///<param name="dataCollectionBase" value="PdwebDataCollectionBase"> </param>
    var lt = declare([dataCollectionBase], {
        constructor: function () {
            ///
        }
    });
    lt.prototype.f = function () {
    };
    return lt;
});

define("RxmDataObjectBase", ['RxmDataEvt', 'RxmDataBase', 'RxmInherit'], function (Evt, dataBase, declare) {
    ///<summary><summary>
    ///<param name="Evt" value="PdwebDataEvent"> 事件类</param>
    ///<param name="declare" value="PdwebDeclare"> 事件类</param>
    ///<returns value="PdwebDataObject"><returns>
    var cls = declare([Evt, dataBase], {
        constructor: function (initValue) {
            this._constructor(initValue);
        }
    });
    cls.prototype._constructor = function (initValue) {
        this.opType = "";
        this.orderNum = 0;
        if (initValue) {
            $.extend(this, initValue);
        }
    };
    cls.prototype.setItemValue = function (itemName, value) {
        var t = {};
        t[itemName] = value;
        return this.modifyData(t);
    };
    cls.prototype.addData = function (newDataObj, senderSelf) {
        ///<summary>添加数据</summary>
        ///<param name="newDataObj" type="Object">新数据对象</param>
        ///<param name="senderSelf" type="Object">数据修改者</param>
        if (this.trigger(Evt.enumEvt.adding, newDataObj, senderSelf))
            ;
        {
            $.extend(this, this._plainData(newDataObj));
        }
        this.trigger(Evt.enumEvt.added, this, senderSelf);
        return this;
    };
    cls.prototype.modifyData = function (newDataObj, senderSelf) {
        ///<summary></summary>
        ///<param name="newDataObj" type="Object">修改数据对象</param>
        ///<param name="senderSelf" type="Object">数据修改者</param>
        if (this.trigger(Evt.enumEvt.modifing, newDataObj, senderSelf))
            ;
        {
            $.extend(this, this._plainData(newDataObj));
        }
        this.trigger(Evt.enumEvt.modifed, this, senderSelf);
        return this;
    };
    cls.prototype.getDataChanged = function () {
        var ret;
        if (this.opType == "new" || this.opType == "modified" || this.opType == "deleted") {
            ret = this._plainData(this);
        }
        return ret;
    };
    cls.prototype.getRawData = function () {
        var ret = {};
        for (var it in this) {
            if (!($.isFunction(this[it]))) {
                ret[it] = this[it];
            }
        }
        return ret;
    };
    cls.prototype.getData = function () {
        return this._plainData();
    };
    cls.prototype.replaceData = function (newDataObj) {
        ///<summary></summary>
        ///<param></param>
        return this;
    };
    cls.prototype._plainData = function (data) {
        data = data || this;
        ret = {};
        for (var it in data) {
            if (!($.isFunction(data[it]) || it.indexOf("_") == 0) && (it != "declaredClass")) {
                ret[it] = data[it];
            }
        }
        return ret;
    };
    cls.prototype.submitSuccess = function (data) {
        this.opType = "";
    };
    cls.enumEvt = $.extend({}, Evt.enumEvt);
    return cls;
    var r = new cls();
});

define("RxmEventBase", [], function () {
    var slice = [].slice, separator = /\s+/, protos;
    // 根据条件过滤出事件handlers.
    function findHandlers(arr, name, callback, context) {
        return $.grep(arr, function (handler) {
            return handler &&
                (!name || handler.e === name) &&
                (!callback || handler.cb === callback ||
                    handler.cb._cb === callback) &&
                (!context || handler.ctx === context);
        });
    }
    function eachEvent(events, callback, iterator) {
        // 不支持对象，只支持多个event用空格隔开
        $.each((events || '').split(separator), function (_, key) {
            iterator(key, callback);
        });
    }
    function triggerHanders(events, args) {
        var stoped = false, i = -1, len = events.length, handler;
        while (++i < len) {
            handler = events[i];
            if (handler.cb.apply(handler.ctx2, args) === false) {
                stoped = true;
                break;
            }
        }
        return !stoped;
    }
    protos = function () {
        this._events = [];
    };
    /**
     * 绑定事件。
     *
     * `callback`方法在执行时，arguments将会来源于trigger的时候携带的参数。如
     * ```javascript
     * var obj = {};
     *
     * // 使得obj有事件行为
     * Mediator.installTo( obj );
     *
     * obj.on( 'testa', function( arg1, arg2 ) {
     *     console.log( arg1, arg2 ); // => 'arg1', 'arg2'
     * });
     *
     * obj.trigger( 'testa', 'arg1', 'arg2' );
     * ```
     *
     * 如果`callback`中，某一个方法`return false`了，则后续的其他`callback`都不会被执行到。
     * 切会影响到`trigger`方法的返回值，为`false`。
     *
     * `on`还可以用来添加一个特殊事件`all`, 这样所有的事件触发都会响应到。同时此类`callback`中的arguments有一个不同处，
     * 就是第一个参数为`type`，记录当前是什么事件在触发。此类`callback`的优先级比脚低，会再正常`callback`执行完后触发。
     * ```javascript
     * obj.on( 'all', function( type, arg1, arg2 ) {
     *     console.log( type, arg1, arg2 ); // => 'testa', 'arg1', 'arg2'
     * });
     * ```
     *
     * @method on
     * @grammar on( name, callback[, context] ) => self
     * @param  {String}   name     事件名，支持多个事件用空格隔开
     * @param  {Function} callback 事件处理器
     * @param  {Object}   [context]  事件处理器的上下文。
     * @return {self} 返回自身，方便链式
     * @chainable
     * @class Mediator
     */
    protos.prototype.on = function (name, callback, context) {
        var me = this, set;
        if (!callback) {
            return this;
        }
        set = this._events;
        eachEvent(name, callback, function (name, callback) {
            var handler = { e: name };
            handler.cb = callback;
            handler.ctx = context;
            handler.ctx2 = context || me;
            handler.id = set.length;
            set.push(handler);
        });
        return this;
    },
        /**
         * 绑定事件，且当handler执行完后，自动解除绑定。
         * @method once
         * @grammar once( name, callback[, context] ) => self
         * @param  {String}   name     事件名
         * @param  {Function} callback 事件处理器
         * @param  {Object}   [context]  事件处理器的上下文。
         * @return {self} 返回自身，方便链式
         * @chainable
         */
        protos.prototype.once = function (name, callback, context) {
            var me = this;
            if (!callback) {
                return me;
            }
            eachEvent(name, callback, function (name, callback) {
                var once = function () {
                    me.off(name, once);
                    return callback.apply(context || me, arguments);
                };
                once._cb = callback;
                me.on(name, once, context);
            });
            return me;
        };
    /**
     * 解除事件绑定
     * @method off
     * @grammar off( [name[, callback[, context] ] ] ) => self
     * @param  {String}   [name]     事件名
     * @param  {Function} [callback] 事件处理器
     * @param  {Object}   [context]  事件处理器的上下文。
     * @return {self} 返回自身，方便链式
     * @chainable
     */
    protos.prototype.off = function (name, cb, ctx) {
        var events = this._events;
        if (!events) {
            return this;
        }
        if (!name && !cb && !ctx) {
            this._events = [];
            return this;
        }
        eachEvent(name, cb, function (name, cb) {
            $.each(findHandlers(events, name, cb, ctx), function () {
                delete events[this.id];
            });
        });
        return this;
    };
    /**
     * 触发事件
     * @method trigger
     * @grammar trigger( name[, args...] ) => self
     * @param  {String}   type     事件名
     * @param  {*} [...] 任意参数
     * @return {Boolean} 如果handler中return false了，则返回false, 否则返回true
     */
    protos.prototype.trigger = function (type) {
        var args, events, allEvents;
        if (!this._events || !type) {
            return this;
        }
        args = slice.call(arguments, 1);
        events = findHandlers(this._events, type);
        allEvents = findHandlers(this._events, 'all');
        return triggerHanders(events, args) &&
            triggerHanders(allEvents, arguments);
    };
    return protos;
});

/// <reference path="lang.js" />
define("RxmInherit", ["RxmLang"], function (lang) {
    var mix = undefined;
    if (typeof lang != "undefined")
        mix = lang.mixin;
    op = Object.prototype, opts = op.toString,
        xtor = new Function, counter = 0, cname = "constructor";
    function err(msg, cls) {
        throw new Error("declare" + (cls ? " " + cls : "") + ": " + msg);
    }
    // C3 Method Resolution Order (see http://www.python.org/download/releases/2.3/mro/)
    function c3mro(bases, className) {
        var result = [], roots = [{ cls: 0, refs: [] }], nameMap = {}, clsCount = 1, l = bases.length, i = 0, j, lin, base, top, proto, rec, name, refs;
        // build a list of bases naming them if needed
        for (; i < l; ++i) {
            base = bases[i];
            if (!base) {
                err("mixin #" + i + " is unknown. Did you use dojo.require to pull it in?", className);
            }
            else if (opts.call(base) != "[object Function]") {
                err("mixin #" + i + " is not a callable constructor.", className);
            }
            lin = base._meta ? base._meta.bases : [base];
            top = 0;
            // add bases to the name map
            for (j = lin.length - 1; j >= 0; --j) {
                proto = lin[j].prototype;
                if (!proto.hasOwnProperty("declaredClass")) {
                    proto.declaredClass = "uniqName_" + (counter++);
                }
                name = proto.declaredClass;
                if (!nameMap.hasOwnProperty(name)) {
                    nameMap[name] = { count: 0, refs: [], cls: lin[j] };
                    ++clsCount;
                }
                rec = nameMap[name];
                if (top && top !== rec) {
                    rec.refs.push(top);
                    ++top.count;
                }
                top = rec;
            }
            ++top.count;
            roots[0].refs.push(top);
        }
        // remove classes without external references recursively
        while (roots.length) {
            top = roots.pop();
            result.push(top.cls);
            --clsCount;
            // optimization: follow a single-linked chain
            while (refs = top.refs, refs.length == 1) {
                top = refs[0];
                if (!top || --top.count) {
                    // branch or end of chain => do not end to roots
                    top = 0;
                    break;
                }
                result.push(top.cls);
                --clsCount;
            }
            if (top) {
                // branch
                for (i = 0, l = refs.length; i < l; ++i) {
                    top = refs[i];
                    if (!--top.count) {
                        roots.push(top);
                    }
                }
            }
        }
        if (clsCount) {
            err("can't build consistent linearization", className);
        }
        // calculate the superclass offset
        base = bases[0];
        result[0] = base ?
            base._meta && base === result[result.length - base._meta.bases.length] ?
                base._meta.bases.length : 1 : 0;
        return result;
    }
    function inherited(args, a, f) {
        var name, chains, bases, caller, meta, base, proto, opf, pos, cache = this._inherited = this._inherited || {};
        // crack arguments
        if (typeof args == "string") {
            name = args;
            args = a;
            a = f;
        }
        f = 0;
        caller = args.callee;
        name = name || caller.nom;
        if (!name) {
            err("can't deduce a name to call inherited()", this.declaredClass);
        }
        meta = this.constructor._meta;
        bases = meta.bases;
        pos = cache.p;
        if (name != cname) {
            // method
            if (cache.c !== caller) {
                // cache bust
                pos = 0;
                base = bases[0];
                meta = base._meta;
                if (meta.hidden[name] !== caller) {
                    // error detection
                    chains = meta.chains;
                    if (chains && typeof chains[name] == "string") {
                        err("calling chained method with inherited: " + name, this.declaredClass);
                    }
                    // find caller
                    do {
                        meta = base._meta;
                        proto = base.prototype;
                        if (meta && (proto[name] === caller && proto.hasOwnProperty(name) || meta.hidden[name] === caller)) {
                            break;
                        }
                    } while (base = bases[++pos]); // intentional assignment
                    pos = base ? pos : -1;
                }
            }
            // find next
            base = bases[++pos];
            if (base) {
                proto = base.prototype;
                if (base._meta && proto.hasOwnProperty(name)) {
                    f = proto[name];
                }
                else {
                    opf = op[name];
                    do {
                        proto = base.prototype;
                        f = proto[name];
                        if (f && (base._meta ? proto.hasOwnProperty(name) : f !== opf)) {
                            break;
                        }
                    } while (base = bases[++pos]); // intentional assignment
                }
            }
            f = base && f || op[name];
        }
        else {
            // constructor
            if (cache.c !== caller) {
                // cache bust
                pos = 0;
                meta = bases[0]._meta;
                if (meta && meta.ctor !== caller) {
                    // error detection
                    chains = meta.chains;
                    if (!chains || chains.constructor !== "manual") {
                        err("calling chained constructor with inherited", this.declaredClass);
                    }
                    // find caller
                    while (base = bases[++pos]) { // intentional assignment
                        meta = base._meta;
                        if (meta && meta.ctor === caller) {
                            break;
                        }
                    }
                    pos = base ? pos : -1;
                }
            }
            // find next
            while (base = bases[++pos]) { // intentional assignment
                meta = base._meta;
                f = meta ? meta.ctor : base;
                if (f) {
                    break;
                }
            }
            f = base && f;
        }
        // cache the found super method
        cache.c = f;
        cache.p = pos;
        // now we have the result
        if (f) {
            return a === true ? f : f.apply(this, a || args);
        }
        // intentionally no return if a super method was not found
    }
    function getInherited(name, args) {
        if (typeof name == "string") {
            return this.__inherited(name, args, true);
        }
        return this.__inherited(name, true);
    }
    function inherited__debug(args, a1, a2) {
        var f = this.getInherited(args, a1);
        if (f) {
            return f.apply(this, a2 || a1 || args);
        }
        // intentionally no return if a super method was not found
    }
    var inheritedImpl = false ? inherited__debug : inherited;
    // emulation of "instanceof"
    function isInstanceOf(cls) {
        var bases = this.constructor._meta.bases;
        for (var i = 0, l = bases.length; i < l; ++i) {
            if (bases[i] === cls) {
                return true;
            }
        }
        return this instanceof cls;
    }
    function mixOwn(target, source) {
        // add props adding metadata for incoming functions skipping a constructor
        for (var name in source) {
            if (name != cname && source.hasOwnProperty(name)) {
                target[name] = source[name];
            }
        }
    }
    // implementation of safe mixin function
    function safeMixin(target, source) {
        // summary:
        //		Mix in properties skipping a constructor and decorating functions
        //		like it is done by declare().
        // target: Object
        //		Target object to accept new properties.
        // source: Object
        //		Source object for new properties.
        // description:
        //		This function is used to mix in properties like lang.mixin does,
        //		but it skips a constructor property and decorates functions like
        //		declare() does.
        //
        //		It is meant to be used with classes and objects produced with
        //		declare. Functions mixed in with dojo.safeMixin can use
        //		this.inherited() like normal methods.
        //
        //		This function is used to implement extend() method of a constructor
        //		produced with declare().
        //
        // example:
        //	|	var A = declare(null, {
        //	|		m1: function(){
        //	|			console.log("A.m1");
        //	|		},
        //	|		m2: function(){
        //	|			console.log("A.m2");
        //	|		}
        //	|	});
        //	|	var B = declare(A, {
        //	|		m1: function(){
        //	|			this.inherited(arguments);
        //	|			console.log("B.m1");
        //	|		}
        //	|	});
        //	|	B.extend({
        //	|		m2: function(){
        //	|			this.inherited(arguments);
        //	|			console.log("B.m2");
        //	|		}
        //	|	});
        //	|	var x = new B();
        //	|	dojo.safeMixin(x, {
        //	|		m1: function(){
        //	|			this.inherited(arguments);
        //	|			console.log("X.m1");
        //	|		},
        //	|		m2: function(){
        //	|			this.inherited(arguments);
        //	|			console.log("X.m2");
        //	|		}
        //	|	});
        //	|	x.m2();
        //	|	// prints:
        //	|	// A.m1
        //	|	// B.m1
        //	|	// X.m1
        var name, t;
        // add props adding metadata for incoming functions skipping a constructor
        for (name in source) {
            t = source[name];
            if ((t !== op[name] || !(name in op)) && name != cname) {
                if (opts.call(t) == "[object Function]") {
                    // non-trivial function method => attach its name
                    t.nom = name;
                }
                target[name] = t;
            }
        }
        return target;
    }
    function extend(source) {
        declare.safeMixin(this.prototype, source);
        return this;
    }
    function createSubclass(mixins, props) {
        // crack parameters
        if (!(mixins instanceof Array || typeof mixins == 'function')) {
            props = mixins;
            mixins = undefined;
        }
        props = props || {};
        mixins = mixins || [];
        return declare([this].concat(mixins), props);
    }
    // chained constructor compatible with the legacy declare()
    function chainedConstructor(bases, ctorSpecial) {
        return function () {
            var a = arguments, args = a, a0 = a[0], f, i, m, l = bases.length, preArgs;
            if (!(this instanceof a.callee)) {
                // not called via new, so force it
                return applyNew(a);
            }
            //this._inherited = {};
            // perform the shaman's rituals of the original declare()
            // 1) call two types of the preamble
            if (ctorSpecial && (a0 && a0.preamble || this.preamble)) {
                // full blown ritual
                preArgs = new Array(bases.length);
                // prepare parameters
                preArgs[0] = a;
                for (i = 0;;) {
                    // process the preamble of the 1st argument
                    a0 = a[0];
                    if (a0) {
                        f = a0.preamble;
                        if (f) {
                            a = f.apply(this, a) || a;
                        }
                    }
                    // process the preamble of this class
                    f = bases[i].prototype;
                    f = f.hasOwnProperty("preamble") && f.preamble;
                    if (f) {
                        a = f.apply(this, a) || a;
                    }
                    // one peculiarity of the preamble:
                    // it is called if it is not needed,
                    // e.g., there is no constructor to call
                    // let's watch for the last constructor
                    // (see ticket #9795)
                    if (++i == l) {
                        break;
                    }
                    preArgs[i] = a;
                }
            }
            // 2) call all non-trivial constructors using prepared arguments
            for (i = l - 1; i >= 0; --i) {
                f = bases[i];
                m = f._meta;
                f = m ? m.ctor : f;
                if (f) {
                    f.apply(this, preArgs ? preArgs[i] : a);
                }
            }
            // 3) continue the original ritual: call the postscript
            f = this.postscript;
            if (f) {
                f.apply(this, args);
            }
        };
    }
    // chained constructor compatible with the legacy declare()
    function singleConstructor(ctor, ctorSpecial) {
        return function () {
            var a = arguments, t = a, a0 = a[0], f;
            if (!(this instanceof a.callee)) {
                // not called via new, so force it
                return applyNew(a);
            }
            //this._inherited = {};
            // perform the shaman's rituals of the original declare()
            // 1) call two types of the preamble
            if (ctorSpecial) {
                // full blown ritual
                if (a0) {
                    // process the preamble of the 1st argument
                    f = a0.preamble;
                    if (f) {
                        t = f.apply(this, t) || t;
                    }
                }
                f = this.preamble;
                if (f) {
                    // process the preamble of this class
                    f.apply(this, t);
                    // one peculiarity of the preamble:
                    // it is called even if it is not needed,
                    // e.g., there is no constructor to call
                    // let's watch for the last constructor
                    // (see ticket #9795)
                }
            }
            // 2) call a constructor
            if (ctor) {
                ctor.apply(this, a);
            }
            // 3) continue the original ritual: call the postscript
            f = this.postscript;
            if (f) {
                f.apply(this, a);
            }
        };
    }
    // plain vanilla constructor (can use inherited() to call its base constructor)
    function simpleConstructor(bases) {
        return function () {
            var a = arguments, i = 0, f, m;
            if (!(this instanceof a.callee)) {
                // not called via new, so force it
                return applyNew(a);
            }
            //this._inherited = {};
            // perform the shaman's rituals of the original declare()
            // 1) do not call the preamble
            // 2) call the top constructor (it can use this.inherited())
            for (; f = bases[i]; ++i) { // intentional assignment
                m = f._meta;
                f = m ? m.ctor : f;
                if (f) {
                    f.apply(this, a);
                    break;
                }
            }
            // 3) call the postscript
            f = this.postscript;
            if (f) {
                f.apply(this, a);
            }
        };
    }
    function chain(name, bases, reversed) {
        return function () {
            var b, m, f, i = 0, step = 1;
            if (reversed) {
                i = bases.length - 1;
                step = -1;
            }
            for (; b = bases[i]; i += step) { // intentional assignment
                m = b._meta;
                f = (m ? m.hidden : b.prototype)[name];
                if (f) {
                    f.apply(this, arguments);
                }
            }
        };
    }
    // forceNew(ctor)
    // return a new object that inherits from ctor.prototype but
    // without actually running ctor on the object.
    function forceNew(ctor) {
        // create object with correct prototype using a do-nothing
        // constructor
        xtor.prototype = ctor.prototype;
        var t = new xtor;
        xtor.prototype = null; // clean up
        return t;
    }
    // applyNew(args)
    // just like 'new ctor()' except that the constructor and its arguments come
    // from args, which must be an array or an arguments object
    function applyNew(args) {
        // create an object with ctor's prototype but without
        // calling ctor on it.
        var ctor = args.callee, t = forceNew(ctor);
        // execute the real constructor on the new object
        ctor.apply(t, args);
        return t;
    }
    function declare(className, superclass, props) {
        ///<summary name="declare">Create a feature-rich constructor from compact notation.</summary>	
        /// <param  name="className" type= "String">The optional name of the constructor (loosely, a "class") stored in the "declaredClass" property in the created prototype.It will be used as a global name for a created constructor.</param>
        /// <param  name="superclass" type="Function|Function[]">May be null, a Function, or an Array of Functions. This argument specifies a list of bases (the left-most one is the most deepest base).</param>
        //	<param  name="props"	 type="Object">An object whose properties are copied to the created prototype. Add an instance-initialization function by making it a property</param>
        //		 
        //		
        // : 
        //		
        //		
        //		named "constructor".
        // returns: dojo/_base/declare.__DeclareCreatedObject
        //		New constructor function.
        // description:
        //		Create a constructor using a compact notation for inheritance and
        //		prototype extension.
        //
        //		Mixin ancestors provide a type of multiple inheritance.
        //		Prototypes of mixin ancestors are copied to the new class:
        //		changes to mixin prototypes will not affect classes to which
        //		they have been mixed in.
        //
        //		Ancestors can be compound classes created by this version of
        //		declare(). In complex cases all base classes are going to be
        //		linearized according to C3 MRO algorithm
        //		(see http://www.python.org/download/releases/2.3/mro/ for more
        //		details).
        //
        //		"className" is cached in "declaredClass" property of the new class,
        //		if it was supplied. The immediate super class will be cached in
        //		"superclass" property of the new class.
        //
        //		Methods in "props" will be copied and modified: "nom" property
        //		(the declared name of the method) will be added to all copied
        //		functions to help identify them for the internal machinery. Be
        //		very careful, while reusing methods: if you use the same
        //		function under different names, it can produce errors in some
        //		cases.
        //
        //		It is possible to use constructors created "manually" (without
        //		declare()) as bases. They will be called as usual during the
        //		creation of an instance, their methods will be chained, and even
        //		called by "this.inherited()".
        //
        //		Special property "-chains-" governs how to chain methods. It is
        //		a dictionary, which uses method names as keys, and hint strings
        //		as values. If a hint string is "after", this method will be
        //		called after methods of its base classes. If a hint string is
        //		"before", this method will be called before methods of its base
        //		classes.
        //
        //		If "constructor" is not mentioned in "-chains-" property, it will
        //		be chained using the legacy mode: using "after" chaining,
        //		calling preamble() method before each constructor, if available,
        //		and calling postscript() after all constructors were executed.
        //		If the hint is "after", it is chained as a regular method, but
        //		postscript() will be called after the chain of constructors.
        //		"constructor" cannot be chained "before", but it allows
        //		a special hint string: "manual", which means that constructors
        //		are not going to be chained in any way, and programmer will call
        //		them manually using this.inherited(). In the latter case
        //		postscript() will be called after the construction.
        //
        //		All chaining hints are "inherited" from base classes and
        //		potentially can be overridden. Be very careful when overriding
        //		hints! Make sure that all chained methods can work in a proposed
        //		manner of chaining.
        //
        //		Once a method was chained, it is impossible to unchain it. The
        //		only exception is "constructor". You don't need to define a
        //		method in order to supply a chaining hint.
        //
        //		If a method is chained, it cannot use this.inherited() because
        //		all other methods in the hierarchy will be called automatically.
        //
        //		Usually constructors and initializers of any kind are chained
        //		using "after" and destructors of any kind are chained as
        //		"before". Note that chaining assumes that chained methods do not
        //		return any value: any returned value will be discarded.
        //
        // example:
        //	|	declare("my.classes.bar", my.classes.foo, {
        //	|		// properties to be added to the class prototype
        //	|		someValue: 2,
        //	|		// initialization function
        //	|		constructor: function(){
        //	|			this.myComplicatedObject = new ReallyComplicatedObject();
        //	|		},
        //	|		// other functions
        //	|		someMethod: function(){
        //	|			doStuff();
        //	|		}
        //	|	});
        //
        // example:
        //	|	var MyBase = declare(null, {
        //	|		// constructor, properties, and methods go here
        //	|		// ...
        //	|	});
        //	|	var MyClass1 = declare(MyBase, {
        //	|		// constructor, properties, and methods go here
        //	|		// ...
        //	|	});
        //	|	var MyClass2 = declare(MyBase, {
        //	|		// constructor, properties, and methods go here
        //	|		// ...
        //	|	});
        //	|	var MyDiamond = declare([MyClass1, MyClass2], {
        //	|		// constructor, properties, and methods go here
        //	|		// ...
        //	|	});
        //
        // example:
        //	|	var F = function(){ console.log("raw constructor"); };
        //	|	F.prototype.method = function(){
        //	|		console.log("raw method");
        //	|	};
        //	|	var A = declare(F, {
        //	|		constructor: function(){
        //	|			console.log("A.constructor");
        //	|		},
        //	|		method: function(){
        //	|			console.log("before calling F.method...");
        //	|			this.inherited(arguments);
        //	|			console.log("...back in A");
        //	|		}
        //	|	});
        //	|	new A().method();
        //	|	// will print:
        //	|	// raw constructor
        //	|	// A.constructor
        //	|	// before calling F.method...
        //	|	// raw method
        //	|	// ...back in A
        //
        // example:
        //	|	var A = declare(null, {
        //	|		"-chains-": {
        //	|			destroy: "before"
        //	|		}
        //	|	});
        //	|	var B = declare(A, {
        //	|		constructor: function(){
        //	|			console.log("B.constructor");
        //	|		},
        //	|		destroy: function(){
        //	|			console.log("B.destroy");
        //	|		}
        //	|	});
        //	|	var C = declare(B, {
        //	|		constructor: function(){
        //	|			console.log("C.constructor");
        //	|		},
        //	|		destroy: function(){
        //	|			console.log("C.destroy");
        //	|		}
        //	|	});
        //	|	new C().destroy();
        //	|	// prints:
        //	|	// B.constructor
        //	|	// C.constructor
        //	|	// C.destroy
        //	|	// B.destroy
        //
        // example:
        //	|	var A = declare(null, {
        //	|		"-chains-": {
        //	|			constructor: "manual"
        //	|		}
        //	|	});
        //	|	var B = declare(A, {
        //	|		constructor: function(){
        //	|			// ...
        //	|			// call the base constructor with new parameters
        //	|			this.inherited(arguments, [1, 2, 3]);
        //	|			// ...
        //	|		}
        //	|	});
        //
        // example:
        //	|	var A = declare(null, {
        //	|		"-chains-": {
        //	|			m1: "before"
        //	|		},
        //	|		m1: function(){
        //	|			console.log("A.m1");
        //	|		},
        //	|		m2: function(){
        //	|			console.log("A.m2");
        //	|		}
        //	|	});
        //	|	var B = declare(A, {
        //	|		"-chains-": {
        //	|			m2: "after"
        //	|		},
        //	|		m1: function(){
        //	|			console.log("B.m1");
        //	|		},
        //	|		m2: function(){
        //	|			console.log("B.m2");
        //	|		}
        //	|	});
        //	|	var x = new B();
        //	|	x.m1();
        //	|	// prints:
        //	|	// B.m1
        //	|	// A.m1
        //	|	x.m2();
        //	|	// prints:
        //	|	// A.m2
        //	|	// B.m2
        // crack parameters
        if (typeof className != "string") {
            props = superclass;
            superclass = className;
            className = "";
        }
        props = props || {};
        var proto, i, t, ctor, name, bases, chains, mixins = 1, parents = superclass;
        // build a prototype
        if (opts.call(superclass) == "[object Array]") {
            // C3 MRO
            bases = c3mro(superclass, className);
            t = bases[0];
            mixins = bases.length - t;
            superclass = bases[mixins];
        }
        else {
            bases = [0];
            if (superclass) {
                if (opts.call(superclass) == "[object Function]") {
                    t = superclass._meta;
                    bases = bases.concat(t ? t.bases : superclass);
                }
                else {
                    err("base class is not a callable constructor.", className);
                }
            }
            else if (superclass !== null) {
                err("unknown base class. Did you use dojo.require to pull it in?", className);
            }
        }
        if (superclass) {
            for (i = mixins - 1;; --i) {
                proto = forceNew(superclass);
                if (!i) {
                    // stop if nothing to add (the last base)
                    break;
                }
                // mix in properties
                t = bases[i];
                (t._meta ? mixOwn : mix)(proto, t.prototype);
                // chain in new constructor
                ctor = new Function;
                ctor.superclass = superclass;
                ctor.prototype = proto;
                superclass = proto.constructor = ctor;
            }
        }
        else {
            proto = {};
        }
        // add all properties
        declare.safeMixin(proto, props);
        // add constructor
        t = props.constructor;
        if (t !== op.constructor) {
            t.nom = cname;
            proto.constructor = t;
        }
        // collect chains and flags
        for (i = mixins - 1; i; --i) { // intentional assignment
            t = bases[i]._meta;
            if (t && t.chains) {
                chains = mix(chains || {}, t.chains);
            }
        }
        if (proto["-chains-"]) {
            chains = mix(chains || {}, proto["-chains-"]);
        }
        // build ctor
        t = !chains || !chains.hasOwnProperty(cname);
        bases[0] = ctor = (chains && chains.constructor === "manual") ? simpleConstructor(bases) :
            (bases.length == 1 ? singleConstructor(props.constructor, t) : chainedConstructor(bases, t));
        // add meta information to the constructor
        ctor._meta = {
            bases: bases, hidden: props, chains: chains,
            parents: parents, ctor: props.constructor
        };
        ctor.superclass = superclass && superclass.prototype;
        ctor.extend = extend;
        ctor.createSubclass = createSubclass;
        ctor.prototype = proto;
        proto.constructor = ctor;
        // add "standard" methods to the prototype
        proto.getInherited = getInherited;
        proto.isInstanceOf = isInstanceOf;
        proto.inherited = inheritedImpl;
        proto.__inherited = inherited;
        // add name if specified
        if (className) {
            proto.declaredClass = className;
            lang.setObject(className, ctor);
        }
        // build chains and add them to the prototype
        if (chains) {
            for (name in chains) {
                if (proto[name] && typeof chains[name] == "string" && name != cname) {
                    t = proto[name] = chain(name, bases, chains[name] === "after");
                    t.nom = name;
                }
            }
        }
        // chained methods do not return values
        // no need to chain "invisible" functions
        return ctor; // Function
    }
    /*=====
    declare.__DeclareCreatedObject = {
        // summary:
        //		dojo/_base/declare() returns a constructor `C`.   `new C()` returns an Object with the following
        //		methods, in addition to the methods and properties specified via the arguments passed to declare().

        inherited: function(name, args, newArgs){
            // summary:
            //		Calls a super method.
            // name: String?
            //		The optional method name. Should be the same as the caller's
            //		name. Usually "name" is specified in complex dynamic cases, when
            //		the calling method was dynamically added, undecorated by
            //		declare(), and it cannot be determined.
            // args: Arguments
            //		The caller supply this argument, which should be the original
            //		"arguments".
            // newArgs: Object?
            //		If "true", the found function will be returned without
            //		executing it.
            //		If Array, it will be used to call a super method. Otherwise
            //		"args" will be used.
            // returns:
            //		Whatever is returned by a super method, or a super method itself,
            //		if "true" was specified as newArgs.
            // description:
            //		This method is used inside method of classes produced with
            //		declare() to call a super method (next in the chain). It is
            //		used for manually controlled chaining. Consider using the regular
            //		chaining, because it is faster. Use "this.inherited()" only in
            //		complex cases.
            //
            //		This method cannot me called from automatically chained
            //		constructors including the case of a special (legacy)
            //		constructor chaining. It cannot be called from chained methods.
            //
            //		If "this.inherited()" cannot find the next-in-chain method, it
            //		does nothing and returns "undefined". The last method in chain
            //		can be a default method implemented in Object, which will be
            //		called last.
            //
            //		If "name" is specified, it is assumed that the method that
            //		received "args" is the parent method for this call. It is looked
            //		up in the chain list and if it is found the next-in-chain method
            //		is called. If it is not found, the first-in-chain method is
            //		called.
            //
            //		If "name" is not specified, it will be derived from the calling
            //		method (using a methoid property "nom").
            //
            // example:
            //	|	var B = declare(A, {
            //	|		method1: function(a, b, c){
            //	|			this.inherited(arguments);
            //	|		},
            //	|		method2: function(a, b){
            //	|			return this.inherited(arguments, [a + b]);
            //	|		}
            //	|	});
            //	|	// next method is not in the chain list because it is added
            //	|	// manually after the class was created.
            //	|	B.prototype.method3 = function(){
            //	|		console.log("This is a dynamically-added method.");
            //	|		this.inherited("method3", arguments);
            //	|	};
            // example:
            //	|	var B = declare(A, {
            //	|		method: function(a, b){
            //	|			var super = this.inherited(arguments, true);
            //	|			// ...
            //	|			if(!super){
            //	|				console.log("there is no super method");
            //	|				return 0;
            //	|			}
            //	|			return super.apply(this, arguments);
            //	|		}
            //	|	});
            return	{};	// Object
        },

        getInherited: function(name, args){
            // summary:
            //		Returns a super method.
            // name: String?
            //		The optional method name. Should be the same as the caller's
            //		name. Usually "name" is specified in complex dynamic cases, when
            //		the calling method was dynamically added, undecorated by
            //		declare(), and it cannot be determined.
            // args: Arguments
            //		The caller supply this argument, which should be the original
            //		"arguments".
            // returns:
            //		Returns a super method (Function) or "undefined".
            // description:
            //		This method is a convenience method for "this.inherited()".
            //		It uses the same algorithm but instead of executing a super
            //		method, it returns it, or "undefined" if not found.
            //
            // example:
            //	|	var B = declare(A, {
            //	|		method: function(a, b){
            //	|			var super = this.getInherited(arguments);
            //	|			// ...
            //	|			if(!super){
            //	|				console.log("there is no super method");
            //	|				return 0;
            //	|			}
            //	|			return super.apply(this, arguments);
            //	|		}
            //	|	});
            return	{};	// Object
        },

        isInstanceOf: function(cls){
            // summary:
            //		Checks the inheritance chain to see if it is inherited from this
            //		class.
            // cls: Function
            //		Class constructor.
            // returns:
            //		"true", if this object is inherited from this class, "false"
            //		otherwise.
            // description:
            //		This method is used with instances of classes produced with
            //		declare() to determine of they support a certain interface or
            //		not. It models "instanceof" operator.
            //
            // example:
            //	|	var A = declare(null, {
            //	|		// constructor, properties, and methods go here
            //	|		// ...
            //	|	});
            //	|	var B = declare(null, {
            //	|		// constructor, properties, and methods go here
            //	|		// ...
            //	|	});
            //	|	var C = declare([A, B], {
            //	|		// constructor, properties, and methods go here
            //	|		// ...
            //	|	});
            //	|	var D = declare(A, {
            //	|		// constructor, properties, and methods go here
            //	|		// ...
            //	|	});
            //	|
            //	|	var a = new A(), b = new B(), c = new C(), d = new D();
            //	|
            //	|	console.log(a.isInstanceOf(A)); // true
            //	|	console.log(b.isInstanceOf(A)); // false
            //	|	console.log(c.isInstanceOf(A)); // true
            //	|	console.log(d.isInstanceOf(A)); // true
            //	|
            //	|	console.log(a.isInstanceOf(B)); // false
            //	|	console.log(b.isInstanceOf(B)); // true
            //	|	console.log(c.isInstanceOf(B)); // true
            //	|	console.log(d.isInstanceOf(B)); // false
            //	|
            //	|	console.log(a.isInstanceOf(C)); // false
            //	|	console.log(b.isInstanceOf(C)); // false
            //	|	console.log(c.isInstanceOf(C)); // true
            //	|	console.log(d.isInstanceOf(C)); // false
            //	|
            //	|	console.log(a.isInstanceOf(D)); // false
            //	|	console.log(b.isInstanceOf(D)); // false
            //	|	console.log(c.isInstanceOf(D)); // false
            //	|	console.log(d.isInstanceOf(D)); // true
            return	{};	// Object
        },

        extend: function(source){
            // summary:
            //		Adds all properties and methods of source to constructor's
            //		prototype, making them available to all instances created with
            //		constructor. This method is specific to constructors created with
            //		declare().
            // source: Object
            //		Source object which properties are going to be copied to the
            //		constructor's prototype.
            // description:
            //		Adds source properties to the constructor's prototype. It can
            //		override existing properties.
            //
            //		This method is similar to dojo.extend function, but it is specific
            //		to constructors produced by declare(). It is implemented
            //		using dojo.safeMixin, and it skips a constructor property,
            //		and properly decorates copied functions.
            //
            // example:
            //	|	var A = declare(null, {
            //	|		m1: function(){},
            //	|		s1: "Popokatepetl"
            //	|	});
            //	|	A.extend({
            //	|		m1: function(){},
            //	|		m2: function(){},
            //	|		f1: true,
            //	|		d1: 42
            //	|	});
        },

        createSubclass: function(mixins, props){
            // summary:
            //		Create a subclass of the declared class from a list of base classes.
            // mixins: Function[]
            //		Specifies a list of bases (the left-most one is the most deepest
            //		base).
            // props: Object?
            //		An optional object whose properties are copied to the created prototype.
            // returns: dojo/_base/declare.__DeclareCreatedObject
            //		New constructor function.
            // description:
            //		Create a constructor using a compact notation for inheritance and
            //		prototype extension.
            //
            //		Mixin ancestors provide a type of multiple inheritance.
            //		Prototypes of mixin ancestors are copied to the new class:
            //		changes to mixin prototypes will not affect classes to which
            //		they have been mixed in.
            //
            // example:
            //	|	var A = declare(null, {
            //	|		m1: function(){},
            //	|		s1: "bar"
            //	|	});
            //	|	var B = declare(null, {
            //	|		m2: function(){},
            //	|		s2: "foo"
            //	|	});
            //	|	var C = declare(null, {
            //	|	});
            //	|	var D1 = A.createSubclass([B, C], {
            //	|		m1: function(){},
            //	|		d1: 42
            //	|	});
            //	|	var d1 = new D1();
            //	|
            //	|	// this is equivalent to:
            //	|	var D2 = declare([A, B, C], {
            //	|		m1: function(){},
            //	|		d1: 42
            //	|	});
            //	|	var d2 = new D2();
        }
    };
    =====*/
    //// For back-compat, remove for 2.0
    declare.safeMixin = safeMixin;
    //dojo.declare = declare;
    cssOrm.inherit = cssOrm.inherit || declare;
    return declare;
});

define("RxmLang", [], function () {
    // module:
    //		dojo/_base/lang
    // Helper methods
    var _extraNames = false ?
        "hasOwnProperty.valueOf.isPrototypeOf.propertyIsEnumerable.toLocaleString.toString.constructor".split(".") : [], _extraLen = _extraNames.length, getProp = function (/*Array*/ parts, /*Boolean*/ create, /*Object*/ context) {
        if (!context) {
            //console.info("context参数为null");
            //if(parts[0] && dojo.scopeMap[parts[0]]) {
            //	// Voodoo code from the old days where "dojo" or "dijit" maps to some special object
            //	// rather than just window.dojo
            //	context = dojo.scopeMap[parts.shift()][1];
            //}else{
            //	context = dojo.global;
            //}
            context = window;
        }
        try {
            for (var i = 0; i < parts.length; i++) {
                var p = parts[i];
                if (!(p in context)) {
                    if (create) {
                        context[p] = {};
                    }
                    else {
                        return; // return undefined
                    }
                }
                context = context[p];
            }
            return context; // mixed
        }
        catch (e) {
            // "p in context" throws an exception when context is a number, boolean, etc. rather than an object,
            // so in that corner case just return undefined (by having no return statement)
        }
    }, opts = Object.prototype.toString, efficient = function (obj, offset, startWith) {
        return (startWith || []).concat(Array.prototype.slice.call(obj, offset || 0));
    }, _pattern = /\{([^\}]+)\}/g;
    // Module export
    var lang = {
        // summary:
        //		This module defines Javascript language extensions.
        // _extraNames: String[]
        //		Lists property names that must be explicitly processed during for-in iteration
        //		in environments that have has("bug-for-in-skips-shadowed") true.
        _extraNames: _extraNames,
        _mixin: function (dest, source, copyFunc) {
            // summary:
            //		Copies/adds all properties of source to dest; returns dest.
            // dest: Object
            //		The object to which to copy/add all properties contained in source.
            // source: Object
            //		The object from which to draw all properties to copy into dest.
            // copyFunc: Function?
            //		The process used to copy/add a property in source; defaults to the Javascript assignment operator.
            // returns:
            //		dest, as modified
            // description:
            //		All properties, including functions (sometimes termed "methods"), excluding any non-standard extensions
            //		found in Object.prototype, are copied/added to dest. Copying/adding each particular property is
            //		delegated to copyFunc (if any); copyFunc defaults to the Javascript assignment operator if not provided.
            //		Notice that by default, _mixin executes a so-called "shallow copy" and aggregate types are copied/added by reference.
            var name, s, i, empty = {};
            for (name in source) {
                // the (!(name in empty) || empty[name] !== s) condition avoids copying properties in "source"
                // inherited from Object.prototype.	 For example, if dest has a custom toString() method,
                // don't overwrite it with the toString() method that source inherited from Object.prototype
                s = source[name];
                if (!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))) {
                    dest[name] = copyFunc ? copyFunc(s) : s;
                }
            }
            return dest; // Object
        },
        mixin: function (dest, sources) {
            ///<summary> Copies/adds all properties of one or more sources to dest; returns dest.</summary>	
            ///<param  name="dest" type="Object">The object to which to copy/add all properties contained in source. If dest is falsy, then a new object is manufactured before copying/adding properties begins.</param>
            ///<param  name="sources" type="Object...">One of more objects from which to draw all properties to copy into dest. sources are processed left-to-right and if more than one of these objects contain the same property name, the right-most value "wins".</param>	
            ///<returns type= "Object">
            //		dest, as modified
            // description:
            //		All properties, including functions (sometimes termed "methods"), excluding any non-standard extensions
            //		found in Object.prototype, are copied/added from sources to dest. sources are processed left to right.
            //		The Javascript assignment operator is used to copy/add each property; therefore, by default, mixin
            //		executes a so-called "shallow copy" and aggregate types are copied/added by reference.
            // example:
            //		make a shallow copy of an object
            //	|	var copy = lang.mixin({}, source);
            // example:
            //		many class constructors often take an object which specifies
            //		values to be configured on the object. In this case, it is
            //		often simplest to call `lang.mixin` on the `this` object:
            //	|	declare("acme.Base", null, {
            //	|		constructor: function(properties){
            //	|			// property configuration:
            //	|			lang.mixin(this, properties);
            //	|
            //	|			console.log(this.quip);
            //	|			//	...
            //	|		},
            //	|		quip: "I wasn't born yesterday, you know - I've seen movies.",
            //	|		// ...
            //	|	});
            //	|
            //	|	// create an instance of the class and configure it
            //	|	var b = new acme.Base({quip: "That's what it does!" });
            // example:
            //		copy in properties from multiple objects
            //	|	var flattened = lang.mixin(
            //	|		{
            //	|			name: "Frylock",
            //	|			braces: true
            //	|		},
            //	|		{
            //	|			name: "Carl Brutanananadilewski"
            //	|		}
            //	|	);
            //	|
            //	|	// will print "Carl Brutanananadilewski"
            //	|	console.log(flattened.name);
            //	|	// will print "true"
            //	|	console.log(flattened.braces);
            if (!dest) {
                dest = {};
            }
            for (var i = 1, l = arguments.length; i < l; i++) {
                lang._mixin(dest, arguments[i]);
            }
            return dest; // Object
        },
        setObject: function (name, value, context) {
            // summary:
            //		Set a property from a dot-separated string, such as "A.B.C"
            // description:
            //		Useful for longer api chains where you have to test each object in
            //		the chain, or when you have an object reference in string format.
            //		Objects are created as needed along `path`. Returns the passed
            //		value if setting is successful or `undefined` if not.
            // name: String
            //		Path to a property, in the form "A.B.C".
            // value: anything
            //		value or object to place at location given by name
            // context: Object?
            //		Optional. Object to use as root of path. Defaults to
            //		`dojo.global`.
            // example:
            //		set the value of `foo.bar.baz`, regardless of whether
            //		intermediate objects already exist:
            //	| lang.setObject("foo.bar.baz", value);
            // example:
            //		without `lang.setObject`, we often see code like this:
            //	| // ensure that intermediate objects are available
            //	| if(!obj["parent"]){ obj.parent = {}; }
            //	| if(!obj.parent["child"]){ obj.parent.child = {}; }
            //	| // now we can safely set the property
            //	| obj.parent.child.prop = "some value";
            //		whereas with `lang.setObject`, we can shorten that to:
            //	| lang.setObject("parent.child.prop", "some value", obj);
            var parts = name.split("."), p = parts.pop(), obj = getProp(parts, true, context);
            return obj && p ? (obj[p] = value) : undefined; // Object
        },
        getObject: function (name, create, context) {
            // summary:
            //		Get a property from a dot-separated string, such as "A.B.C"
            // description:
            //		Useful for longer api chains where you have to test each object in
            //		the chain, or when you have an object reference in string format.
            // name: String
            //		Path to an property, in the form "A.B.C".
            // create: Boolean?
            //		Optional. Defaults to `false`. If `true`, Objects will be
            //		created at any point along the 'path' that is undefined.
            // context: Object?
            //		Optional. Object to use as root of path. Defaults to
            //		'dojo.global'. Null may be passed.
            return getProp(name ? name.split(".") : [], create, context); // Object
        },
        exists: function (name, obj) {
            // summary:
            //		determine if an object supports a given method
            // description:
            //		useful for longer api chains where you have to test each object in
            //		the chain. Useful for object and method detection.
            // name: String
            //		Path to an object, in the form "A.B.C".
            // obj: Object?
            //		Object to use as root of path. Defaults to
            //		'dojo.global'. Null may be passed.
            // example:
            //	| // define an object
            //	| var foo = {
            //	|		bar: { }
            //	| };
            //	|
            //	| // search the global scope
            //	| lang.exists("foo.bar"); // true
            //	| lang.exists("foo.bar.baz"); // false
            //	|
            //	| // search from a particular scope
            //	| lang.exists("bar", foo); // true
            //	| lang.exists("bar.baz", foo); // false
            return lang.getObject(name, false, obj) !== undefined; // Boolean
        },
        // Crockford (ish) functions
        isString: function (it) {
            // summary:
            //		Return true if it is a String
            // it: anything
            //		Item to test.
            return (typeof it == "string" || it instanceof String); // Boolean
        },
        isArray: function (it) {
            // summary:
            //		Return true if it is an Array.
            //		Does not work on Arrays created in other windows.
            // it: anything
            //		Item to test.
            return it && (it instanceof Array || typeof it == "array"); // Boolean
        },
        isFunction: function (it) {
            // summary:
            //		Return true if it is a Function
            // it: anything
            //		Item to test.
            return opts.call(it) === "[object Function]";
        },
        isObject: function (it) {
            // summary:
            //		Returns true if it is a JavaScript object (or an Array, a Function
            //		or null)
            // it: anything
            //		Item to test.
            return it !== undefined &&
                (it === null || typeof it == "object" || lang.isArray(it) || lang.isFunction(it)); // Boolean
        },
        isArrayLike: function (it) {
            // summary:
            //		similar to isArray() but more permissive
            // it: anything
            //		Item to test.
            // returns:
            //		If it walks like a duck and quacks like a duck, return `true`
            // description:
            //		Doesn't strongly test for "arrayness".  Instead, settles for "isn't
            //		a string or number and has a length property". Arguments objects
            //		and DOM collections will return true when passed to
            //		isArrayLike(), but will return false when passed to
            //		isArray().
            return it && it !== undefined && // Boolean
                // keep out built-in constructors (Number, String, ...) which have length
                // properties
                !lang.isString(it) && !lang.isFunction(it) &&
                !(it.tagName && it.tagName.toLowerCase() == 'form') &&
                (lang.isArray(it) || isFinite(it.length));
        },
        isAlien: function (it) {
            // summary:
            //		Returns true if it is a built-in function or some other kind of
            //		oddball that *should* report as a function but doesn't
            return it && !lang.isFunction(it) && /\{\s*\[native code\]\s*\}/.test(String(it)); // Boolean
        },
        extend: function (ctor, props) {
            // summary:
            //		Adds all properties and methods of props to constructor's
            //		prototype, making them available to all instances created with
            //		constructor.
            // ctor: Object
            //		Target constructor to extend.
            // props: Object
            //		One or more objects to mix into ctor.prototype
            for (var i = 1, l = arguments.length; i < l; i++) {
                lang._mixin(ctor.prototype, arguments[i]);
            }
            return ctor; // Object
        },
        _hitchArgs: function (scope, method) {
            var pre = lang._toArray(arguments, 2);
            var named = lang.isString(method);
            return function () {
                // arrayify arguments
                var args = lang._toArray(arguments);
                // locate our method
                var f = named ? (scope || window)[method] : method;
                // invoke with collected args
                return f && f.apply(scope || this, pre.concat(args)); // mixed
            }; // Function
        },
        hitch: function (method, scope) {
            var it = scope || window;
            if ((typeof method == "string" || method instanceof String)) {
                if (!it[method]) {
                    throw (['lang.hitch: scope["', method, '"] is null (scope="', it, '")'].join(''));
                }
                return function () { return it[method].apply(it, arguments || []); }; // Function
            }
            return !it ? method : function () { return method.apply(it, arguments || []); }; // Function
        },
        delegate: (function () {
            // boodman/crockford delegation w/ cornford optimization
            function TMP() { }
            return function (obj, props) {
                TMP.prototype = obj;
                var tmp = new TMP();
                TMP.prototype = null;
                if (props) {
                    lang._mixin(tmp, props);
                }
                return tmp; // Object
            };
        })(),
        /*=====
        delegate: function(obj, props){
            // summary:
            //		Returns a new object which "looks" to obj for properties which it
            //		does not have a value for. Optionally takes a bag of properties to
            //		seed the returned object with initially.
            // description:
            //		This is a small implementation of the Boodman/Crockford delegation
            //		pattern in JavaScript. An intermediate object constructor mediates
            //		the prototype chain for the returned object, using it to delegate
            //		down to obj for property lookup when object-local lookup fails.
            //		This can be thought of similarly to ES4's "wrap", save that it does
            //		not act on types but rather on pure objects.
            // obj: Object
            //		The object to delegate to for properties not found directly on the
            //		return object or in props.
            // props: Object...
            //		an object containing properties to assign to the returned object
            // returns:
            //		an Object of anonymous type
            // example:
            //	|	var foo = { bar: "baz" };
            //	|	var thinger = lang.delegate(foo, { thud: "xyzzy"});
            //	|	thinger.bar == "baz"; // delegated to foo
            //	|	foo.thud == undefined; // by definition
            //	|	thinger.thud == "xyzzy"; // mixed in from props
            //	|	foo.bar = "thonk";
            //	|	thinger.bar == "thonk"; // still delegated to foo's bar
        },
        =====*/
        _toArray: true ?
            (function () {
                function slow(obj, offset, startWith) {
                    var arr = startWith || [];
                    for (var x = offset || 0; x < obj.length; x++) {
                        arr.push(obj[x]);
                    }
                    return arr;
                }
                return function (obj) {
                    return ((obj.item) ? slow : efficient).apply(this, arguments);
                };
            })() : efficient,
        /*=====
         _toArray: function(obj, offset, startWith){
             // summary:
             //		Converts an array-like object (i.e. arguments, DOMCollection) to an
             //		array. Returns a new Array with the elements of obj.
             // obj: Object
             //		the object to "arrayify". We expect the object to have, at a
             //		minimum, a length property which corresponds to integer-indexed
             //		properties.
             // offset: Number?
             //		the location in obj to start iterating from. Defaults to 0.
             //		Optional.
             // startWith: Array?
             //		An array to pack with the properties of obj. If provided,
             //		properties in obj are appended at the end of startWith and
             //		startWith is the returned array.
         },
         =====*/
        partial: function (/*Function|String*/ method /*, ...*/) {
            // summary:
            //		similar to hitch() except that the scope object is left to be
            //		whatever the execution context eventually becomes.
            // description:
            //		Calling lang.partial is the functional equivalent of calling:
            //		|	lang.hitch(null, funcName, ...);
            // method:
            //		The function to "wrap"
            var arr = [null];
            return lang.hitch.apply(arr.concat(lang._toArray(arguments, window))); // Function
        },
        clone: function (/*anything*/ src) {
            // summary:
            //		Clones objects (including DOM nodes) and all children.
            //		Warning: do not clone cyclic structures.
            // src:
            //		The object to clone
            if (!src || typeof src != "object" || lang.isFunction(src)) {
                // null, undefined, any non-object, or function
                return src; // anything
            }
            if (src.nodeType && "cloneNode" in src) {
                // DOM Node
                return src.cloneNode(true); // Node
            }
            if (src instanceof Date) {
                // Date
                return new Date(src.getTime()); // Date
            }
            if (src instanceof RegExp) {
                // RegExp
                return new RegExp(src); // RegExp
            }
            var r, i, l;
            if (lang.isArray(src)) {
                // array
                r = [];
                for (i = 0, l = src.length; i < l; ++i) {
                    if (i in src) {
                        r.push(lang.clone(src[i]));
                    }
                }
                // we don't clone functions for performance reasons
                //		}else if(d.isFunction(src)){
                //			// function
                //			r = function(){ return src.apply(this, arguments); };
            }
            else {
                // generic objects
                r = src.constructor ? new src.constructor() : {};
            }
            return lang._mixin(r, src, lang.clone);
        },
        trim: String.prototype.trim ?
            function (str) { return str.trim(); } :
            function (str) { return str.replace(/^\s\s*/, '').replace(/\s\s*$/, ''); },
        /*=====
         trim: function(str){
             // summary:
             //		Trims whitespace from both sides of the string
             // str: String
             //		String to be trimmed
             // returns: String
             //		Returns the trimmed string
             // description:
             //		This version of trim() was selected for inclusion into the base due
             //		to its compact size and relatively good performance
             //		(see [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript)
             //		Uses String.prototype.trim instead, if available.
             //		The fastest but longest version of this function is located at
             //		lang.string.trim()
         },
         =====*/
        replace: function (tmpl, map, pattern) {
            // summary:
            //		Performs parameterized substitutions on a string. Throws an
            //		exception if any parameter is unmatched.
            // tmpl: String
            //		String to be used as a template.
            // map: Object|Function
            //		If an object, it is used as a dictionary to look up substitutions.
            //		If a function, it is called for every substitution with following parameters:
            //		a whole match, a name, an offset, and the whole template
            //		string (see https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/String/replace
            //		for more details).
            // pattern: RegEx?
            //		Optional regular expression objects that overrides the default pattern.
            //		Must be global and match one item. The default is: /\{([^\}]+)\}/g,
            //		which matches patterns like that: "{xxx}", where "xxx" is any sequence
            //		of characters, which doesn't include "}".
            // returns: String
            //		Returns the substituted string.
            // example:
            //	|	// uses a dictionary for substitutions:
            //	|	lang.replace("Hello, {name.first} {name.last} AKA {nick}!",
            //	|		{
            //	|			nick: "Bob",
            //	|			name: {
            //	|				first:	"Robert",
            //	|				middle: "X",
            //	|				last:		"Cringely"
            //	|			}
            //	|		});
            //	|	// returns: Hello, Robert Cringely AKA Bob!
            // example:
            //	|	// uses an array for substitutions:
            //	|	lang.replace("Hello, {0} {2}!",
            //	|		["Robert", "X", "Cringely"]);
            //	|	// returns: Hello, Robert Cringely!
            // example:
            //	|	// uses a function for substitutions:
            //	|	function sum(a){
            //	|		var t = 0;
            //	|		arrayforEach(a, function(x){ t += x; });
            //	|		return t;
            //	|	}
            //	|	lang.replace(
            //	|		"{count} payments averaging {avg} USD per payment.",
            //	|		lang.hitch(
            //	|			{ payments: [11, 16, 12] },
            //	|			function(_, key){
            //	|				switch(key){
            //	|					case "count": return this.payments.length;
            //	|					case "min":		return Math.min.apply(Math, this.payments);
            //	|					case "max":		return Math.max.apply(Math, this.payments);
            //	|					case "sum":		return sum(this.payments);
            //	|					case "avg":		return sum(this.payments) / this.payments.length;
            //	|				}
            //	|			}
            //	|		)
            //	|	);
            //	|	// prints: 3 payments averaging 13 USD per payment.
            // example:
            //	|	// uses an alternative PHP-like pattern for substitutions:
            //	|	lang.replace("Hello, ${0} ${2}!",
            //	|		["Robert", "X", "Cringely"], /\$\{([^\}]+)\}/g);
            //	|	// returns: Hello, Robert Cringely!
            return tmpl.replace(pattern || _pattern, lang.isFunction(map) ?
                map : function (_, k) { return lang.getObject(k, false, map); });
        },
        opType: {
            //新建、添加
            added: "new",
            //删除
            deleted: "deleted",
            //修改
            modified: "modified"
        }
    };
    return lang;
});

define("RxmWidgetBase", ["RxmLang"], function (lang) {
    ///<summary></summary>
    ///<param name="lang" value="PdwebLang"></param>
    ///<param name="declare" value="PdwebDeclare"></param>
    function widgetBase() {
    }
    widgetBase.prototype.On = function (selector, eventName, eventFunction, functionScope, data) {
        ///<summary>绑定eventName事件函数（eventfunction）向selector 指定的对象，并指定funttionscope作为函数this，</summary>
        ///<param name="selector" type="String"  > 选择器</param>
        ///<param name="eventName" type="String">事件名称，参见jquery事件</param>
        ///<param name="eventfunction" type="Function">事件回教函数</param>
        ///<param name="functionScope" type="Object">事件this对象，undefined时，原生的this</param>
        var sco = functionScope;
        if (typeof functionScope == "undefined") {
            sco = this;
        }
        $(selector).on(eventName, data, lang.hitch(sco, eventFunction));
    };
    widgetBase.prototype.hitch = function (callbackFunction, thisObj) {
        ///<summary>钩子函数</summary>
        if (typeof thisObj === "undefined")
            thisObj = this;
        return lang.hitch(thisObj, callbackFunction);
    };
    return widgetBase;
});

define('RxmInputSearch', [require.rxm.PageBase, require.rxm.BufferGrid], function (PageBase, Grid) {
    var ClsFactory = function (config) {
        var $searchWrap = $("#" + config.id);
        //search.html中定义
        var _searchbarId = "searchbar";
        var _gridId = "search_gird";
        var _hotId = "hot_gird";
        //自定义属性
        var _searchUrl = $searchWrap.attr("rxmsearchurl");
        var _hotUrl = $searchWrap.attr("rxmhoturl");
        var _gridData = $searchWrap.attr('rxmgriddata');
        var _hotData = $searchWrap.attr('rxmhotdata');
        // var _gridData = typeof $searchWrap.attr('rxmgriddata')=='string'?JSON.parse(($searchWrap.attr('rxmgriddata').replace(/\'/g,'"'))):[]
        // var _hotData = typeof $searchWrap.attr('rxmhotdata')=='string'?JSON.parse(($searchWrap.attr('rxmhotdata').replace(/\'/g,'"'))):[]
        var _searchField = $searchWrap.attr("rxmsearchfield");
        var _hotSearchField = $searchWrap.attr("rxmhotsearchfield");
        var _title = $searchWrap.attr("rxmtitle");
        var _multi = typeof $searchWrap.attr('rxmmulti') != 'undefined';
        //转化form radio的值,对象转化为布尔
        function getRadioValue(arg) {
            var radioValue = false;
            if (typeof arg == "boolean") {
                radioValue = arg;
            }
            else if (typeof arg == "string") {
                radioValue = (arg == "true");
            }
            return radioValue;
        }
        //转化显示字段格式
        function getData(arg) {
            var datas = [];
            var strs = new Array();
            if (!!arg) {
                arg = arg.trim();
                if (arg.indexOf(",") != -1) {
                    strs = arg.split(",");
                }
                else {
                    strs.push(arg);
                }
                for (i = 0; i < strs.length; i++) {
                    var data = {
                        "field": strs[i]
                    };
                    datas.push(data);
                }
            }
            return datas;
        }
        var _init = function (the) {
            $searchWrap.tap(function () {
                var ddd = {
                    id: _searchbarId,
                    searchGrid: {
                        /**grid id */
                        gridId: _gridId,
                        /**gird url */
                        searchUrl: _searchUrl,
                        /** gird显示数据 */
                        gridData: getData(_gridData),
                        /**搜索字段 */
                        searchField: _searchField,
                    },
                    hotGrid: {
                        /**热词grid id */
                        hotId: _hotId,
                        /**热词url */
                        hotUrl: _hotUrl,
                        /**热词显示数据 */
                        hotData: getData(_hotData),
                        /**热词搜索字段 */
                        hotSearchField: _hotSearchField,
                    },
                    title: _title,
                    multi: _multi,
                    afterClose: function (evt, args) {
                        var showData = [];
                        if (!args.data) {
                            $.each(args, function (index, obj) {
                                showData = showData.concat(obj);
                            });
                        }
                        // var grid = {
                        //     id: "showData",
                        //     layout: _gridData,
                        //     data: showData
                        // };
                        // var dataGrid = new Grid(grid);
                        // dataGrid.createRow = the.createRow
                        // dataGrid.reload();
                        $searchWrap.trigger("SearchSelected", {
                            selected: showData
                        });
                    }
                };
                PageBase.rxmSearch(ddd /**, slidebar*/);
            });
        };
        var RxmInputSearch = function () {
            // _init(this);
        };
        RxmInputSearch.prototype.init = function () {
            _init(this);
        };
        RxmInputSearch.prototype.bindSearchSelected = function (arg, scope) {
            // ///<param  name="arg"  type="vo.orm.bindMsg.arg"></param>
            // if (typeof arg == "boolean" || typeof arg == "undefined") {
            //     arg = {
            //         fn: this._onFormValueChanged,
            //     };
            //     scope = this;
            // }
            var the = this;
            if ($.isExist(scope)) {
                the = scope;
            }
            if (!!arg.callback) {
                arg.fn = arg.callback;
            }
            $searchWrap.on("SearchSelected", arg.data, $.proxy(arg.fn, the), arg.one);
        };
        RxmInputSearch.prototype.createRow = function (grid, row, $tr) {
            //生成$tr对象 
            $tdIcon = $('<td class="rxm-td-icon" style="vertical-align:middle;"></td>');
            $IconDiv = $('<div  style="vertical-align:middle;"></div>');
            $td = $('<td></td>');
            $tdCheck = $('<td style="display:none;" class="fix rxm-td-checkbox"></td>');
            tdSpan = "<span class='rxm-col-value'>" + row.msgContent + "</span></br>";
            $td.append(tdSpan + "<span style='font-size: 10px;color: gray;'>" + row.msgTitle + "</span>");
            $tr.append($td);
            //$tr添加内容列
            $tr.append($td);
            // //$tr添加checkbox列  默认此列为隐藏状态 长按才会显示
            // $tdCheck.append('<input class="rxm-multi-check" type="checkbox">');
            // $tr.append($tdCheck);
            return $tr;
        };
        //设置搜索url
        RxmInputSearch.prototype.attrSearchUrl = function (arg) {
            if (typeof arg != "undefined") {
                $searchWrap.attr("rxmsearchurl", arg);
            }
            return $searchWrap.attr("rxmsearchurl");
        };
        //设置热词url
        RxmInputSearch.prototype.attrHotUrl = function (arg) {
            if (typeof arg != "undefined") {
                $searchWrap.attr("rxmhoturl", arg);
            }
            return $searchWrap.attr("rxmhoturl");
        };
        //设置搜索表格显示内容
        RxmInputSearch.prototype.attrGridData = function (arg) {
            if (typeof arg != "undefined") {
                $searchWrap.attr("rxmgriddata", arg);
            }
            return $searchWrap.attr("rxmgriddata");
        };
        //设置热词表格显示内容
        RxmInputSearch.prototype.attrHotData = function (arg) {
            if (typeof arg != "undefined") {
                $searchWrap.attr("rxmhotdata", arg);
            }
            return $searchWrap.attr("rxmhotdata");
        };
        //设置搜索表格搜索字段
        RxmInputSearch.prototype.attrSearchField = function (arg) {
            if (typeof arg != "undefined") {
                $searchWrap.attr("rxmsearchfield", arg);
            }
            return $searchWrap.attr("rxmsearchfield");
        };
        //设置热词表格搜索字段
        RxmInputSearch.prototype.attrHotSearchField = function (arg) {
            if (typeof arg != "undefined") {
                $searchWrap.attr("rxmhotsearchfield", arg);
            }
            return $searchWrap.attr("rxmhotsearchfield");
        };
        //设置是否多选
        RxmInputSearch.prototype.attrRxmmulti = function (arg) {
            if (typeof arg != "undefined") {
                arg = getRadioValue(arg);
                if (arg) {
                    $searchWrap.attr('rxmmulti', 'rxmmulti');
                }
                else {
                    $searchWrap.removeAttr('rxmmulti');
                }
            }
            return typeof $searchWrap.attr('rxmmulti') != 'undefined';
        };
        //设置搜索标题
        RxmInputSearch.prototype.attrTitle = function (arg) {
            if (typeof arg != "undefined") {
                $searchWrap.attr("rxmtitle", arg);
            }
            return $searchWrap.attr("rxmtitle");
        };
        //设置搜索表格每页显示数据条数
        RxmInputSearch.prototype.attrPageSize = function (arg) {
            if (typeof arg != "undefined") {
                $searchWrap.attr("rxmpagesize", arg);
            }
            return $searchWrap.attr("rxmpagesize");
        };
        //设置热词表格每页显示数据条数
        RxmInputSearch.prototype.attrHotPageSize = function (arg) {
            if (typeof arg != "undefined") {
                $searchWrap.attr("rxmhotpagesize", arg);
            }
            return $searchWrap.attr("rxmhotpagesize");
        };
        var ret = new RxmInputSearch(config);
        require(require.rxm.PageBase).bindPageReady({ callback: $.proxy(ret.init, ret), one: false });
        return ret;
    };
    return ClsFactory;
});

/**
 * @name  高级搜索
 * @author  hcx 2018-05-29 13:42:45
 */
define('RxmSearchGrid', [
    require.rxm.Search, require.rxm.MobileGrid, require.rxm.PageBase
], /**
   * @param {rxm.page} PageBase
   */ function (rxmSearch, Grid, PageBase) {
    /**
     *
     * @param {rxm.search.config} config
     */
    var ClsFactory = function (config) {
        //搜索条件
        var searchRow;
        //是否显示热词grid
        var isHotSearch = typeof config.searchGrid != "undefined";
        /**搜索gird 行点击事件 单选 */
        var searchGridClick = function (row) {
            if (typeof config.multi != "undefined" && !config.multi) {
                ret = {};
                ret[0] = row;
                PageBase.closePage(ret);
            }
        };
        /** 搜索 grid */
        var gridSearchConfig = {
            id: config.searchGrid.gridId,
            pageSize: 21,
            // searchbar: false,
            multi: config.multi,
            // textEllipsis: true,
            layout: config.searchGrid.gridData,
            //行数据点击事件
            rowevent: [{
                    // field: "msgTr",
                    click: function (e, data) {
                        //获取当前行index
                        var index = data.index;
                        //获取当前行数据
                        var row = data.row;
                        //显示
                        searchGridClick(row);
                    }
                }],
            //初始化表格数据,请求ajax服务地址
            data: {
                type: "URL",
                value: getServer() + config.searchGrid.searchUrl
            }
        };
        var searchGrid = new Grid(gridSearchConfig);
        var myCreateRow = function (grid, row, $tr) {
            //创建表格行数据   共4列  icon 数据内容 (标题+内容)  右向箭头   复选框(默认隐藏)  
            var $tdIcon = $('<td class="rxm-td-icon"></td>');
            var $tdInfo = $('<td></td>');
            var $tdArrow = $('<td class="rxm-td-arrow" ></td>');
            var $tdCheckbox = $('<td class="rxm-td-checkbox fix"></td>');
            var firstField = '1';
            //循环创建icon与数据列
            for (var j = 0, item; item = this._config.layout[j++]; j < item.length) {
                var tdName = item.name;
                var tdValue = item.format ? item.format({ "row": row }) : row[item.field];
                if (item.field == "icon") {
                    tdValue = (tdValue || tdValue == 0) ? "" + tdValue : "";
                    $tdIcon.append(tdValue);
                    $tr.append($tdIcon);
                }
                else {
                    tdValue = (tdValue || tdValue == 0) ? "" + tdValue : "";
                    if (firstField === '1') {
                        if (typeof tdName != "undefined") {
                            $tdInfo.append("<span class='rxm-col-name'>" + tdName + '&nbsp;:&nbsp;' + "</span><span class='rxm-col-value'>" + tdValue + "</span>");
                            firstField = '2';
                        }
                        else {
                            $tdInfo.append("<span class='rxm-col-value'>" + tdValue + "</span>");
                            firstField = '2';
                        }
                    }
                    else {
                        if (typeof tdName != "undefined") {
                            //其他字段换行
                            $tdInfo.append("</br><span class='rxm-col-name'>" + tdName + '&nbsp;:&nbsp;' + "</span><span class='rxm-col-value'>" + tdValue + "</span>");
                        }
                        else {
                            //其他字段换行
                            $tdInfo.append("</br><span class='rxm-col-value'>" + tdValue + "</span>");
                        }
                    }
                }
                $tr.append($tdInfo);
            }
            //创建checkbox列   multi属性配置为true：多选框      false：单选按钮
            if (config.multi) {
                if ((typeof this._config.multi != "undefined") && (this._config.multi)) {
                    $tdCheckbox.append('<input class="rxm-multi-check" type="' + (this._config.multi ? 'checkbox' : 'radio') + '" name="s_gird_multi_' + (this._config.id) + '" ' + (row["_checked"] ? "checked" : "") + '>');
                    $tr.append($tdCheckbox);
                }
            }
            //创建箭头列 
            // $tdArrow.append($('<img src="' + _arrowImg + '"/>'));
            // $tr.append($tdArrow);
            //渲染表格行后触发
            return $tr;
        };
        searchGrid.init = function () {
            this.createRow = myCreateRow;
            this.bindSwipeInBottom();
            this.bindSwipeInTop();
            this.bindSwipeInTopEnd();
            this.bindSwipeInBottomEnd();
            this.reload();
        };
        //如多选，显示确定，取消按钮；单选则不显示
        if (typeof config.multi != "undefined" && config.multi) {
            $("#toolbar").show();
            $("#confirmBtn").tap(function () {
                var data = searchGrid.getSelectedData();
                PageBase.closePage(data);
            });
            $("#cancelBtn").tap(function () {
                searchGrid.uncheckRow();
            });
        }
        else {
            $("#toolbar").hide();
        }
        if (isHotSearch) {
            var hotGridClick = function (row) {
                searchRow = row;
                $("#" + config.id).val(row[config.hotGrid.hotSearchField]);
                searchGridReload();
            };
            var gridHotConfig = {
                id: config.hotGrid.hotId,
                pageSize: 21,
                // searchbar: false,
                multi: false,
                // textEllipsis: true,
                layout: config.hotGrid.hotData,
                //行数据点击事件
                rowevent: [{
                        // field: "msgTr",
                        click: function (e, data) {
                            //获取当前行index
                            var index = data.index;
                            //获取当前行数据
                            var row = data.row;
                            //显示
                            hotGridClick(row);
                        }
                    }],
                //初始化表格数据,请求ajax服务地址
                data: {
                    type: "URL",
                    value: getServer() + config.hotGrid.hotUrl
                }
            };
            var hotGrid = new Grid(gridHotConfig);
            hotGrid.init = function () {
                this.createRow = myCreateRow;
            };
        }
        /**
         * 热词gird reload
         */
        var searchOnInput = function () {
            var queryField = $("#" + config.id).val().trim();
            $("#" + config.searchGrid.gridId).hide();
            $("#toolbar").hide();
            /**画热词grid */
            hotGrid.init();
            var query = {};
            query[config.hotGrid.hotSearchField] = queryField || "";
            hotGrid.reload({
                queryParam: query
            });
            $("#" + config.hotGrid.hotId).show();
        };
        /**
         * 搜索grid reload
         */
        var searchGridReload = function () {
            var queryField = $("#" + config.id).val().trim();
            $("#" + config.hotGrid.hotId).hide();
            $("#" + config.searchGrid.gridId).show();
            if (typeof config.multi != "undefined" && config.multi) {
                $("#toolbar").show();
            }
            var query = {};
            query[config.searchGrid.searchField] = queryField || "";
            searchGrid.reload({
                queryParam: (typeof searchRow != "undefined") ? searchRow : query
            });
        };
        /** 搜索框*/
        var search = new rxmSearch(config);
        /**搜索框输入值发生变化事件重写 */
        search.oninput = function () {
            if (isHotSearch) {
                searchOnInput();
            }
            else {
                searchGridReload();
            }
        };
        /**搜索框聚焦时 事件重写 */
        search.onfocus = function () {
            if (isHotSearch) {
                searchOnInput();
            }
            else {
                searchGridReload();
            }
        };
        /**键盘确定按钮 */
        search.onkeypress = function (e) {
            if (e.keyCode == 13 || e.keyCode == 9) {
                searchGridReload();
            }
        };
        /**点击搜索按钮，搜索 */
        $("#searchButton").tap(function () {
            searchGridReload();
        });
        var RxmSearchGrid = function (config) {
        };
        RxmSearchGrid.prototype.init = function () {
            $("#" + config.hotGrid.hotId).hide();
            // $("#"+config.gridId).height("450px");
            searchGrid.init();
            search.init();
        };
        return new RxmSearchGrid(config);
    };
    return ClsFactory;
});

define('RxmSearch', [], function () {
    var clsdef = {};
    var ClsFactory = function (config) {
        var id = config.id;
        /**
         * @class
         * @constructor
         * @param {} config
         */
        var RxmSearch = function (config) {
        };
        /**表单项有转变 */
        RxmSearch.prototype.onchange = function (e, data) {
            ///<param name="e" value="event"></param>
            console.log("change");
        };
        RxmSearch.prototype.onfocus = function (e, data) {
            ///<param name="e" value="event"></param>
            console.log("focus");
        };
        RxmSearch.prototype.onformchange = function (e, data) {
            ///<param name="e" value="event"></param>
            console.log("formchange");
        };
        RxmSearch.prototype.onforminput = function (e, data) {
            ///<param name="e" value="event"></param>
            console.log("forminput");
        };
        RxmSearch.prototype.oninput = function (e, data) {
            ///<param name="e" value="event"></param>
            console.log("input");
        };
        RxmSearch.prototype.onselect = function (e, data) {
            ///<param name="e" value="event"></param>
            console.log("select");
        };
        RxmSearch.prototype.onkeypress = function (e, data) {
            if (e.keyCode == 13 || e.keyCode == 9) {
                console.log(e.keyCode);
            }
        };
        RxmSearch._inputEvtEnum = {
            //onblur	script	元素失去焦点时运行的脚本。
            blur: "blur",
            //onchange	script	在元素值被改变时运行的脚本。
            change: "change",
            //oncontextmenu	script	当上下文菜单被触发时运行的脚本,。
            contextmenu: "contextmenu",
            //onfocus	script	当元素获得焦点时运行的脚本。,
            focus: "focus",
            //onformchange	script	在表单改变时运行的脚本。
            formchange: "formchange",
            //onforminput	script	当表单获得用户输入时运行的脚本。
            forminput: "forminput",
            //oninput	script	当元素获得用户输入时运行的脚本。
            input: "input",
            //oninvalid	script	当元素无效时运行的脚本。
            invalid: "invalid",
            //onreset	script	当表单中的重置按钮被点击时触发。HTML5 中不支持。
            reset: "reset",
            //onselect	script	在元素中文本被选中后触发。
            select: "select",
            //onsubmit	script	在提交表单时触发。
            submit: "submit",
            //onbeforeunload
            beforeunload: "beforeunload",
            keypress: "keypress"
        };
        RxmSearch.prototype.init = function () {
            // document.getElementById(id).addEventListener(RxmSearch._inputEvtEnum.change, $.proxy(this.onchange, this));
            document.getElementById(id).addEventListener(RxmSearch._inputEvtEnum.focus, $.proxy(this.onfocus, this));
            // document.getElementById(id).addEventListener(RxmSearch._inputEvtEnum.formchange, $.proxy(_onformchange, this));
            // document.getElementById(id).addEventListener(RxmSearch._inputEvtEnum.forminput, $.proxy(_onforminput, this));
            document.getElementById(id).addEventListener(RxmSearch._inputEvtEnum.input, $.proxy(this.oninput, this));
            document.getElementById(id).addEventListener(RxmSearch._inputEvtEnum.select, $.proxy(this.onselect, this));
            document.getElementById(id).addEventListener(RxmSearch._inputEvtEnum.keypress, $.proxy(this.onkeypress, this));
        };
        return new RxmSearch(config);
    };
    return ClsFactory;
});

/**
 * 功能：给制定div、span、tbody等，包装一个block，可以block折叠、展开
 * 版本：v1.1
 * 参数：
 *      两种传值方式
 *      1. config 直接传入id（内容采用默认方式）
 *      2. config 传入config对象（可定义标题、标题处图标，展开、收缩图标，展开、收缩说明标题） 格式如：
 *      config = {
 *          // 元素id
 *          id: "",
 *          // 显示标题 ，默认为"查询条件"
 *          homeTitle: ""，
 *          // 标题左侧的图标
 *          homeIcon: "",
 *          // 展开图标
 *          expandIcon: "",
 *          // 展开提示
 *          expandTitle: "",
 *          // 折叠图标
 *          collapseIcon: "",
 *          // 折叠提示
 *          collapseTitle: ""
 *      }
 *
 * 调用方式：
 *      define(["xxx/searchBlock"], function (searchBlock){
 *          ...
 *          // 元素id
 *          var config = "queryConditions";
 *          searchBlock.init(config);
 *
 *          //
 *      })
 */
define("RxmSearchBlock", [], function () {
    var util = require(require.rxm.PageBase);
    var searchBlock = {};
    //var _this;
    //var $block;
    searchBlock.init = function (config) {
        var _this = this;
        if (config === '' && !config.id) {
            util.alert('请指定要绑定的id！');
            return false;
        }
        // search块的id信息
        this.id = config.id ? config.id : config;
        // 如果已经加载了searchBlock，则不重复加载
        if ($('#' + _this.id).parent('.pd-search-body').length > 0) {
            return false;
        }
        // search块头部的标题
        this.homeTitle = config.homeTitle ? config.homeTitle : '查询条件';
        // search块头部右侧的图标
        this.homeIcon = config.homeIcon ? config.homeIcon : 'fa fa-search';
        // search块展开图标
        this.expandIcon = config.expandIcon ? config.expandIcon : 'fa fa-angle-double-down';
        // search块展开提示
        this.expandTitle = config.expandTitle ? config.expandTitle : '展开';
        // search块折叠图标
        this.collapseIcon = config.collapseIcon ? config.collapseIcon : 'fa fa-angle-double-up';
        // search块折叠提示
        this.collapseTitle = config.collapseTitle ? config.collapseTitle : '折叠';
        // 创建search块
        createSearchBlock(_this);
    };
    // 创建search块
    var createSearchBlock = function (_this) {
        // search块主体
        $('#' + _this.id).wrap('<div class="pd-search-body"></div>');
        var searchBody = $('#' + _this.id).parent('.pd-search-body');
        // 默认块，作为search-body调整padding高度的临时div
        searchBody.append('<div class="clearfix"></div>');
        // search块容器
        searchBody.wrap('<div class="col-md-12 pd-search-container pd-expandMode"></div>');
        var $block = $('#' + _this.id).closest('.pd-search-container').wrap('<div class="col-md-12"></div>');
        // search标题
        $('<div class="pd-search-title"><i class="' + _this.homeIcon + '"></i>' + _this.homeTitle + '&nbsp; <a class="pd-search-click"><i class="' + _this.collapseIcon + '" title="' + _this.collapseTitle + '"></i></a></div>').insertBefore(searchBody);
        // 展开/折叠searchBlock
        toggleSearchBlock(_this, $block);
    };
    // 展开/折叠searchBlock
    var toggleSearchBlock = function (_this, $block) {
        // 点击箭头图标展开/折叠
        $($block).find('.pd-search-click i').bind('click', function () {
            // 展开折叠的实现函数
            toggleSupport(this, _this);
        });
        // 标题栏双击展开/折叠功能
        $($block).find('.pd-search-title').bind('dblclick', function () {
            // 展开/折叠图标对象
            var obj = $(this).find('.pd-search-click i');
            // 展开折叠的实现函数
            toggleSupport(obj, _this);
        });
        // 展开折叠的实现方法
        function toggleSupport(obj, _this) {
            // 切换展开/折叠图标
            $(obj).toggleClass(_this.collapseIcon).toggleClass(_this.expandIcon);
            // 切换展开/折叠的title提示
            if ($(obj).attr('title') == _this.collapseTitle) {
                $(obj).attr('title', _this.expandTitle);
            }
            else {
                $(obj).attr('title', _this.collapseTitle);
            }
            // 搜索栏展开/折叠
            $($block).find('.pd-search-body').slideToggle();
            $($block).closest('.pd-search-container').toggleClass('pd-expandMode').toggleClass('pd-collapseMode');
        }
    };
    return searchBlock;
});

define("RxmSwitch", [require.rxm.PageBase, "css!RxmUtilDir/css/switch.css"], function (ormWidget) {
    function clsSwitch(config) {
        this.config = $.extend(true, {
            state: true,
            animate: true,
            disabled: false,
            onColor: null,
            offColor: null,
            onText: '&nbsp',
            offText: '&nbsp',
            labelText: '&nbsp',
            lineHeight: null,
            width: null
        }, config);
    }
    ;
    clsSwitch.prototype._init = function () {
        if (typeof this.config.id == "string") { //id
            this._parent = this.config.id ? document.getElementById(this.config.id) : document.body;
        }
        if (typeof this.config.id == "object") { //dom
            this._parent = this.config.id;
        }
    };
    clsSwitch.msgEnum = {
        changedStatus: "changedStatus"
    };
    clsSwitch.prototype._buildSwitch = function () {
        var state = this.config.state ? "switch-on" : "switch-off";
        var animate = this.config.animate ? "switch-animate" : "";
        var disabled = this.config.disabled ? "deactivate" : "";
        this.$innerWrap = $('<div class="' + animate + ' ' + state + '"></div>');
        this.$switchLeft = $('<span class="switch-left"></span>').html(this.config.onText);
        this.$label = $('<label class=""></label>').html(this.config.labelText);
        this.$switchRight = $('<span class="switch-right "></span>').html(this.config.offText);
        this.$switch = $('<div class="orm-switch  has-switch ' + disabled + '"></div>').append(this.$innerWrap);
        this.$innerWrap.append(this.$switchLeft).append(this.$label).append(this.$switchRight);
        $(this._parent).append(this.$switch);
        this.config.width ? this.$switch.css('min-width', this.config.width + 'px') : "";
        if (this.config.lineHeight) {
            this.$switchLeft.css('line-height', (this.config.lineHeight - 10) + 'px');
            this.$label.css({ 'line-height': (this.config.lineHeight - 10) + 'px' });
            this.$switchRight.css('line-height', (this.config.lineHeight - 10) + 'px');
        }
        else {
        }
        this.config.onColor ? this.$switchLeft.css('background-color', this.config.onColor) : "";
        this.config.offColor ? this.$switchLeft.css('background-color', this.config.offColor) : "";
        this.$switchLeft.on('tap', $.proxy(this._switchTap, this));
        this.$switchRight.on('tap', $.proxy(this._switchTap, this));
        this.$label.on('touchstart', $.proxy(this._touchStart, this));
    };
    clsSwitch.prototype._switchTap = function (event) {
        event.stopImmediatePropagation();
        this.$label.trigger('touchstart').trigger('tap');
    };
    clsSwitch.prototype._touchStart = function (event) {
        this.config.moving = false;
        event.stopImmediatePropagation();
        if (this.$switch.hasClass('deactivate'))
            this.$label.unbind('touchstart');
        else {
            this.$label.on('touchmove', $.proxy(this._touchMove, this));
            this.$label.on('tap touchend touchcancel', $.proxy(this._touchEnd, this));
        }
    };
    clsSwitch.prototype._touchMove = function (e, data) {
        var $element = this.$switch, relativeX = (e.pageX || e.originalEvent.targetTouches[0].pageX) - $element.offset().left, percent = (relativeX / $element.width()) * 100, left = 25, right = 75;
        this.config.moving = true;
        if (percent < left)
            percent = left;
        else if (percent > right)
            percent = right;
        $element.find('>div').css('left', (percent - right) + "%");
    };
    clsSwitch.prototype._touchEnd = function (event) {
        event.stopImmediatePropagation();
        this._changeStatus();
    };
    clsSwitch.prototype._changeStatus = function (event, data) {
        var $element = this.$innerWrap;
        if (this.config.moving) {
            var left = parseInt($element.css('left'));
            if (left > -25) {
                $element.removeClass('switch-off').addClass('switch-on');
            }
            else {
                $element.removeClass('switch-on').addClass('switch-off');
            }
            $element.css('left', '');
        }
        else {
            $element.css('left', '');
            var state = $element.is('.switch-off');
            if (state)
                $element.removeClass('switch-off').addClass('switch-on');
            else
                $element.removeClass('switch-on').addClass('switch-off');
        }
        this.config.moving = false;
        var d = {};
        d.status = $element.is('.switch-on');
        this.$switch.trigger(clsSwitch.msgEnum.changedStatus, d);
    };
    clsSwitch.prototype._layout = function () {
        this._init();
        this._buildSwitch();
    };
    clsSwitch.prototype.layout = function () {
        this._layout();
    };
    //能否使用
    clsSwitch.prototype.disabled = function (disabled) {
        if (disabled && disabled === true)
            this.$switch.addClass('deactivate');
        else {
            this.$switch.removeClass('deactivate');
        }
    };
    //获取状态
    clsSwitch.prototype.status = function () {
        var status = this.$innerWrap.is('.switch-on');
        return status;
    };
    //切换 状态
    clsSwitch.prototype.callbackChangedStatus = function (arg, scope) {
        if (typeof arg == "undefined") {
            arg = {
                fn: function () { },
            };
            scope = this;
        }
        var the = this;
        if ($.isExist(scope)) {
            the = scope;
        }
        this.$switch.on(clsSwitch.msgEnum.changedStatus, arg.data, $.proxy(arg.fn, the), arg.one);
    };
    clsSwitch.prototype.constructor = clsSwitch;
    cssOrm.declare("clsSwitch", clsSwitch);
    return clsSwitch;
});

define("RxmSlidebar", ["require", "exports", "RxmMd5Bulid", "RxmAppTool"], function (require, exports, md5, appTool) {
    "use strict";
    var clsForctory = function (config, args) {
        var RxmSlidebarImpl = /** @class */ (function () {
            function RxmSlidebarImpl() {
                this._router = config;
                this._args = args;
                args.target = '_blank';
            }
            RxmSlidebarImpl.prototype._parseConfig = function (config) {
                var r = {};
                var a = {};
                var br = false;
                var ba = false;
                var rr = {
                    //页面id 必填
                    pageId: "",
                    //页面名称
                    pageName: "",
                    //页面序号 
                    pageOrder: 0,
                    //父页面id  
                    pagePid: "",
                    //页面类型
                    pageType: "1",
                    //所在组
                    pageCtrl: "",
                    //页面控制  必填
                    pageCtrlUrl: "",
                    //页面描述
                    pageDesc: "",
                    //页面路由地址  必填
                    pageRouter: "",
                    //页面地址  必填
                    pageUrl: "",
                    //打开方式
                    pageOpen: ""
                };
                var aa = {
                    //可选 ，打开新窗口时传入参数
                    data: {},
                    //可选，标题，默认空
                    title: "",
                    //可选， title颜色	#ffffff，title参数为空时无效 
                    titleColor: "",
                    // 可选， 是否隐藏导航栏  默认值 false
                    hiddenTitleBar: "",
                    // 可选，是否隐藏导航栏返回按钮,hiddenTitleBar参数为true时无效 
                    hiddenBackBtn: "",
                    // 可选，标题栏背景，支持图片和颜色值（#0088cc）,hiddenTitleBar参数为true时无效
                    titleBarBg: "",
                    //  可选，多个菜单项之间用逗号分隔"完成,设置",hiddenTitleBar参数为true时无效
                    menu: "",
                    // 可选，菜单项文字颜色值 ,hiddenTitleBar参数为true时无效 	#ffffff
                    menuTextColor: "",
                    //可选，窗口关闭叫回函数 形如 function(arg)
                    afterClose: function (e, arg) { }
                };
                var the = this;
                // 解析  窗口相关参数 和回叫
                $.each(aa, function (index, value) {
                    if (!!config[index]) {
                        the._args[index] = config[index];
                    }
                });
                ///解析路由信息
                $.each(rr, function (index, value) {
                    if (!!config[index]) {
                        br = true;
                        rr[index] = config[index];
                    }
                });
                if (br) {
                    this._router = r;
                    if (!!config.hash) {
                        this._router.pageRouter = config.hash;
                    }
                    ;
                    this._router.pageRouter = this._router.pageRouter || appTool.unid() + "";
                    cssOrm.obj.objOrmPageAuth().addTempRouter(this._router);
                }
                if (!!config.hash && !!this._router) {
                    this._router.pageRouter = config.hash;
                }
            };
            RxmSlidebarImpl.prototype.render = function () {
                var rqr = window;
                var router = rqr.require('RxmRouterMgr');
                router.load(this._router, this._args);
            };
            return RxmSlidebarImpl;
        }());
        return new RxmSlidebarImpl();
    };
    return clsForctory;
});

define("RxmAjax", ["require", "exports", "RxmAppTool", "RxmUtil"], function (require, exports, appTool, Util) {
    "use strict";
    var s = 0;
    var AuthFlag = false;
    function ajxSetting() {
        /// <field name="options" type="Object"> 可选。AJAX 请求设置。所有选项都是可选的。</field>
        /// <field name="async" type="Boolean">默认值: true。默认设置下，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为 false。</field>
        /// <field name="beforeSend" type="Function">    beforeSend(XHR)  类型：Function 发送请求前可修改 XMLHttpRequest 对象的函数，如添加自定义 HTTP 头。XMLHttpRequest 对象是唯一的参数。   这是一个 Ajax 事件。如果返回 false 可以取消本次 ajax 请求。</field>
        /// <field name="cache" type="Boolean">    默认值: true，dataType 为 script 和 jsonp 时默认为 false。设置为 false 将不缓存此页面。</field>
        /// <field name="complete" type="Function"> complete(XHR, TS)  回叫函数    请求完成后回调函数 (请求成功或失败之后均调用)。参数： XMLHttpRequest 对象和一个描述请求类型的字符串。</field>
        /// <field name="contentType" type="String">默认值: "application/x-www-form-urlencoded"。发送信息至服务器时内容编码类型。</field>
        /// <field name="context" type="Object">这个对象用于设置 Ajax 相关回调函数的上下文。也就是说，让回调函数内 this 指向这个对象（如果不设定这个参数，那么 this 就指向调用本次 AJAX 请求时传递的 options 参数）。比如指定一个 DOM 元素作为 context 参数，这样就设置了 success 回调函数的上下文为这个 DOM 元素。</field>
        /// <field name="data" type="String">发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。如果为数组，jQuery 将自动为不同值对应同一个名称</field>
        /// <field name="dataFilter" type="Function">给 Ajax 返回的原始数据的进行预处理的函数。提供 data 和 type 两个参数：data 是 Ajax 返回的原始数据，type 是调用 jQuery.ajax 时提供的 dataType 参数。函数返回的值将由 jQuery 进一步处理。</field>
        /// <field name="dataType" type="String">预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息来智能判断，比如 XML MIME 类型就被识别为 XML。在 1.4 中，JSON 就会生成一个 JavaScript 对象，而 script 则会执行这个脚本。随后服务器端返回的数据会根据这个值解析后，传递给回调函数。可用值:xml、html、script、json、jsonp、text </field>
        /// <field name="headers" type="String"></field>
        /// <field name="error" type="Function">默认值: 自动判断 (xml 或 html)。请求失败时调用此函数。    有以下三个参数：XMLHttpRequest 对象、错误信息、（可选）捕获的异常对象。如果发生了错误，错误信息（第二个参数）除了得到 null 之外，还可能是 "timeout", "error", "notmodified" 和 "parsererror"。</field>
        /// <field name="global" type="Boolean">是否触发全局 AJAX 事件。默认值: true。设置为 false 将不会触发全局 AJAX 事件，如 ajaxStart 或 ajaxStop 可用于控制不同的 Ajax 事件。</field>
        /// <field name="ifModified" type="Boolean">仅在服务器数据改变时获取新数据。默认值: false。使用 HTTP 包 Last-Modified 头信息判断。在 jQuery 1.4 中，它也会检查服务器指定的 'etag' 来确定数据没有被修改过。</field>
        /// <field name="isLocal" type="String"></field>
        /// <field name="method" type="String">The HTTP method to use for the request (e.g. POST, GET, PUT). (version added: 1.9.0)</field>
        /// <field name="mimeType" type="String">A mime type to override the XHR mime type. (version added: 1.5.1)</field>
        /// <field name="jsonp" type="String">在一个 jsonp 请求中重写回调函数的名字。这个值用来替代在 "callback=?" 这种 GET 或 POST 请求中 URL 参数里的 "callback" 部分，比如 {jsonp:'onJsonPLoad'} 会导致将 "onJsonPLoad=?" 传给服务器。</field>
        /// <field name="jsonpCallback" type="String">为 jsonp 请求指定一个回调函数名。这个值将用来取代 jQuery 自动生成的随机函数名。这主要用来让 jQuery 生成度独特的函数名，这样管理请求更容易，也能方便地提供回调函数和错误处理。你也可以在想让浏览器缓存 GET 请求的时候，指定这个回调函数名。  </field>
        /// <field name="password" type="String">用于响应 HTTP 访问认证请求的密码</field>
        /// <field name="processData" type="Boolean">默认值: true。默认情况下，通过data选项传递进来的数据，如果是一个对象(技术上讲只要不是字符串)，都会处理转化成一个查询字符串，以配合默认内容类型 "application/x-www-form-urlencoded"。如果要发送 DOM 树信息或其它不希望转换的信息，请设置为 false。</field>
        /// <field name="scriptCharset" type="String">只有当请求时 dataType 为 "jsonp" 或 "script"，并且 type 是 "GET" 才会用于强制修改 charset。通常只在本地和远程的内容编码不同时使用。</field>
        /// <field name="success" type="Function">请求成功后的回调函数</field>
        /// <field name="traditional" type="Boolean">如果你想要用传统的方式来序列化数据，那么就设置为 true。请参考工具分类下面的 jQuery.param 方法。</field>
        /// <field name="timeout" type="Number">设置请求超时时间（毫秒）。此设置将覆盖全局设置。</field>
        /// <field name="type" type="String">默认值: "GET")。请求方式 ("POST" 或 "GET")， 默认为 "GET"。注意：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。</field>
        /// <field name="url" type="String">默认值: 当前页地址。发送请求的地址。</field>
        /// <field name="username" type="String">用于响应 HTTP 访问认证请求的用户名。</field>
        /// <field name="xhr" type="Function">    需要返回一个 XMLHttpRequest 对象。默认在 IE 下是 ActiveXObject 而其他情况下是 XMLHttpRequest 。用于重写或者提供一个增强的 XMLHttpRequest 对象。这个参数在 jQuery 1.3 以前不可用。 回调函数如果要处理 $.ajax() 得到的数据，则需要使用回调函数：beforeSend、error、dataFilter、success、complete。</field>
    }
    // function ajxSpical(){}
    // ajxSpical.prototype.setup = function (data, namespaces, eventHandle) {
    //    // split the arguments to necessary controll arguements
    //    return true;
    // };
    // ajxSpical.prototype.add = function (event_) {
    //    return false;
    // };
    // ajxSpical.prototype.remove = function (event_) {
    //    // remove pseudo event: properties on $.data
    //    return false;
    // };
    // ajxSpical.prototype.teardown = function () {
    // };
    // $.event.special['cssRequestEvt'] = new ajxSpical();
    var SessionOutFlag = false;
    function ormAjax(setting) {
        var rxmret = {};
        /// <summary></summary>
        /// <param  name="setting" type="ajxSetting">选项 </param>
        var uid = Math.round(Math.random() * 10000000) + '';
        setting.uid = uid;
        var requestDetachEvnt = function (e, d) {
            var ajxOpt = e.data;
            if (ajxOpt.uid + '' === d.uniqueId) {
                var xhr = {};
                xhr.responseJSON = { status: '400' };
                xhr.status = 400;
                xhr.responseText = d.data || '';
                xhr.statusText = 'FAIL';
                var xhrcode = 'fail';
                var successCode = '200' || ajxOpt.successCode;
                if (d.status === '200') {
                    var j = ajxOpt.dataType || 'json';
                    var data = d.data;
                    if (j === 'json') {
                        // eval("(" + d.data + ")")
                        data = JSON.parse(d.data);
                        xhr.responseJSON = data;
                        var code = '' + (data.status || data.code || '200');
                        // 如果是整形，转换为字符串
                        // 状态码控制
                        switch (code) {
                            case successCode:
                                if (ajxOpt.success) {
                                    data = typeof (data.model) !== 'undefined' ? data.model : data;
                                    xhrcode = 'success';
                                    xhr.statusText = 'OK';
                                    xhr.status = 200;
                                    ajxOpt.success(data);
                                }
                                break;
                            case '401':
                                // if (ajxOpt.errorStatus) {
                                //   var ret = ajxOpt.errorStatus(code)
                                //   if (!ret) return
                                // }
                                if (cssOrm.default.ajaxErrorStatus) {
                                    var ret = cssOrm.default.ajaxErrorStatus(code);
                                    if (!ret)
                                        return;
                                }
                                xhr.status = 401;
                                // 需要认证：登录超时或未登录
                                if (!SessionOutFlag) {
                                    // 记录当前的地址，登录成功之后跳转至该地址
                                    var redirectUrl = encodeURIComponent(window.location.href);
                                    alert("登录过期，请重新登录<a href='" + getServer() + "/resoft/login?redirectUrl=" + redirectUrl + "'>点此登录</a>");
                                    Util.alert(cssOrm.default.prompt.sessionOutFlag, function () {
                                        rxm_page.logout(1);
                                    });
                                    SessionOutFlag = true;
                                    // 过一段时间再设置成false
                                    setTimeout(function () {
                                        SessionOutFlag = false;
                                    }, 2000);
                                }
                                break;
                            case '400':
                                // if (ajxOpt.errorStatus) {
                                //   var ret = ajxOpt.errorStatus(code)
                                //   if (!ret) return
                                // }
                                if (cssOrm.default.ajaxErrorStatus) {
                                    var ret = cssOrm.default.ajaxErrorStatus(code);
                                    if (!ret)
                                        return;
                                }
                                // 客户端错误：受到攻击或者请求异常
                                xhr.status = 400;
                                Util.alert(cssOrm.default.prompt.appError);
                                break;
                            case '403':
                                // 未授权
                                // if (ajxOpt.errorStatus) {
                                //   var ret = ajxOpt.errorStatus(code)
                                //   if (!ret) return
                                // }
                                if (cssOrm.default.ajaxErrorStatus) {
                                    var ret = cssOrm.default.ajaxErrorStatus(code);
                                    if (!ret)
                                        return;
                                }
                                xhr.status = 403;
                                if (!AuthFlag) {
                                    Util.alert(cssOrm.default.prompt.unauthorised);
                                    AuthFlag = true;
                                    // 过一段时间再设置成false
                                    setTimeout(function () {
                                        AuthFlag = false;
                                    }, 2000);
                                }
                                break;
                            case '499':
                                // 注销,重登录
                                // if (ajxOpt.errorStatus) {
                                //   var ret = ajxOpt.errorStatus(code)
                                //   if (!ret) return
                                // }
                                if (cssOrm.default.ajaxErrorStatus) {
                                    var ret = cssOrm.default.ajaxErrorStatus(code);
                                    if (!ret)
                                        return;
                                }
                                xhr.status = 499;
                                Util.alert(cssOrm.default.prompt.reLogin, function () {
                                    rxm_page.logout(1);
                                });
                                break;
                            case '599':
                                xhr.status = 599;
                                // if (ajxOpt.errorStatus) {
                                //   var ret = ajxOpt.errorStatus(code)
                                //   if (!ret) return
                                // }
                                if (cssOrm.default.ajaxErrorStatus) {
                                    var ret = cssOrm.default.ajaxErrorStatus(code);
                                    if (!ret)
                                        return;
                                }
                                // 退出app
                                Util.alert(cssOrm.default.prompt.restart, function () {
                                    rxm_page.logout(2);
                                });
                                break;
                            case '500':
                                // if (ajxOpt.errorStatus) {
                                //   var ret = ajxOpt.errorStatus(code)
                                //   if (!ret) return
                                // }
                                if (cssOrm.default.ajaxErrorStatus) {
                                    var ret = cssOrm.default.ajaxErrorStatus(code);
                                    if (!ret)
                                        return;
                                }
                                xhr.status = 500;
                                if (ajxOpt.error) {
                                    ajxOpt.error(null, '500');
                                }
                                else {
                                    Util.alert('500:' + cssOrm.default.prompt.serverError);
                                }
                                break;
                            default:
                                // if (ajxOpt.errorStatus) {
                                //   var ret = ajxOpt.errorStatus(code)
                                //   if (!ret) return
                                // }
                                if (ajxOpt.error) {
                                    ajxOpt.error(null, code);
                                }
                                else if (cssOrm.default.ajaxErrorStatus) {
                                    var ret = cssOrm.default.ajaxErrorStatus(code);
                                    if (!ret)
                                        return;
                                }
                                else {
                                    Util.alert(code + ':' + cssOrm.default.prompt.serverError);
                                }
                        }
                    }
                    else {
                    }
                }
                else {
                    if (ajxOpt.error) {
                        ajxOpt.error(null, d.status + '');
                    }
                    else {
                        rxm_page.tip(cssOrm.default.prompt.noNetwork, 'center');
                        // Util.alert(cssOrm.default.prompt.network);
                    }
                }
                if (ajxOpt.complete) {
                    ajxOpt.complete(xhr, xhrcode);
                }
                return false;
            }
            else {
                return true;
            }
        };
        cssOrm.on({
            msgType: 'netMsg',
            id: setting.uid,
            data: setting,
            callback: requestDetachEvnt,
            one: true
        });
        var url = setting.url;
        if (url && url.indexOf('http://') == -1) {
            var host = appTool.getUpdateUrl();
            if (host.length > 0) {
                var server = appTool.getServer();
                if (url.indexOf(server) === 0) {
                    url = url.replace(server, host);
                }
            }
        }
        ;
        var headers = '';
        if (setting.contentType == 'application/json') {
            var header = {
                "content-type": "application/json;charset=UTF-8"
            };
            headers = JSON.stringify(header);
            //if($.isPlainObject(setting.datadata)){}
        }
        ;
        var data = setting.data || null;
        if ($.isPlainObject(setting.data)) {
            data = JSON.stringify(data);
        }
        //var header = JSON.stringify(setting.headers || '')
        // cipCount.onEvent("count_ajax");
        //添加时间戳
        var PD_T = "RX__M=" + uid;
        if (url && url.indexOf("?") != -1) {
            url += "&" + PD_T;
        }
        else {
            url += "?" + PD_T;
        }
        //请求超时时间
        var timeout = 30;
        if (!!setting.timeout) {
            timeout = setting.timeout;
        }
        //是否加密
        if (!!setting.encode && !!setting.encode.isEncode && setting.encode.isEncode) {
            rxm_request.fetchData(url, uid, 1, '0', 'POST', data, headers, '', 0, timeout, 'true', setting.encode.key);
        }
        else {
            rxm_request.fetchData(url, uid, 1, '0', 'POST', data, headers, '', 0, timeout);
        }
        return rxmret;
    }
    ;
    // if(typeof  cipNetData!="undefined") cipNetData.cbRequest =ajxSetting.requestEvt;
    $.ajax = ormAjax;
    return ormAjax;
});

///<amd-dependency path="RxmCmdMgr" name="rxmCmdMgr"/>
///<amd-module name='RxmPageBase'/>
/////<reference path="../../../../typings/index.d.ts"/>
define("RxmPageBase", ["require", "exports", "RxmCmdMgr", "RxmRouterMgr", "RxmAppTool", "RxmUtil"], function (require, exports, rxmCmdMgr, RouterMgr, AppTool, rxmUtil) {
    "use strict";
    /**
     * 关闭按钮监听
     * @param {Event} e
     */
    var _onRefresh = function () {
        window.location.reload(true);
    };
    var widgetMsgNames = {
        JumpPageMsg: 'JumpPageMsg',
        GetJumpPageArgsMsg: 'GetJumpPageArgsMsg',
        GetWindowBoundsMsg: 'GetWindowBoundsMsg',
        GetGlobalConfigMsg: 'GetGlobalConfigMsg',
        GetLoginStatusMsg: 'GetLoginStatusMsg',
        GetKeyValue: '',
        MenuMsg: 'MenuMsg',
        BackBtnClickMsg: 'BackBtnClickMsg',
        getSelectedTab: 'getSelectedTab',
        GetAppInfo: "GetAppInfo",
        GetForceSysDeviceID: "GetForceSysDeviceID",
        NotifyCloseByOtherPage: 'NotifyCloseByOtherPage',
        Logout: "Logout",
        ShowLeftBtn: "ShowLeftBtn"
    };
    var util = rxmUtil;
    var appTool = AppTool;
    var allMenus;
    allMenus = {};
    var RxmPageBaseDImpl = /** @class */ (function () {
        function RxmPageBaseDImpl() {
            this.getSelectedTab = function (args) {
                cssOrm.on({ callback: args.callback, data: args.data, msgType: widgetMsgNames.getSelectedTab, one: true, id: '' });
                rxm_page && rxm_page.getSelectedTab();
            };
            /**
          * 显示提示语
          * @param message 必填 提示信息
          * @param position 可选 显示位置"top","bottom","center",默认值center
          * @param duration 可选 提示语显示时间 "short","long",默认值short
          */
            this.tip = this.toast;
        }
        RxmPageBaseDImpl.prototype.jumpPage = function (actionID, url, args) {
            !args && (args = {});
            if (typeof rxm_page !== 'undefined') {
                args._jump = true;
                if (url.indexOf('http') !== 0) {
                    if (appTool.isLocalLoad()) {
                        url = 'citp://' + url;
                    }
                    else {
                        url = appTool.getUpdateUrl() + url;
                    }
                }
                args && args.afterClose && cssOrm.on({ msgType: widgetMsgNames.JumpPageMsg, data: args.data, id: actionID, one: true, callback: args.afterClose });
                rxm_page && rxm_page.jump(actionID, url, JSON.stringify(args));
            }
        };
        RxmPageBaseDImpl.prototype.closePage = function (args, pageIds) {
            if (pageIds) {
                this.postPageNotify(pageIds, { notifyType: widgetMsgNames.NotifyCloseByOtherPage });
                return;
            }
            if (typeof rxm_page !== 'undefined' && AppTool.isJump()) {
                if (!!args && !!args.key) {
                    rxm_page && rxm_page.close(JSON.stringify(args), args.key);
                }
                else {
                    rxm_page && rxm_page.close(JSON.stringify(args));
                }
            }
        };
        RxmPageBaseDImpl.prototype.bindClosePage = function (args, ctx) {
            /// <param  name="args"  value="cssArgs.cssOrm.on"></param>
            var tmp = args.callback || args.fn;
            args.callback = tmp;
            if (tmp) {
                var clsId = args.id || appTool.uuid();
                tmp._clsId = clsId;
                tmp._ctx = ctx;
                this._evts = this._evts || [];
                this._evts.push(args);
            }
        };
        RxmPageBaseDImpl.prototype.unBindClosePage = function (args) {
            /// <param  name="args"  value="cssArgs.cssOrm.on"></param>
            this._evts = this._evts || [];
            var tmp = args.callback || args.fn;
            for (var i = 0; i < this._evts.length(); i++) {
                if (this._evts[i].callback._clsId === tmp._clsId) {
                    this._evts.splice(i, 1);
                    return;
                }
            }
        };
        RxmPageBaseDImpl.prototype.jumpHome = function (arrHome, btnFire, args) {
            if (typeof rxm_page !== 'undefined') {
                $.each(arrHome, function (index, value) {
                    if (value.pageUrl.indexOf('#') === 0) {
                        if (appTool.isLocalLoad()) {
                            value.pageArgs.hash = value.pageUrl;
                            value.pageUrl = 'citp://' + appTool.getHomeUrl();
                        }
                        else {
                            value.pageUrl = appTool.getUpdateUrl() + appTool.getHomeUrl(value.pageUrl);
                        }
                    }
                    else if (value.pageUrl.indexOf('http') < 0) {
                        if (appTool.isLocalLoad()) {
                            value.pageUrl = 'citp://' + value.pageUrl;
                        }
                        else {
                            console;
                            value.pageUrl = getServer() == "" ? appTool.getUpdateUrl() + '/' + value.pageUrl :
                                appTool.getUpdateUrl() + '/' + getServer() + '/' + value.pageUrl;
                        }
                    }
                    ;
                    value.tabSelectImg = value.tabSelectImg.indexOf('www/') === 0
                        ? 'citp://' + value.tabSelectImg : value.tabSelectImg;
                    value.tabUnSelectImg = value.tabUnSelectImg.indexOf('www/') === 0
                        ? 'citp://' + value.tabUnSelectImg : value.tabUnSelectImg;
                });
                rxm_page && rxm_page.goHome(JSON.stringify(arrHome));
                rxm_page && rxm_page.close({});
            }
        };
        RxmPageBaseDImpl.prototype.jumpLogin = function () {
            rxm_page && rxm_page.goLogin();
        };
        RxmPageBaseDImpl.prototype.jumpWelcome = function () {
            rxm_page && rxm_page.goWelcome();
        };
        /**
        * 隐藏 标题栏上的回退按钮
        * @param {Boolean} isShow true 隐藏;false 显示,默认为false显示
        */
        RxmPageBaseDImpl.prototype.hiddenBackBtn = function (isShow) {
            var value = isShow ? 1 : 0;
            rxm_page && rxm_page.attrBackbtnHidden(value);
        };
        /**
          * 设置标题及标题颜色
          * @param {String} title  标题
          * @param {String} textColor 标题颜色
          */
        RxmPageBaseDImpl.prototype.setTitle = function (title, textColor) {
            rxm_page && rxm_page.attrTitleAndColor(title, textColor);
        };
        /**
           * 设置菜单项
           * @param {Array} menuItems 菜单项数组
           * @param {String} menuTextColor 菜单项名字显示演示
           */
        RxmPageBaseDImpl.prototype.setMenu = function (menuItems, menuTextColor) {
            var menuNames = menuItems[0].name;
            allMenus[widgetMsgNames.MenuMsg + '_' + 0] = menuItems[0].callback;
            cssOrm.on({ callback: menuItems[0].callback, id: 0 + '', msgType: widgetMsgNames.MenuMsg, one: true });
            var f, msgId;
            for (var i = 1; i < menuItems.length; i++) {
                f = menuItems[i].callback;
                msgId = i + '';
                allMenus[widgetMsgNames.MenuMsg + '_' + msgId] = f;
                menuNames += ',' + menuItems[i].name;
                cssOrm.on({ callback: f, id: msgId, msgType: widgetMsgNames.MenuMsg, one: true });
            }
            rxm_page && rxm_page.attrMenuAndColor(menuNames, menuTextColor);
        };
        /**
          * 清除菜单
          */
        RxmPageBaseDImpl.prototype.cleanMenu = function () {
            $.each(allMenus, function (index, value) {
                $(document).off(index, value);
            });
            allMenus = {};
            rxm_page && rxm_page.cleanPageMenu();
        };
        /**
           * 注销
           * @param {int} finishPage 1:清除本地信息,跳转至gloabl.xml中配置的first页 ;0：清除本地信息,不结束页面,不跳转,调用cbLogout回调方法
           */
        RxmPageBaseDImpl.prototype.logout = function (finishPage, args) {
            if (!!args) {
                cssOrm.on({ callback: args.callback, data: args.data, msgType: widgetMsgNames.Logout, one: true, id: '' });
            }
            if (finishPage == '1' || finishPage == '0') {
                $.ajax({
                    url: getServer() + '/resoft/x/login/loginOut',
                    success: function () {
                        rxm_page && rxm_page.logout(finishPage);
                    }
                });
            }
        };
        /**
         * 隐藏标题栏
         * @param {Boolean} isShow  true 隐藏;false 显示,默认为false显示
         */
        RxmPageBaseDImpl.prototype.hiddenTitleBar = function (isShow) {
            var value = isShow ? 1 : 0;
            rxm_page && rxm_page.attrTitleBarHidden(value);
        };
        /**
           * 设置标题栏背景
           * @param {String} bg  标题栏背景，颜色值或者图片
           */
        RxmPageBaseDImpl.prototype.setTitleBarBg = function (bg) {
            rxm_page && rxm_page.attrTitleBarBg(bg);
        };
        /**
           *
           * @param {Number} scroll 1表示禁用，0表示不禁用
           * @param {Number} bound  1表示禁用，0表示不禁用
           */
        RxmPageBaseDImpl.prototype.forbidWebViewAttr = function (scroll, bound) {
            var scrollParam = scroll || cssOrm.default.forbidWebViewAttDefault.scroll;
            var boundParam = bound || cssOrm.default.forbidWebViewAttDefault.bounce;
            if (AppTool.isIOS()) {
                rxm_page && rxm_page.forbidBounce(scrollParam, boundParam);
            }
        };
        /**
           * 显示提示语
           * @param {String} message 必填 提示信息
           * @param {String} position 可选 显示位置"top","bottom","center",默认值center
           * @param {String} duration 可选 提示语显示时间 "short","long",默认值short
           */
        RxmPageBaseDImpl.prototype.toast = function (message, position, duration) {
            if ($.isPlainObject(message)) {
                var tmp = message;
                message = tmp.message;
                position = tmp.position;
                duration = tmp.duration;
            }
            rxm_page && rxm_page.tip(message, position, duration);
        };
        /**  检查当前widget是否有更新*/
        RxmPageBaseDImpl.prototype.checkUpdate = function () {
            rxm_page && rxm_page.checkUpdate();
        };
        /**启动第三方app
           * @param {rxm.page.openApp} arg
           */
        RxmPageBaseDImpl.prototype.openApp = function (arg) {
            if (AppTool.isIOS()) {
                rxm_page && rxm_page.loadThirdApp(arg.appInforIos, arg.routeFailToast, arg.routeInstallUrl);
            }
            else {
                rxm_page && rxm_page.startThirdApp(arg.startMode, arg.mainInfo, arg.addInfo, arg.optInfo);
            }
        };
        /**
         * ?
         * 根据相关信息启动一个第三方应用 。假设应用A中有进行此UrlScheme配置，在另一个应用B中，通过引擎的JS方法rxm_page.loadApp('scheme1:');即可打开应用A（注意不要漏掉冒号!）</summary>
         * @param {String} appInfo 必选 第三方应用的URLSchemes
         */
        RxmPageBaseDImpl.prototype.loadApp = function (appInfo) {
            rxm_page && rxm_page.loadThirdApp(appInfo);
        };
        /** 根据相关信息启动一个第三方应用 */
        RxmPageBaseDImpl.prototype.startApp = function (startMode, mainInfo, addInfo, optInfo) {
            rxm_page && rxm_page.startThirdApp(startMode, mainInfo, addInfo, optInfo);
        };
        /**隐藏标题栏左侧按钮 */
        RxmPageBaseDImpl.prototype.hiddenLeftBtn = function () {
            rxm_page && rxm_page.attrLeftBtnHidden();
        };
        /**
        * 设置标题栏左侧按钮（只能设置一个左侧按钮）
        * @param args
        */
        RxmPageBaseDImpl.prototype.showLeftBtn = function (args) {
            cssOrm.on({ callback: args.callback, data: {}, msgType: widgetMsgNames.ShowLeftBtn, one: true, id: '' });
            rxm_page && rxm_page.showLeftBtn(args.text, args.textColor);
        };
        ;
        RxmPageBaseDImpl.prototype.getJumpPageArgs = function () {
        };
        RxmPageBaseDImpl.prototype.installApp = function (appPath) {
        };
        RxmPageBaseDImpl.prototype.getGlobalConfig = function (key, callback) {
            cssOrm.on({ msgType: widgetMsgNames.GetGlobalConfigMsg, callback: callback });
            rxm_page && rxm_page.getAppCfg(key);
        };
        RxmPageBaseDImpl.prototype.setLoginStatus = function (loginStatus, recordLoginStatus) {
            rxm_page && rxm_page.setLoginStatus(loginStatus, recordLoginStatus, appTool.getUserID());
        };
        RxmPageBaseDImpl.prototype.getLoginStatus = function (key, callback) {
            cssOrm.on({ msgType: widgetMsgNames.GetLoginStatusMsg, callback: callback });
            rxm_page && rxm_page.getLoginStatus(key);
        };
        RxmPageBaseDImpl.prototype.chgSelectedTab = function (pageId) {
            rxm_page && rxm_page.chgSelectedTab(pageId);
        };
        /**
           * 获取应用信息
           * @param args 获取应用信息参数对象
           */
        RxmPageBaseDImpl.prototype.getAppInfo = function (args) {
            cssOrm.on({ msgType: widgetMsgNames.GetAppInfo, callback: args.callback, one: true, id: "" });
            rxm_page && rxm_page.getAppInfo();
        };
        /**
        * 获取deviceId（Force）
        * @param  args 获取deviceId参数对象
        */
        RxmPageBaseDImpl.prototype.getForceSysDeviceID = function (args) {
            cssOrm.on({ msgType: widgetMsgNames.GetForceSysDeviceID, callback: args.callback, one: true, id: "" });
            if (args.isTrigger) {
                if (typeof rxm_force != 'undefined') {
                    rxm_force.getForceSysDeviceID();
                }
            }
        };
        RxmPageBaseDImpl.prototype._onTabClk = function () {
            $('.orm-frame').addClass('orm-frame-hidden');
            var s = $(this).data('frame-id');
            var $iframe = $('#' + s);
            if ($iframe.find('iframe').attr('src').length < 1) {
                var d = $iframe.data('item-data').pageUrl;
                $iframe.find('iframe').attr('src', d);
            }
            $iframe.removeClass('orm-frame-hidden');
            $('footer img').addClass('gray');
            $(this).find('img').removeClass('gray');
        };
        /**
        * 页面激活状态绑定函数
        * @param args 页面激活参数对象
        */
        RxmPageBaseDImpl.prototype.bindPageActived = function (args) {
            args.msgType = 'pageActived';
            cssOrm.on(args);
        };
        // 监听方法
        // 4.1. cbMenuCallback--标题栏菜单点击监听方法
        RxmPageBaseDImpl.prototype.menuBlock = function (name, pos) {
            /// 菜单叫回
            var Msg = widgetMsgNames.MenuMsg + '_' + pos;
            $(document).trigger(Msg, { name: name, pos: pos });
        };
        /**
         * 提示对话框
         * @param param  提示信息
         * @param cb 可选
         * @param modal 可选
         */
        RxmPageBaseDImpl.prototype.alert = function (param, cb, modal) {
            util.alert(param, cb, modal);
        };
        /**
         *
         * @param {rxm.page.confirm} param
         * @param {function} okCallback
         * @param {function} cancelCallback
         * @param {*} modal
         */
        RxmPageBaseDImpl.prototype.confirm = function (param, okCallback, cancelCallback, modal) {
            // 整合回调函数成一个,利用回传参数判断是否成功
            util.confirm(param, okCallback, cancelCallback, modal);
        };
        /**
         * 打开 Dialog
         * @param config 全部参数对象
         */
        RxmPageBaseDImpl.prototype.contentDialog = function (config) {
            return util.contentDialog(config);
        };
        /**
         * 打开侧边栏
         * @param {rxm.router} router
         * @param {rxm.page.loadargs2}  args
         */
        RxmPageBaseDImpl.prototype.slidebar = function (router, args) {
            util.slidebar(router, args);
        };
        /**
         * 打开form页面
         */
        RxmPageBaseDImpl.prototype.openForm = function (args) {
            var _args = $.extend({}, args.args, { form: args.form });
            util.slidebar(args.router, _args);
        };
        RxmPageBaseDImpl.prototype.loading = function (config) {
            return util.loading(config);
        };
        /**
          * 显示可提示用户输入的对话框
          * @param config 显示可提示用户输入的对话框参数对象
          */
        RxmPageBaseDImpl.prototype.prompt = function (config) {
            util.prompt(config);
        };
        /**
         * 加载router 指定的页面
         * @param {rxm.router} router
         * @param {rxm.page.loadargs2} widgetArgs
         */
        RxmPageBaseDImpl.prototype.load = function (router, widgetArgs) {
            var routers = RouterMgr;
            routers.load(router, widgetArgs);
        };
        /**
           * 组织人员选择
           * @param  cfg 组织人员选择参数对象
           */
        RxmPageBaseDImpl.prototype.OrgSelect = function (cfg) {
            util.OrgSelect(cfg);
        };
        /**
         * 高级搜索
         * @param  cfg  高级搜索参数对象
         * @param  router  可选 页面路由参数对象
         */
        RxmPageBaseDImpl.prototype.rxmSearch = function (cfg, router) {
            var loadPage = {
                pageId: "rxmSearchGrid",
                pageUrl: "www/rxm/widget/search/views/search.html",
                pageType: "10",
                pageRouter: 'rxmSearchGrid',
            };
            if (typeof router !== 'undefined') {
                loadPage = $.extend({}, loadPage, router);
            }
            var cfgDefault = {
                title: "",
                titleColor: "",
                hiddenTitleBar: "",
                hiddenBackBtn: "",
                titleBarBg: ""
            };
            cfg = $.extend({}, cfgDefault, cfg);
            this.slidebar(loadPage, {
                title: cfg.title,
                titleColor: cfg.titleColor,
                /**可选， 是否隐藏导航栏  默认值 false*/
                hiddenTitleBar: cfg.hiddenTitleBar,
                /** 可选，是否隐藏导航栏返回按钮,hiddenTitleBar参数为true时无效*/
                hiddenBackBtn: cfg.hiddenBackBtn,
                /** 可选，标题栏背景，支持图片和颜色值（#0088cc）,hiddenTitleBar参数为true时无效*/
                titleBarBg: cfg.titleBarBg,
                data: cfg,
                afterClose: cfg.afterClose
            });
        };
        /**
         * 向其他窗口发送通知
         * @param  pageIds 接收notify的窗口id,多个以英文逗号分隔
         * @param  notifyObj 发送的消息
         */
        RxmPageBaseDImpl.prototype.postPageNotify = function (pageIds, notifyObj) {
            (!pageIds || pageIds.length == 0) && function () {
                console.error('pageIds内容不能为空');
                return;
            }();
            if (!notifyObj || !notifyObj.notifyType) {
                console.error('notify内容和类型不能为空');
                return;
            }
            var notifyString = JSON.stringify(notifyObj);
            rxm_page && rxm_page.sendNotifyTo(pageIds, notifyString);
        };
        /**
          * 绑定bodyready函数,触发回调
          * @param  args  绑定bodyready参数对象
          */
        RxmPageBaseDImpl.prototype.bindPageReady = function (args) {
            if (!args.callback) {
                return;
            }
            $("rxmPageBodyReady").rxmBindCmd(args);
        };
        RxmPageBaseDImpl.prototype.__rxmbgn = function () {
            var ret = this.init ? this.init() : false;
            $("rxmPageBodyReady").rxmTriggerCmd({ data: { idsTrgger: "self" } });
        };
        /**
         * 绑定函数，接受来自其他窗口页面的消息
         * @param args 绑定函数接受来自其他窗口页面消息参数对象
         */
        RxmPageBaseDImpl.prototype.bindPageNotify = function (args) {
            cssOrm.on({ msgType: args.notifyType, callback: args.callback, one: args.one, id: 'pgntfy' });
        };
        return RxmPageBaseDImpl;
    }());
    var thisObj = new RxmPageBaseDImpl();
    var _onTapClose = function (e) {
        thisObj.closePage();
    };
    thisObj.bindPageNotify({ notifyType: 'NotifyCloseByOtherPage', callback: $.proxy(_onTapClose, thisObj) });
    $('rxmPageClose').rxmBindCmd({ callback: $.proxy(_onTapClose, thisObj) });
    $('rxmPageRefresh').rxmBindCmd({ callback: $.proxy(_onRefresh, thisObj) });
    // 回调方法
    if (typeof rxm_page !== 'undefined') {
        thisObj.forbidWebViewAttr();
        rxm_page.menuBlock = thisObj.menuBlock;
        rxm_page.getAppInfoBlock = function (data) {
            $(document).trigger(widgetMsgNames.GetAppInfo, JSON.parse(data));
        };
        /** 3.1. cbJumpPage--jumpPage回调方法   actionID 永远是CI,前提，一个窗口只有一个弹出窗口 相当于Dialog*/
        rxm_page.jumpBlock = function (actionID, url, args) {
            var Msg = widgetMsgNames.JumpPageMsg + '_' + actionID;
            args && typeof args !== 'object' && (args = JSON.parse(args));
            $(document).trigger(Msg, args);
        };
        /** 3.2. cbGetJumpPageArgs--getJumpPageArgs回调方法*/
        rxm_page.getJumpPageArgsBlock = function (args) {
        };
        /**?
        *3.3. cbGetWindowBounds--getWindowBounds回调方法
        * @param  {Number} w 宽度
        * @param  {Number} h 高度
         */
        rxm_page.getWindowBoundsBlock = function (w, h) { };
        /**3.4. cbGetGlobalConfig--getGlobalConfig回调方法
         * @param  {String}  key global.xml 中定义的key
         * @param  {String} value key 对应的值
         */
        rxm_page.getAppCfgBlock = function (key, value) {
        };
        /**
         *cbGetLoginStatus--getLoginStatus回调方法
         *@param  {String} key getLoginStatus方法中定义的key
         *@param  {String } value 对应的值
         */
        rxm_page.getLoginStatusBlock = function (key, value) {
            var a = {
                key: key,
                value: value
            };
            $(document).trigger(widgetMsgNames.GetLoginStatusMsg, a);
        };
        /**
         *cbLogout--logout回调方法
         */
        rxm_page.logoutBlock = function () {
            $(document).trigger(widgetMsgNames.Logout, '');
        };
        /**
         * 3.6. cbGetKeyValue--getKeyV alue回调方法
         * @param {String} key  key值 用于h5和插件共同使用的一个变量 设置key－value,key由本地定义。 仅在h5中使用的key ，value，请使用【cipLocalStorage】实现。回调方法
         * @param {String} value  key 对应的值
         */
        rxm_page.getKeyAndValueBlock = function (key, value) {
        };
        /**
         * 4.2. cbBackBtnClick--标题栏返回按钮点击监听方法
         */
        rxm_page.backBtnClickBlock = function () {
        };
        rxm_page.leftBtnClickBlock = function () {
            cssOrm.trigger(widgetMsgNames.ShowLeftBtn, '');
        };
        rxm_page.getSelectedTabBlock = function (pageId) {
            $(document).trigger(widgetMsgNames.getSelectedTab, pageId);
        };
        if (typeof rxm_force != 'undefined') {
            rxm_force.getForceSysDeviceIDBlock = function (key, forceId) {
                $(document).trigger(widgetMsgNames.GetForceSysDeviceID, forceId);
            };
        }
        /**
         * 2018-06-29
         * rxmPage.sendNotifyTo 向其他窗口发送消息
         */
        rxm_page.sendNotifyBlock = function (from, notifyObj) {
            notifyObj = JSON.parse(from);
            cssOrm.trigger(notifyObj.notifyType, 'pgntfy', notifyObj);
        };
    }
    return thisObj;
});

define("RxmFileReader", ['RxmAppTool', "RxmFileMgr"], function (appTool, nativeCls) {
    ///<param  name="nativeCls"  type="clsFileMgrBase"><param>
    var clsFileMgr = cssOrm.obj.clsFileMgr().constructor;
    var clsFileReader = function (args) {
        ///<param  name="args" type="clsFileReaderArgs">参数类型为clsFileReaderArgs </param>  
        this.option = args || {};
        this.uid = appTool.unid();
        if (args.len) {
            cssOrm.on({
                msgType: clsFileMgr.msg.openFile,
                data: this, id: this.uid, one: true, callback: $.proxy(this._onOpen, this)
            });
            cssOrm.obj.clsFileMgr().openFile(this.uid, args.path, clsFileMgr.openMode.readOnly);
        }
    };
    clsFileReader.prototype._onOpen = function (e, data) {
        if (data == 1) { //成功
            cssOrm.on({ data: this, id: this.uid, msgType: clsFileMgr.msg.readFile, one: true, callback: $.proxy(this._onReader, this) });
            cssOrm.obj.clsFileMgr().readFile(this.uid, -1);
        }
        else {
            this.option.error("打开失败", data);
        }
    };
    clsFileReader.prototype._onReader = function (e, data) {
        this.option.success(data);
    };
    clsFileReader.prototype.read = function (len) {
        ///<summary> 读len长度文件,没完成</summary>
        ///<returns  type="String"></returns>
        return "";
    };
    return clsFileReader;
});

define('RxmDownload', ["RxmOpenFile"], function (objOrmOpenFile) {
    ///<param name="objOrmOpenFile" value="objOrmOpenFile"></param>
    if (typeof rxm_download == 'undefined') {
        return;
    }
    if (typeof cssOrm.cls.clsOrmDownloadExt != "undefined") {
        return cssOrm.cls.clsOrmDownloadExt;
    }
    var cls = function cls(arg) {
        ///<param name="arg" value="cssArgs.clsOrmDownloadExt.addFile"></param>
        this._curFile = {
            pos: -1,
            id: ""
        };
        //记录用户数据
        this._config = arg;
        //这次把回叫放在本类内部
        this._onProgressCallback = function (e, data) {
            var sizeTotal = 0;
            var sizeAlready = Number(data.downloadSize);
            var totalPercent = '';
            for (var i = 0; i < this._config.files.length; i++) {
                if (this._config.files[i].fileSize) {
                    sizeTotal = sizeTotal + Number(this._config.files[i].fileSize);
                    if ((this._config.files[i].filePath != "") && (this._config.files[i].fileId.indexOf(data.resId) == -1)) {
                        sizeAlready = sizeAlready + Number(this._config.files[i].fileSize);
                    }
                }
                else {
                    sizeTotal = 0;
                    break;
                }
            }
            //            console.log("sizeTotal==="+sizeTotal);
            //            console.log("sizeAlready===" + sizeAlready);
            if (sizeTotal > 0) {
                totalPercent = sizeAlready / sizeTotal * 100;
            }
            var thisFilePercent = data.downloadSize / data.fileSize * 100;
            //            console.log(" thisFilePercent====" + thisFilePercent);
            //            console.log("totalPercent===" + totalPercent)
            if (!!arg.progressCallback) {
                arg.progressCallback("", {
                    file: this._config.files[this._curFile.pos],
                    totalPercent: totalPercent,
                    thisFilePercent: thisFilePercent
                });
            }
        };
        this._onStatusCallback = function (e, data) {
            var arg = e.data;
            //          console.log("data.status=="+data.status);
            //          console.log("data.fileSize=="+data.fileSize);
            //          console.log("data.localFilePath=="+data.localFilePath);
            if (data.fileSize <= 0) {
                data.status = 4;
            }
            if (!!this._config.singleFileStatusCallback) {
                var json = {
                    file: this._config.files[this._curFile.pos],
                    status: data.status
                };
                this._config.singleFileStatusCallback("", json);
            }
            if (data.status == 3) { //成功  找到下一个文件
                if (this._config.files[this._curFile.pos].filePath != data.localFilePath) {
                    if (data.fileSize > 0) {
                        this._config.files[this._curFile.pos].filePath = data.localFilePath;
                        this._config.files[this._curFile.pos].fileSize = data.fileSize;
                    }
                    else {
                        this._config.files[this._curFile.pos].filePath = '';
                    }
                    this.startDown();
                }
            }
            else if (data.status == 4) {
                this._config.files[this._curFile.pos].filePath = '';
                this.startDown();
                if (!!this._config.errorCallback) {
                    this._config.errorCallback("", this._config.files[this._curFile.pos]);
                }
            }
            ;
        };
        this._cbAddDownloadTask = function (e, data) {
        };
    };
    cls.prototype.startDown = function () {
        if (this._curFile.pos < this._config.files.length - 1) {
            //移动到下一个文件
            this._curFile.pos++;
            this._curFile.id = this._config.files[this._curFile.pos].fileId;
            var curFile = this._config.files[this._curFile.pos];
            var herf = this._curFile.id;
            if (herf.indexOf("http://") == -1 && herf.indexOf("https://") == -1) {
                var host = require("RxmAppTool").getUpdateUrl() + "/resoft/x/file/down?fileId=";
                if (host.length > 0) {
                    if (herf.indexOf("resoft/x/file/down") == -1) {
                        herf = host + herf;
                    }
                    else {
                        var server = require("RxmAppTool").getServer();
                        if (herf.indexOf(server) === 0) {
                            herf = herf.replace(server, host);
                        }
                    }
                }
            }
            else {
                this._curFile.id = herf.split("=")[1];
            }
            this._addEvent();
            cls.addDownloadTask(herf, curFile.title || "", curFile.picUrl || "", this._curFile.id, curFile.fileType);
        }
        else {
            //发完成的消息
            if (!!this._config.completedCallback) {
                this._config.completedCallback("", this._config.files);
            }
            if (this._config.openDowned) {
                if ($.isString(this._config.openDowned)) {
                    for (var i = 0; i < this._config.files.length; i++) {
                        if (this._config.files[i].fileId == this._config.openDowned) {
                            objOrmOpenFile.openFile(this._config.files[i].filePath);
                        }
                    }
                }
                else {
                    objOrmOpenFile.openFile(this._config.files[0].filePath);
                }
            }
        }
    };
    cls.prototype.endDown = function () {
    };
    cls.prototype._addEvent = function () {
        ///<summary>主要是初始化消息队列 </summary>
        cssOrm.on({
            //必填 消息类型
            msgType: cls.msg.cbAddDownloadTask,
            // 可选 消息id 用于返回时识别  
            id: this._curFile.id,
            //可选
            data: this._config,
            //必填,回叫函数
            callback: $.proxy(this._cbAddDownloadTask, this),
            //Boolean ,可选 是否只是运行一次
            one: true
        });
        cssOrm.on({
            //必填 消息类型
            msgType: cls.msg.onProgressCallback,
            // 可选 消息id 用于返回时识别  
            id: this._curFile.id,
            //可选
            data: this._config,
            //必填,回叫函数
            callback: $.proxy(this._onProgressCallback, this),
            //Boolean ,可选 是否只是运行一次
            one: false
        });
        cssOrm.on({
            //必填 消息类型
            msgType: cls.msg.onStatusCallback,
            // 可选 消息id 用于返回时识别  
            id: this._curFile.id,
            //可选
            data: this._config,
            //必填,回叫函数
            callback: $.proxy(this._onStatusCallback, this),
            //Boolean ,可选 是否只是运行一次
            one: false
        });
    };
    ///以下为全局函数，主要是对rxm_download的函数封装和消息定义
    cls.msg = {
        cbAddDownloadTask: "cbAddDownloadTask",
        //下载状态改变的监听方法
        onStatusCallback: "onStatusCallback",
        //下载进度的监听方法
        onProgressCallback: "onProgressCallback"
    };
    cls.prototype.downFlies = function (arg) {
        ///<summary> 下载入口<summary>
        ///<param name="arg" value="cssArgs.clsOrmDownloadExt.addFile"></param>
        ///<returns type="cls"></returns>
        var r = new cls(arg);
        r.startDown();
        return r;
    };
    cls.prototype.reload = function (args) {
        for (var i = 0; i < args.files.length; i++) {
            var href = args.files[i].fileId;
            args.files[i].filePath = "";
            if (href.indexOf("http://") == -1 && href.indexOf("https://") == -1) {
                var host = require("RxmAppTool").getUpdateUrl();
                if ((host.length > 0) && (href.indexOf("resoft/x/file/down") > -1)) {
                    var server = require("RxmAppTool").getServer();
                    if (href.indexOf(server) === 0) {
                        href = href.replace(server, host + "//");
                    }
                }
                var host = require("RxmAppTool").getUpdateUrl() + "/resoft/x/file/down?fileId=";
                if (host.length > 0) {
                    if (href.indexOf("resoft/x/file/down") == -1) {
                        href = host + href;
                    }
                    else {
                        var server = require("RxmAppTool").getServer();
                        if (href.indexOf(server) === 0) {
                            href = href.replace(server, host);
                        }
                    }
                }
            }
            ;
            rxm_download.deleteDownloadByUrl(href);
        }
        this.downFlies(args);
    };
    cls.prototype.getFilepath = function () {
        if (arr.length == pathArr.length) {
            return pathArr;
        }
    };
    cls.addDownloadTask = function (url, title, picUrl, resId, fileType) {
        ///<summary>添加一条下载记录并启动</summary>
        rxm_download.addDownloadTask(url, title, picUrl, resId, fileType);
    };
    cls.pauseAllDownloadTask = function (arg) {
        ///<summary>暂停所有下载</summary>
        rxm_download.pauseAllDownloadTask();
    };
    cls.deleteAllDownloadTask = function (arg) {
        ///<summary>删除所有任务</summary>
        rxm_download.deleteAllDownloadTask();
    };
    cls.deleteAllDownloadTaskAndFile = function (arg) {
        ///<summary>删除所有任务同时删除本地文件</summary>
        //        cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.deleteAllDownloadTaskAndFile, one: true });
        rxm_download.deleteAllDownloadTaskAndFile();
    };
    cls.openDownloadManager = function (type) {
        ///<summary>打开下载管理器</summary>
        //        cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.openDownloadManager, one: true });
        if (type) {
            rxm_download.openDownloadManager(type);
        }
        else {
            rxm_download.openDownloadManager();
        }
    };
    cls.getDownloadStatus = function (arg) {
        ///<summary>获取下载状态</summary>
        cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.getDownloadStatus, one: true });
        rxm_download.getDownloadStatus(arg.args);
    };
    rxm_download.addDownloadTaskBlock = function (resId, downloadId) {
        ///<summary> 添加下载队列回调</summary>
        cssOrm.trigger(cls.msg.cbAddDownloadTask, resId, {
            resId: resId,
            downloadId: downloadId
        });
    };
    rxm_download.onStatusCallback = function (resId, downloadId, status, fileSize, localFilePath) {
        ///<summary>下载状态改变的监听方法</summary>
        cssOrm.trigger(cls.msg.onStatusCallback, resId, {
            resId: resId,
            downloadId: downloadId,
            status: status,
            fileSize: fileSize,
            localFilePath: localFilePath
        });
    };
    rxm_download.onProgressCallback = function (resId, downloadId, fileSize, downloadSize) {
        ///<summary>下载进度的监听方法</summary>
        //        console.log("onStatusCallback resId==" + resId);
        //        console.log("onStatusCallback fileSize==" + fileSize);
        //        console.log("onStatusCallback downloadSize==" + downloadSize);
        cssOrm.trigger(cls.msg.onProgressCallback, resId, {
            resId: resId,
            downloadId: downloadId,
            fileSize: fileSize,
            downloadSize: downloadSize
        });
    };
    rxm_download.getDownloadStatusBlock = function (jsonArray) {
        cssOrm.trigger(cls.msg.getDownloadStatus, jsonArray);
    };
    return new cls();
});

define("RxmMessageListener", ['RxmMessage'], function (ormMsg) {
    ///<param  name="ormMsg" type="objOrmMessage"></param>
    var cls = function () {
    };
    cls.prototype.callbackMsg = function (arg, scope) {
        ///<param  name="arg" value="cssArgs.clsOrmMessageListener.callbackMsg"></param>
        cssOrm.on({
            //必填 消息类型
            msgType: arg.when,
            // 可选 消息id 用于返回时识别  
            id: arg.msgType,
            //可选
            data: arg.data,
            //必填,回叫函数
            callback: arg.callback,
            //Boolean ,可选 是否只是运行一次
            one: false
        });
    };
    return cls;
});

define('RxmActionSheet', ["RxmActionSheetBase"], function (nativeCls) {
    ///<param  name="nativeCls"  type="clsActionSheetBase"><param>
    if (cssOrm.obj.objOrmActionSheet) {
        return cssOrm.obj.objOrmActionSheet();
    }
    ;
    function clsActionSheet() {
        ///<summary>打开菜单</summary>
    }
    clsActionSheet.prototype.openListSheet = function (args) {
        ///<summary>打开列表型菜单</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        var uid = Math.round(Math.random() * 10000000) + "";
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "openListSheet", one: true, id: uid });
        nativeCls.openListSheet(uid, JSON.stringify(args.json), args.title);
    };
    clsActionSheet.prototype.openGridSheet = function (args) {
        ///<summary>根据文本创建对应二维码图片</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        var uid = Math.round(Math.random() * 10000000) + "";
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "openGridSheet", one: true, id: uid });
        nativeCls.openGridSheet(uid, JSON.stringify(args.json), args.title);
    };
    cssOrm.declare("objOrmActionSheet", clsActionSheet, true);
    return cssOrm.obj.objOrmActionSheet();
});

define('RxmAudio', ["RxmAudioBase"], function (nativeCls) {
    ///<param  name="nativeCls"  type="clsAudioBase"><param>
    if (cssOrm.obj.objOrmAudio) {
        return cssOrm.obj.objOrmAudio();
    }
    ;
    function clsAudio() {
        ///<summary>本地音频播放插件</summary>
    }
    clsAudio.prototype.openPlayer = function (args) {
        ///<summary>打开音频播放器</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ data: args.data, msgType: "audioOpen", one: true, id: "" });
        if (args.param) {
            nativeCls.openPlayer(args.param);
        }
        else if (args.paths) {
            if (args.index) {
                nativeCls.openPlayer(args.paths, args.index);
            }
            else {
                nativeCls.openPlayer(args.paths);
            }
        }
    };
    clsAudio.prototype.openOnlineAudio = function (args) {
        ///<summary>在线打开音频</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        var herf = args.url;
        if (herf.indexOf("http://") == -1 && herf.indexOf("https://") == -1) {
            var host = require("RxmAppTool").getUpdateUrl() + "/resoft/x/file/down?fileId=";
            if (host.length > 0) {
                if (herf.indexOf("resoft/x/file/down") == -1) {
                    herf = host + herf;
                }
                else {
                    var server = require("RxmAppTool").getServer();
                    if (herf.indexOf(server) === 0) {
                        herf = herf.replace(server, host);
                    }
                }
            }
        }
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "audioOpenBackground", one: true, id: "" });
        nativeCls.open(herf, 0);
    };
    clsAudio.prototype.open = function (args) {
        ///<summary>后台打开音频播放器</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "audioOpenBackground", one: true, id: "" });
        nativeCls.open(args.path, args.repeats);
    };
    clsAudio.prototype.closePlayer = function (args) {
        ///<summary>关闭音频播放器</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "audioClose", one: true, id: "" });
        nativeCls.closePlayer();
    };
    clsAudio.prototype.record = function (args) {
        ///<summary>录制音频</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "audioCbRecord", one: true, id: "" });
        delete args.callback;
        delete args.data;
        nativeCls.record(args);
    };
    clsAudio.prototype.startBackgroundRecord = function (args) {
        ///<summary>开始后台录音</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "audioStartBackgroundRecord", one: true, id: "" });
        delete args.callback;
        delete args.data;
        nativeCls.startBackgroundRecord(args);
    };
    clsAudio.prototype.stopBackgroundRecord = function () {
        ///<summary>停止后台录音</summary>
        nativeCls.stopBackgroundRecord();
    };
    clsAudio.prototype.pause = function () {
        ///<summary>暂停</summary>
        nativeCls.pause();
    };
    clsAudio.prototype.replay = function () {
        ///<summary>重播</summary>
        nativeCls.replay();
    };
    clsAudio.prototype.stop = function () {
        ///<summary>停止</summary>
        nativeCls.stop();
    };
    cssOrm.declare("objOrmAudio", clsAudio, true);
    return cssOrm.obj.objOrmAudio();
});

define('RxmCamera', ["RxmCameraBase"], function (nativeCls) {
    ///<param  name="nativeCls"  type="clsCameraBase"><param>
    if (typeof rxm_camera == 'undefined') {
        return;
    }
    if (cssOrm.obj.objOrmCamera) {
        return cssOrm.obj.objOrmCamera();
    }
    function clsCamera() {
        ///<summary>摄像头</summary>
    }
    clsCamera.prototype.open = function (arg) {
        ///<summary>调用系统相机,进入拍照界面。</summary>
        ///<param name="arg" value="cssArgs.objOrmCamera.open"></param>
        cssOrm.on({ callback: arg.callback, data: arg.data, msgType: "cameraOpen", one: true, id: "" });
        delete arg.callback;
        delete arg.data;
        nativeCls.openCamera(arg);
    };
    // clsCamera._oncameraOpenBlock = function (data) {
    //     cssOrm.trigger("cameraOpen", "",data);
    // }
    // clsCamera.enumAppMsg={
    //     cameraOpen: "cameraOpen"
    // }
    // rxm_camera.cameraOpenBlock = clsCamera._oncameraOpenBlock;
    cssOrm.declare("objOrmCamera", clsCamera, true);
    return cssOrm.obj.objOrmCamera();
});

define("RxmClip", ["RxmClipBase"], function (nativeCls) {
    ///<param  name="nativeCls"  type="clsClipBase"><param>
    function clsClip() {
        ///<summary>系统剪贴板插件</summary>
    }
    clsClip.prototype.copyToClip = function (args) {
        ///<summary>复制内容到剪切板</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param  name="text"  type="String">必选 内容</param>
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "clipCopy", one: true, id: "" });
        nativeCls.copyToClip(args.text);
    };
    clsClip.prototype.copyFromClip = function (args) {
        ///<summary>获取剪切板的内容</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "clipGet", one: true, id: "" });
        nativeCls.copyFromClip();
    };
    cssOrm.declare("clsOrmClip", clsClip);
    return clsClip;
});

define('RxmContact', ["RxmContactBase"], function (nativeCls) {
    ///<param  name="nativeCls"  type="clsContactBase"><param>
    if (cssOrm.obj.objOrmContact) {
        return cssOrm.obj.objOrmContact();
    }
    function clsContact() {
        ///<summary>联系人</summary>
    }
    clsContact.prototype.open = function (args) {
        ///<summary>打开联系人 callback回叫函数 ，multi 是否打开多人</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="multi",type="Boolean">可选 是否打开多人 undefined  和false 是单选</param>
        ///<param name="data",type="Object">可选  用户数据</param>
        var m = args.multi || false;
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "contactGet", one: true, id: "" });
        if (m) {
            nativeCls.multiOpenContact();
        }
        else {
            nativeCls.openContact();
        }
    };
    clsContact.prototype.addItem = function (args) {
        ///<summary>添加联系人</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="name",type="String">必选  名称</param>
        ///<param name="num",type="Object">必选  电话号码</param>
        ///<param name="email",type="Object">必选  邮件</param>
        ///<param name="hiddenAlertDialog",type="Object">可选  添加过程中是否隐藏弹出”确认添加”提示框，1：需要隐藏；0或者不传：不需要隐藏:</param>
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "contactAdd", one: true, id: "" });
        nativeCls.addContact(args.name, args.num, args.email, args.hiddenAlertDialog);
    };
    clsContact.prototype.deleteItem = function (args) {
        ///<summary>删除联系人</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="name",type="String">必选  名称</param> 
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "contactDel", one: true, id: "" });
        nativeCls.deleteContact(args.name);
    };
    clsContact.prototype.searchItem = function (args) {
        ///<summary>查询联系人</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="name",type="String">必选  名称</param> 
        ///<param name="name",type="Number">可选  一次最多返回的结果条数,默认为50条,-1表示一次返回所有结果</param> 
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "contactSearch", one: true, id: "" });
        nativeCls.searchContact(args.nameKey, args.pageSize);
    };
    clsContact.prototype.modifyItem = function (args) {
        ///<summary>修改联系人 回调方法modifyContactBlock</summary>
        ///<param name="name",type="String">必选  名称</param>
        ///<param name="num",type="Object">必选  电话号码</param>
        ///<param name="email",type="Object">必选  邮件</param>
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "contactModify", one: true, id: "" });
        nativeCls.modifyContact(args.name, args.num, args.email);
    };
    cssOrm.declare("objOrmContact", clsContact, true);
    return cssOrm.obj.objOrmContact();
});

define('RxmControl', ["RxmControlBase"], function (nativeCls) {
    ///<param  name="nativeCls"  type="clsControlBase"><param>
    if (cssOrm.obj.objOrmControl) {
        return cssOrm.obj.objOrmControl();
    }
    ;
    function clsControl() {
        ///<summary>日期选择器插件</summary>
    }
    clsControl.prototype.openDatePicker = function (args) {
        ///<summary>打开日期选择器</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        var uid = Math.round(Math.random() * 10000000) + "";
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "openDatePicker", one: true, id: uid });
        delete args.callback;
        delete args.data;
        nativeCls.openDatePicker(uid, args.withDay, args.year, args.day, args.startyear, args.endyear);
    };
    clsControl.prototype.openTimePicker = function (args) {
        ///<summary>打开时间选择器</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        var uid = Math.round(Math.random() * 10000000) + "";
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "openTimePicker", one: true, id: uid });
        delete args.callback;
        delete args.data;
        nativeCls.openTimePicker(uid, args.hour, args.minute);
    };
    clsControl.prototype.openDateAndTimePicker = function (args) {
        ///<summary>打开年月日时分选择器</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        var uid = Math.round(Math.random() * 10000000) + "";
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "openDateAndTimePicker", one: true, id: uid });
        delete args.callback;
        delete args.data;
        nativeCls.openDateAndTimePicker(uid, args.year, args.month, args.day, args.hour, args.min);
    };
    clsControl.prototype.openTimeAndSecondPicker = function (args) {
        ///<summary>打开时间选择器(包含秒)</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        var uid = Math.round(Math.random() * 10000000) + "";
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "openTimeAndSecondPicker", one: true, id: uid });
        delete args.callback;
        delete args.data;
        nativeCls.openTimeAndSecondPicker(uid, args.hour, args.minute, args.second);
    };
    clsControl.prototype.openInputDialog = function (args) {
        ///<summary>打开输入对话框</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        var uid = Math.round(Math.random() * 10000000) + "";
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "openInputDialog", one: true, id: uid });
        delete args.callback;
        delete args.data;
        nativeCls.openInputDialog(uid, args.type, args.inputHint, args.btnText, args.dialogbg, args.dialogInputBg, args.dialogBtnBg);
    };
    cssOrm.declare("objOrmControl", clsControl, true);
    return cssOrm.obj.objOrmControl();
});

define('RxmDataBaseMgr', ["RxmDbConnect"], function (clsDbConnect) {
    ///<param name="clsDbConnect" type="clsDbConnect"></param>
    if (typeof rxm_sqlite == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.clsDatabaseMgr != "undefined") {
        return cssOrm.obj.clsDatabaseMgr();
    }
    var dbMsg = {};
    dbMsg.openDataBase = "openDataBase";
    dbMsg.executeSql = "executeSql";
    dbMsg.executeTransactionSql = "executeTransactionSql";
    dbMsg.selectSql = "selectSql";
    dbMsg.closeDataBase = "closeDataBase";
    rxm_sqlite.connectBlock = function (opId, data) {
        ///<summary>openDataBase回调方法</summary>
        ///<param  name="opId" type="Number">数据库对象的唯一标识符</param>
        ///<param  name="data" type=" Number">1成功，0失败</param>
        var ret;
        if (data + "" == "1") {
            ret = cssOrm.obj.clsDatabaseMgr()._getConnect(opId);
            ret.opId = opId;
        }
        cssOrm.trigger(dbMsg.openDataBase, "", ret);
    };
    rxm_sqlite.runSqlBlock = function (opId, data) {
        ///<summary> executeSql回调方法 </summary>
        ///<param  name="opId" type="Number">数据库对象的唯一标识符</param>
        ///<param  name="data" type=" String">1成功，0失败</param>
        var cbData = {
            opId: opId,
            success: data + "" == "1" ? true : false
        };
        cssOrm.trigger(dbMsg.executeSql, opId, cbData);
    };
    rxm_sqlite.runTransactionSqlBlock = function (opId, data) {
        ///<summary> executeTransactionSql回调方法 </summary>
        ///<param  name="opId" type="Number">数据库对象的唯一标识符</param>
        ///<param  name="data" type=" Number">1成功，0失败</param>
        var cbData = {
            opId: opId,
            success: data + "" == "1" ? true : false
        };
        cssOrm.trigger(dbMsg.executeTransactionSql, opId, cbData);
    };
    rxm_sqlite.runSelectBlock = function (opId, data, value) {
        ///<summary> selectSql回调方法 </summary>
        ///<param  name="opID" type="Number">数据库对象的唯一标识符</param>
        ///<param  name="data" type=" Number">1成功，0失败</param>
        ///<param  name="value" type="Json">查询结果 json数据</param>
        var s = value || "";
        var cbData = {
            opId: opId,
            success: data + "" == "1" ? true : false,
            value: s.length > 0 ? JSON.parse(value) : []
        };
        cssOrm.trigger(dbMsg.selectSql, opId, cbData);
    };
    rxm_sqlite.disconnectBlock = function (opId, data) {
        ///<summary> 通过路径获取文件大小的回调方法 </summary>
        ///<param  name="opId" type=" Number">数据库对象的唯一标识符</param>
        ///<param  name="data" type=" Number">1成功，0失败</param>
        var cbData = {
            opId: opId,
            success: data + "" == "1" ? true : false
        };
        cssOrm.trigger(dbMsg.closeDataBase, opId, cbData);
    };
    function db() {
    }
    ;
    db.prototype.connect = function (dbName, callback) {
        ///<summary> 获得一个数据库连接</summary>
        ///<param  name="dbName" type="String"> </param>
        ///<param  name="callback"  type="Function">回叫函数  function (data)  </param>
        ///<returns  type="clsDbConnect"></returns>
        this.dbName = dbName;
        cssOrm.on({
            callback: callback,
            id: "",
            msgType: dbMsg.openDataBase,
            one: true
        });
        rxm_sqlite.connect(dbName);
    };
    db.prototype._getConnect = function (name) {
        if (typeof this[name] == "undefined") {
            this[name] = new clsDbConnect(name);
        }
        return this[name];
    };
    cssOrm.declare("clsDatabaseMgr", db, true);
    return cssOrm.obj.clsDatabaseMgr();
});

define('RxmDevice', [], function () {
    ///<param  name="nativeCls"  type="clsAudioBase"><param>
    if (cssOrm.obj.objOrmDevice) {
        return cssOrm.obj.objOrmDevice();
    }
    ;
    function cls() {
        ///<summary>设备信息</summary>
    }
    cls.deviceOpEnum = {
        getDeviceInfo: "getDeviceInfo"
    };
    cls.prototype.vibrate = function (args) {
        ///<summary>开启设备震动</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        // rxm_device.vibrate(milliseconds)
    };
    cls.prototype.getDeviceInfo = function (args) {
        ///<summary>获取设备信息</summary>
        ///<param name="args" value="cssArgs.objOrmDevice.getDeviceInfo">参数</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: cls.deviceOpEnum.getDeviceInfo, one: true, id: "" });
        rxm_device.curDeviceInfo();
    };
    cssOrm.declare("objOrmDevice", cls, true);
    if (typeof rxm_device == "undefined")
        return cssOrm.obj.objOrmDevice();
    rxm_device.curDeviceInfoBlock = function (data) {
        var arg = JSON.parse(data);
        cssOrm.trigger(cls.deviceOpEnum.getDeviceInfo, "", arg);
    };
    return cssOrm.obj.objOrmDevice();
});

define('RxmNativeDialog', [], function () {
    if (typeof rxm_dialog == 'undefined') {
        return;
    }
    function clsCipDialog() {
    }
    ;
    clsCipDialog.prototype.alert = function (args) {
        ///<summary>显示带有一段消息和一个确认按钮的警告框</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="message",type="String">必选  要在 window 上弹出的对话框中显示的纯文本</param>
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: clsCipDialog.enumAppMsg.dialogAlert, one: true, id: "" });
        rxm_dialog.alert(args.message);
    };
    clsCipDialog.prototype.confirm = function (args) {
        ///<summary>显示带有一段消息以及确认按钮和取消按钮的对话框。</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="message",type="String">必选  要在 window 上弹出的对话框中显示的纯文本</param>
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: clsCipDialog.enumAppMsg.dialogConfirm, one: true, id: "" });
        rxm_dialog.confirm(args.message);
    };
    clsCipDialog.prototype.prompt = function (args) {
        ///<summary>显示可提示用户输入的对话框</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param  name="text"  type="String">可选 要在对话框中显示的纯文本（而不是 HTML 格式的文本）。</param>
        ///<param  name="defaultText"  type="String">可选 默认的输入文本</param>
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: clsCipDialog.enumAppMsg.dialogPrompt, one: true, id: "" });
        rxm_dialog.prompt(args.message, args.text, args.placeholder, args.title, args.btnok, args.btncancel);
    };
    clsCipDialog._oncbConfirm = function (data) {
        var a = {
            data: data
        };
        cssOrm.trigger(clsCipDialog.enumAppMsg.dialogConfirm, a);
    };
    clsCipDialog._oncbPrompt = function (data) {
        var a = {
            data: data
        };
        cssOrm.trigger(clsCipDialog.enumAppMsg.dialogPrompt, "", data);
    };
    clsCipDialog.enumAppMsg = {
        dialogConfirm: "dialogConfirm",
        dialogPrompt: "dialogPrompt",
        dialogAlert: "dialogAlert"
    };
    //    clsCipDialog.enumAppMsg["dialogConfirm"] = "dialogConfirm";
    //    clsCipDialog.enumAppMsg.dialogPrompt = "dialogPrompt";
    //    clsCipDialog.enumAppMsg.dialogAlert = "dialogAlert";
    rxm_dialog.confirmBlock = clsCipDialog._oncbConfirm;
    rxm_dialog.promptBlock = clsCipDialog._oncbPrompt;
    return new clsCipDialog();
});

define('RxmDownloadA', ["RxmDownload"], function (clsOrmDownloadExt) {
    ///<param name="clsOrmDownloadExt" value="clsOrmDownloadExt"></param>
    if (typeof cssOrm.obj.objOrmDownloadExt != "undefined") {
        return cssOrm.obj.objOrmDownloadExt();
    }
    function cls() {
    }
    ;
    cls.prototype._onTap = function () {
        var o = event.target;
        var href = $(o).attr("href");
        if (href.indexOf("http://") == -1 && href.indexOf("https://") == -1) {
            var host = require("RxmAppTool").getUpdateUrl();
            if ((host.length > 0) && (href.indexOf("resoft/x/file/down") > -1)) {
                var server = require("RxmAppTool").getServer();
                if (href.indexOf(server) === 0) {
                    href = href.replace(server, host + "//");
                }
            }
        }
        ;
        var fileName = $(o).attr("fileName");
        var fileType = $(o).attr("fileType");
        var picUrl = $(o).attr("picUrl");
        var args = {
            files: [{
                    fileId: href,
                    title: fileName,
                    picUrl: picUrl,
                    fileType: fileType
                }],
            completedCallback: function (e, arg) {
                var path = [];
                //                console.log(arg);
            },
            openDowned: true
        };
        clsOrmDownloadExt.downFlies(args);
    };
    cls.prototype.reload = function (url) {
        //	   var href = url;
        //       if (href.indexOf("http://") == -1) {
        //           var host = require("RxmAppTool").getUpdateUrl();
        //           if ((host.length > 0) && (href.indexOf("resoft/x/file/down") > -1)) {
        //               var server = require("RxmAppTool").getServer();
        //               if (href.indexOf(server) === 0) {
        //                   href = href.replace(server, host+"//");
        //               }
        //           }
        //           var host = require("RxmAppTool").getUpdateUrl() + "/resoft/x/file/down?fileId=";
        //           if (host.length > 0) {
        //        	   if(href.indexOf("resoft/x/file/down") == -1){
        //        		   href=host+href;
        //        	   }else{
        //        		   var server = require("RxmAppTool").getServer();
        //                   if (href.indexOf(server) === 0) {
        //                	   href = href.replace(server, host);
        //                   }
        //        	   }
        //              
        //           }
        //       };
        //
        //       cipDownloadExt.deleteDownloadByUrl(href);
        var args = {
            files: [{
                    fileId: url
                }],
            openDowned: true
        };
        clsOrmDownloadExt.reload(args);
    };
    cssOrm.declare("objOrmDownloadExt", cls, true);
    $(".rxm-body").on("tap", "a.orm-file-down", $.proxy(cls.prototype._onTap, cssOrm.obj.objOrmDownloadExt()));
    $(".rxm-body").on("click", "a.orm-file-down", function () { event.preventDefault(); event.stopPropagation(); return false; });
    return cssOrm.obj.objOrmDownloadExt();
});

define("RxmDownloadMuliti", [""], function () {
    if (typeof rxm_download == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.objOrmDownloadExtMulti != "undefined") {
        return cssOrm.obj.objOrmDownloadExtMulti();
    }
    function cls() {
    }
    ;
    cls.msg = {
        cbAddDownloadTask: "cbAddDownloadTask",
        //下载状态改变的监听方法
        onStatusCallback: "onStatusCallback",
        //下载进度的监听方法
        onProgressCallback: "onProgressCallback"
    };
    cls.prototype.addDownloadTask = function (href) {
        ///<summary>添加一条下载记录并启动</summary>
        rxm_download.addDownloadTask(href);
    };
    cls.prototype.addFlie = function (arg) {
        var files = [];
        files = arg.files;
        var curFile = files[0];
        function _addFlie(curFile) {
            cssOrm.on({
                //必填 消息类型
                msgType: cls.msg.cbAddDownloadTask,
                // 可选 消息id 用于返回时识别  
                id: curFile.fileId,
                //可选
                data: arg,
                //必填,回叫函数
                callback: function (e, data) {
                    e.data;
                    data;
                },
                //Boolean ,可选 是否只是运行一次
                one: true
            });
            cssOrm.on({
                //必填 消息类型
                msgType: cls.msg.onProgressCallback,
                // 可选 消息id 用于返回时识别  
                id: curFile.fileId,
                //可选
                data: arg,
                //必填,回叫函数
                callback: function (e, data) {
                    if (!!arg.progressCallback) {
                        arg.progressCallback();
                    }
                },
                //Boolean ,可选 是否只是运行一次
                one: false
            });
            cssOrm.on({
                //必填 消息类型
                msgType: cls.msg.onStatusCallback,
                // 可选 消息id 用于返回时识别  
                id: curFile.fileId,
                //可选
                data: arg,
                //必填,回叫函数
                callback: function (e, data) {
                    var arg = e.data;
                    if (!!arg.singleFileStatusCallback) {
                        arg.singleFileStatusCallback(data);
                    }
                    ;
                    if (data.status == 3) { //成功  找到下一个文件
                        arg.files[0].path = data.localFilePath;
                        files.splice(0, 1);
                        if (files.length == 0) {
                            //全部文件被完成，激活 
                            arg.completedCallback(arg.files);
                        }
                        else {
                            var curFile = files[0];
                            _addFlie(curFile);
                        }
                    }
                },
                //Boolean ,可选 是否只是运行一次
                one: false
            });
            this.addDownloadTask(curFile.fileId);
        }
    };
    //cls.prototype.download = function () {
    //    if (arr.length == 0) return;
    //    var href = require("RxmAppTool").getUpdateUrl() + "/resoft/x/file/down?fileId=" + arr[0];
    //    this.addDownloadTask(href);
    //}
    cls.prototype.getFilepath = function () {
        //        console.log(arr);
        //        console.log(pathArr);
        if (arr.length == pathArr.length) {
            return pathArr;
        }
    };
    cls.prototype.addDownloadTask = function (href) {
        ///<summary>添加一条下载记录并启动</summary>
        //cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.addDownloadTask, one: true });
        var href = require("RxmAppTool").getUpdateUrl() + "/sword/x/file/down?fileId=" + href;
        rxm_download.addDownloadTask(href);
    };
    cls.prototype.pauseAllDownloadTask = function (arg) {
        ///<summary>暂停所有下载</summary>
        cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.pauseAllDownloadTask, one: true });
        rxm_download.pauseAllDownloadTask();
    };
    cls.prototype.deleteAllDownloadTask = function (arg) {
        ///<summary>删除所有任务</summary>
        cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.deleteAllDownloadTask, one: true });
        rxm_download.deleteAllDownloadTask();
    };
    cls.prototype.deleteAllDownloadTaskAndFile = function (arg) {
        ///<summary>删除所有任务同时删除本地文件</summary>
        cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.deleteAllDownloadTaskAndFile, one: true });
        rxm_download.deleteAllDownloadTaskAndFile();
    };
    cls.prototype.openDownloadManager = function (arg) {
        ///<summary>打开下载管理器</summary>
        cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.openDownloadManager, one: true });
        rxm_download.openDownloadManager();
    };
    cls.prototype.getDownloadStatus = function (arg) {
        ///<summary>获取下载状态</summary>
        cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.getDownloadStatus, one: true });
        rxm_download.getDownloadStatus(arg.args);
    };
    rxm_download.addDownloadTaskBlock = function (resId, downloadId) {
        ///<summary> 添加下载队列回调</summary>
        cssOrm.trigger(cls.msg.cbAddDownloadTask, resId, {
            resId: resId,
            downloadId: downloadId
        });
    };
    rxm_download.onStatusCallback = function (resId, downloadId, status, fileSize, localFilePath) {
        ///<summary>下载状态改变的监听方法</summary>
        cssOrm.trigger(cls.msg.onStatusCallback, resId, {
            resId: resId,
            downloadId: downloadId,
            status: status,
            fileSize: fileSize,
            localFilePath: localFilePath
        });
    };
    rxm_download.onProgressCallback = function (resId, downloadId, fileSize, downloadSize) {
        ///<summary>下载进度的监听方法</summary>
        cssOrm.trigger(cls.msg.onProgressCallback, resId, {
            resId: resId,
            downloadId: downloadId,
            fileSize: fileSize,
            downloadSize: downloadSize
        });
    };
    rxm_download.getDownloadStatusBlock = function (jsonArray) {
        cssOrm.trigger(cls.msg.getDownloadStatus, jsonArray);
    };
    cssOrm.declare("objOrmDownloadExtMulti", cls, true);
    return cssOrm.obj.objOrmDownloadExtMulti();
});

define('RxmFile', ['RxmAppTool'], function (appTool) {
    if (typeof rxm_file == 'undefined') {
        return;
    }
    if (cssOrm.obj.objOrmFile) {
        return cssOrm.obj.objOrmFile();
    }
    cls.msg = {
        getFileTypeByPath: "getFileTypeByPath",
        deleteFileByPath: "deleteFileByPath",
        explorer: "explorer",
        multiExplorer: "multiExplorer",
        getFileLastModifiedTime: "getFileLastModifiedTime",
        renameFile: "renameFile",
        search: "search",
        getFileListByPath: "getFileListByPath",
        getFileSizeByPath: "getFileSizeByPath",
        copyFile: "copyFile",
        getFileMD5: "getFileMD5",
        getImageThumb: "getImageThumb",
        isFileExistByPath: "isFileExistByPath",
        getSystemCacheSize: "getSystemCacheSize",
        cleanSystemCache: "cleanSystemCache",
        cleanSystemCacheFile: "cleanSystemCacheFile"
    };
    function cls() {
    }
    ;
    cls.prototype.getFileExt = function (filePath) {
        ///<summary> 获取扩展名  </summary>
        ///<param name="filePath" type="String"> 路径</param>
        ///<returns type="String">返回扩展名</returns>
        var a = filePath.lastIndexOf(".");
        var ret = (a >= 0) ? filePath.substr(a + 1) : "";
        return ret;
    };
    cls.prototype.getFileName = function (filePath) {
        ///<param name="filePath" type="String"> 路径</param>
        ///<returns type="String">返回名字</returns>
        var a = -1;
        var end = (a = filePath.lastIndexOf(".")) > -1 ? a : filePath.length;
        var start = (a = filePath.lastIndexOf("/")) > -1 ? a + 1 : 0;
        return filePath.substring(start, end);
    };
    cls.prototype.getFileNameWithExt = function (filePath) {
        ///<summary> 获取全名  </summary>
        ///<param name="filePath" type="String"> 路径</param>
        ///<returns type="String">返回名字</returns>
        var a;
        var start = (a = filePath.lastIndexOf("/")) > -1 ? a + 1 : 0;
        return filePath.substr(start);
    };
    cls.prototype.isFileExistByPath = function (arg) {
        ///<param name="arg"  value="cssArgs.objOrmFile.isFileExistByPath"> </param>
        var id = appTool.unid() + "";
        cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.isFileExistByPath, one: true });
        rxm_file.isExistByPath(id, arg.filePath);
    };
    cls.prototype.getFileTypeByPath = function (arg) {
        ///<param name="arg"  value="cssArgs.objOrmFile.getFileTypeByPath"> </param>
        var id = appTool.unid() + "";
        cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.getFileTypeByPath, one: true });
        rxm_file.getTypeByPath(id, arg.filePath);
    };
    cls.prototype.deleteFileByPath = function (arg) {
        ///<param  name="arg" value="cssOrm.default.objOrmFile.deleteFileByPath"></param>
        var id = appTool.unid() + "";
        cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.deleteFileByPath, one: true });
        rxm_file.deleteByPath(id, arg.filePath);
    };
    cls.prototype.getFileAtrr = function (file) {
        ///<summary>获取文件属性</summary>
        ///<param  name="file" value="cssArgs.objOrmFile.explorer"></param>
        var arr = [];
        if ($.isArray(file)) {
            arr = file;
        }
        else {
            arr.push(file);
        }
        file.AttrCallback = function (evt, arg) {
            //到此
            switch (this.curOp) {
                case 'fileSize':
                    {
                    }
                    ;
                    break;
                case "":
                    {
                    }
                    ;
                    break;
            }
        };
        var ormfile = cssOrm.obj.objOrmFile();
        $.each(arr, function (index, item) {
            for (var it in item) {
                item.fileExt = ormfile.getFileExt(item.filePath);
                item.fileName = ormfile.getFileName(item.filePath);
                item.ecallback = item.callback;
                item.callback = file.AttrCallback;
                item.curOp = "fileSize";
                ormfile.getFileSizeByPath(item);
            }
        });
    };
    var explorer = {
        ///初始路径，及选择后的全路径
        filePath: "",
        multiOption: false,
        fileName: "",
        fileExt: "",
        fileSize: -1,
        ///<field type="String">文件缩略图Url地址</field>
        thumbnailUrl: undefined,
        /*{
            width: 100,
            heith: 100,
            quality: 70,
            type:""
        }*/
        lastModifiedDate: undefined,
        md5: undefined,
        httpType: undefined,
        callback: function (arg) {
            ///<param name="arg" value="cssArgs.objOrmFile.explorer"></param>
        }, cbExplorer: function (data) {
            this.callback(data);
        },
        cbMultiExplorer: function (data) {
            var the = this;
            var r = JSON.parse(data);
            var ret = [];
            $.each(r, function (index, item) {
                ///<param name ="item" type="String"> </param>
                var a = $.extend({}, the, { filePath: item });
                ret.push(a);
                // cssOrm.obj.objOrmFile().getFileAtrr(a);
            });
            this.callback(ret);
        }
    };
    cls.prototype.openFileDlg = function (arg) {
        ///<summary>文件管理器,回调方法cbExplorer</summary>
        ///<param  name="arg" value="cssArgs.objOrmFile.explorer">必选 文件路径 </param>
        var id = appTool.unid() + "";
        if (arg.multiOption) {
            rxm_file.openFilesDlgBlock = $.proxy(explorer.cbMultiExplorer, arg);
            //  rxm_file.cbExplorer = $.proxy(explorer.cbExplorer, arg);
            if (arg.ends) {
                if (arg.ends == "*") {
                    rxm_file.openFilesDlg("");
                }
                else {
                    rxm_file.openFilesDlg("", arg.ends);
                }
            }
            else {
                rxm_file.openFilesDlg(arg.filePath);
            }
        }
        else {
            rxm_file.openFileDlgBlock = $.proxy(explorer.cbExplorer, arg);
            if (arg.ends) {
                if (arg.ends == "*") {
                    rxm_file.openFileDlg("");
                }
                else {
                    rxm_file.openFileDlg("", arg.ends);
                }
            }
            else {
                rxm_file.openFileDlg(arg.filePath);
            }
        }
    };
    //cls.prototype.multiExplorer = function (arg) {
    //    var id=appTool.unid()+"";
    //    rxm_file.getFileLastModifiedTime(id, 'ci://test.txt');
    //}
    cls.prototype.getFileLastModifiedTime = function (arg) {
        ///<summary>获取文件或文件夹的最后修改时间, 回调方法cbGetFileLastModifiedTime<summary>
        ///<param name="arg"  value="cssArgs.objOrmFile.getFileLastModifiedTime"> </param>
        var id = appTool.unid() + "";
        cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.getFileLastModifiedTime, one: true, data: arg });
        rxm_file.getFileLastModifiedTime(id, arg.filePath);
    };
    cls.prototype.renameFile = function (arg) {
        ///<summary>重命名文件</summary>
        ///<param name="arg"  value="cssArgs.objOrmFile.renameFile"> </param>
        var id = appTool.unid() + "";
        var param = {
            oldFilePath: arg.oldFilePath,
            newFilePath: arg.newFilePath
        };
        cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.renameFile, one: true });
        rxm_file.renameFile(id, param);
    };
    cls.prototype.search = function (arg) {
        ///<summary>搜索文件</summary>
    };
    cls.prototype.getAllByPath = function (arg) {
        ///<summary>2.30 getFileListByPath 获取某路径下的所有文件</summary>
        ///<param name="arg"  value="cssArgs.objOrmFile.getFileListByPath"> </param>
        var id = appTool.unid() + "";
        cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.getFileListByPath, one: true });
        rxm_file.getAllByPath(id, arg.filePath);
    };
    cls.prototype.getSizeByPath = function (arg) {
        ///<summary>通过路径获取文件大小</summary>
        ///<param name="arg"  value="cssArgs.objOrmFile.getFileSizeByPath"> </param>
        var id = appTool.unid() + "";
        cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.getFileSizeByPath, one: true, data: arg.data });
        rxm_file.getSizeByPath(id, arg.filePath);
    };
    cls.prototype.copyOneFile = function (arg) {
        ///<summary>复制单个文件</summary>
        ///<param name="arg"  value="cssArgs.objOrmFile.copyFile"> </param>
        var id = appTool.unid() + "";
        cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.copyFile, one: true });
        rxm_file.copyOneFile(id, arg.srcPath, arg.desPath);
    };
    cls.prototype.getMD5 = function (arg) {
        ///<summary>获取文件md5</summary> 
        ///<param name="arg"  value="cssArgs.objOrmFile.getFileMD5"> </param>
        var id = appTool.unid() + "";
        cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.getFileMD5, one: true });
        rxm_file.getMD5(id, arg.filePath);
    };
    // cls.prototype.getImageThumb=function(arg){
    //     ///<summary>获取图片缩略图（Base64）</summary>
    //     ///<param name="arg"  value="cssArgs.objOrmFile.getImageThumb"> </param>
    //     var id = appTool.unid() + "";
    //     cssOrm.on({ callback: arg.callback, id: id, msgType: cls.msg.getImageThumb, one: true });
    //     rxm_file.getImageThumb(id, arg.filePath, arg.thumbWidth, arg.thumbHight, arg.quality, arg.type);
    // }
    cls.prototype.getSystemCacheSize = function (arg) {
        ///<summary>获取系统缓存大小</summary>
        ///<param  name="arg" value="cssArgs.objOrmFile.getSystemCacheSize">空或0 获取所有缓存大小，1 视频，2音频，3图片，4浏览器缓存 </param>
        cssOrm.on({ callback: arg.callback, msgType: cls.msg.getSystemCacheSize, one: true, id: arg.type });
        rxm_file.getSystemCacheSize(arg.type);
    };
    cls.prototype.cleanSystemCache = function (arg) {
        ///<summary>清除系统缓存</summary>
        ///<param  name="arg" value="cssArgs.objOrmFile.cleanSystemCache">空或0 获取所有缓存大小，1 视频，2音频，3图片，4浏览器缓存 </param>
        if (arg.type == "5") {
            rxm_download.deleteAllDownloadTaskAndFile();
            var data = {
                type: 5,
                stauts: 1
            };
            arg.callback("", data);
        }
        else if (arg.type == "0") {
            cssOrm.on({ callback: arg.callback, msgType: cls.msg.cleanSystemCache, one: true, id: arg.type });
            rxm_file.cleanSystemCache(arg.type);
            rxm_download.deleteAllDownloadTaskAndFile();
        }
        else {
            cssOrm.on({ callback: arg.callback, msgType: cls.msg.cleanSystemCache, one: true, id: arg.type });
            rxm_file.cleanSystemCache(arg.type);
        }
    };
    if (typeof rxm_file !== 'undefined') {
        rxm_file.deleteByPathBlock = function (opId, data) {
            ///<summary>根据路径删除文件的回调方法</summary>
            ///<param  name="opId" type="Number">唯一标识符 </param>
            ///<param  name="data" type="Number">返回cip.cSuccess或cip.cFailed,详见CONTANT中CallbackInt类型数据 </param>
            var sucesss = data == "1" ? true : false;
            cssOrm.trigger(cls.msg.deleteFileByPath, opId, sucesss);
        };
        rxm_file.isExistByPathBlock = function (opId, data) {
            ///<summary>根据路径判断文件是否存在的回调方法</summary>
            ///<param  name="opId" type="Number">唯一标识符 </param>
            ///<param  name="data" type="Number">返回cip.cSuccess或cip.cFailed,详见CONTANT中CallbackInt类型数据 0 文件不存在1，文件存在</param>
            var sucesss = data == "1" ? true : false;
            cssOrm.trigger(cls.msg.isFileExistByPath, opId, sucesss);
        };
        rxm_file.getTypeByPathBlock = function (opId, data) {
            ///<summary> 根据路径获取文件类型的回调方法</summary>
            ///<param  name="opId" type="Number">唯一标识符 </param>
            ///<param  name="data" type="Number">返回cip.cSuccess或cip.cFailed,详见CONTANT中CallbackInt类型数据 0 文件，1文件夹</param>
            //var sucesss = data == "1" ? true : false;
            cssOrm.trigger(cls.msg.getFileTypeByPath, opId, data);
        };
        rxm_file.getSizeByPathBlock = function (opId, data) {
            ///<summary> 获取文件大小的回调方法</summary>
            ///<param  name="opId" type="Number">唯一标识符 </param>
            ///<param  name="data" type="Number">返回文件的内容</param>
            if (data > -1) {
                data = data + "";
                var a;
                data = (a = data.indexOf(".")) > -1 ? data.substring(0, a) : data;
                data = data * 1;
            }
            ;
            cssOrm.trigger(cls.msg.getFileSizeByPath, opId, data);
        };
        rxm_file.getFileLastModifiedTimeBlock = function (opId, data) {
            cssOrm.trigger(cls.msg.getFileLastModifiedTime, opId, data);
        };
        //getFileTypeByPath: "getFileTypeByPath",
        //deleteFileByPath: "deleteFileByPath",
        //getFileLastModifiedTime: "getFileLastModifiedTime",
        rxm_file.renameFileBlock = function (opId, result) {
            var success = result == "1" ? true : false;
            cssOrm.trigger(cls.msg.renameFile, opId, success);
        },
            rxm_file.searchFileBlock = function (result, data) {
                cssOrm.trigger(cls.msg.search, opId, data);
            },
            rxm_file.getAllByPathBlock = function (opId, json) {
                var obj = JSON.parse(json);
                cssOrm.trigger(cls.msg.getFileListByPath, opId, obj);
            },
            //getFileSizeByPath: "getFileSizeByPath",
            rxm_file.copyOneFileBlock = function (opCode, data) {
                var ret = data == "1" ? true : false;
                cssOrm.trigger(cls.msg.copyFile, opCode, ret);
            },
            rxm_file.getMD5Block = function (opId, data) {
                cssOrm.trigger(cls.msg.getFileMD5, opId, data);
            };
        rxm_file.getImageThumbBlock = function (opId, data) {
            cssOrm.trigger(cls.msg.getImageThumb, opId, data);
        };
        rxm_file.getSystemCacheSizeBlock = function (type, size) {
            var data = {
                type: type,
                size: size
            };
            cssOrm.trigger(cls.msg.getSystemCacheSize, data);
        };
        rxm_file.cleanSystemCacheBlock = function (type, stauts) {
            var data = {
                type: type,
                stauts: stauts
            };
            cssOrm.trigger(cls.msg.cleanSystemCache, data);
        };
    }
    //isFileExistByPath: "isFileExistByPath "
    cssOrm.declare("objOrmFile", cls, true);
    return cssOrm.obj.objOrmFile();
});

define('RxmImage', ["RxmImageBase"], function (nativeCls) {
    ///<param  name="nativeCls"  type="clsImageBase"><param>
    if (cssOrm.obj.objOrmImage) {
        return cssOrm.obj.objOrmImage();
    }
    function clsImage() {
        ///<summary>本地图片插件</summary>
    }
    clsImage.prototype.openPicker = function (args) {
        ///<summary>打开照片选择器</summary>
        ///<param name="min",type="Number">可选 最小选择数量 ,传0表示无限制，默认值1</param>
        ///<param name="max",type="Number">可选 最大选择数量 ,传0表示无限制，默认值0</param>
        ///<param name="quality",type="Number">可选 PG压缩质量 取值范围 0-1 越大表示质量越好，默认值0.5</param>
        ///<param name="usePng",type="Number">可选 用png格式导出图片 ,此参数为1时,quality参数无效，默认值0</param>
        ///<param name="detailedInfo",type="Number">可选 此参数为1时,回调中会包含图片的额外信息，默认值0</param>
        ///<param name="param",type="Object">可选 </param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "imagePickerClosed", one: true, id: "" });
        delete args.callback;
        delete args.data;
        nativeCls.openImgPicker(args);
    };
    clsImage.prototype.openBrowser = function (args) {
        ///<summary>打开一个可以浏览图片的浏览器</summary>
        ///<param name="data",type="Array">必选 图片资源构成的数组 </param>
        ///<param name="startIndex",type="Number">可选 非负整数 起始图片位置，默认值0</param>
        ///<param name="displayActionButton",type="Number">可选 1:显示分享按钮 ,0 隐藏，默认值0</param>
        ///<param name="enableGrid",type="Number">可选 1:允许九宫格视图 ,0 不允许，默认值1</param>
        ///<param name="startOnGrid",type="Number">可选 1:以九宫格视图起始，默认值0</param>
        ///<param name="displayNavArrows",type="Number">可选 显示切换箭头(仅iOS支持此参数)，默认值0</param>
        args.data = JSON.stringify(args.data);
        nativeCls.openImgBrowser(args);
    };
    clsImage.prototype.openImgOnline = function (args) {
        ///<summary>打开在线图片</summary>
        ///<param name="data",type="Array">必选 图片资源构成的数组 </param>
        ///<param name="startIndex",type="Number">可选 非负整数 起始图片位置，默认值0</param>
        ///<param name="displayActionButton",type="Number">可选 1:显示分享按钮 ,0 隐藏，默认值0</param>
        ///<param name="enableGrid",type="Number">可选 1:允许九宫格视图 ,0 不允许，默认值1</param>
        ///<param name="startOnGrid",type="Number">可选 1:以九宫格视图起始，默认值0</param>
        ///<param name="displayNavArrows",type="Number">可选 显示切换箭头(仅iOS支持此参数)，默认值0</param>
        var href = args.href;
        if (href.indexOf("http://") == -1 && href.indexOf("https://") == -1) {
            var host = require("RxmAppTool").getUpdateUrl() + "/resoft/x/file/down?fileId=";
            if (host.length > 0) {
                if (href.indexOf("resoft/x/file/down") == -1) {
                    href = host + href;
                }
                else {
                    var server = require("RxmAppTool").getServer();
                    if (href.indexOf(server) === 0) {
                        href = href.replace(server, host);
                    }
                }
            }
        }
        var data = [{
                src: href
            }];
        args.data = JSON.stringify(data);
        nativeCls.openImgBrowser(args);
    };
    clsImage.prototype.openCropper = function (args) {
        ///<summary>打开一个图片裁剪器,导出裁剪后的图片,并返回图片路径</summary>
        ///<param name="src",type="String">可选 图片路径 支持wgt:// wgts:// file:// res://</param>
        ///<param name="quality",type="Number">可选 JPG压缩质量 取值范围 0-1 越大表示质量越好，默认值0.5</param>
        ///<param name="usePng",type="Number">可选 1:用png格式导出图片 ,此参数为1时,quality参数无效，默认值0</param>
        ///<param name="mode",type="Number">可选 正方型裁剪 2- 圆形裁剪(仅iOS支持圆形裁剪)，默认值1</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "imageCropperClosed", one: true, id: "" });
        nativeCls.openImgCropper(args.src, args.quality, args.usePng, args.mode);
    };
    clsImage.prototype.saveToPhotoAlbum = function (args) {
        ///<summary>将本地图片储存到系统相册</summary>
        ///<param name="localPath",type="String">必选 图片路径 支持res:// wgt:// wgts:// file://</param>
        ///<param name="extraInfo",type="String">可选 任意字符串,设置后会随cbSaveToPhotoAlbum传出,extraInfo 可作唯一标识符用</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "imageSaveToPhotoAlbum", one: true, id: "" });
        nativeCls.saveToPhotoAlbum(args.localPath, args.extraInfo);
    };
    clsImage.prototype.clearOutputImages = function () {
        ///<summary>清除由本插件的openPicker、openCropper接口所生成的图片文件 若您的APP有多个widget,则只会清除由当前widget所生成的图片文件</summary>
        nativeCls.clearOutputImages();
    };
    clsImage.prototype.setIpadPopEnable = function (args) {
        ///<summary>插件在iPad上默认用pop窗口展示插件页面,通过调用此接口,可以选择是否禁用pop窗口,改用全屏展示插件页面。</summary>
        nativeCls.setIpadPopEnable(args.flag);
    };
    clsImage.prototype.openVideoPicker = function (args) {
        ///<summary> 打开视频选择器</summary>
        ///<param name="needBase64",type="int">1返回视频缩略图的 base64，0 不返回</param>
        ///<param name="param",type="Object">可选 </param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "videoPickerClosed", one: true, id: "" });
        nativeCls.openVideoPicker(args.needBase64);
    };
    cssOrm.declare("objOrmImage", clsImage, true);
    return cssOrm.obj.objOrmImage();
});

define("RxmLocalNotification", ["RxmLocalNotificationBase"], function (nativeCls) {
    ///<param  name="nativeCls"  type="clsLocalNotificationBase"><param>
    function clsLocalNotification() {
        ///<summary>本地通知插件</summary>
    }
    clsLocalNotification.prototype.addNotice = function (args) {
        ///<summary>本地通知功能,可以做到本地定时推送消息提醒,设置提醒消息时会在通知栏收到消息,提醒声音与系统设置的系统默认铃声提醒一致</summary>
        ///<param  name="args"  type="clsNotificationArgs">添加通知参数对象</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "notificationAdd", one: true, id: "" });
        nativeCls.addNotice(args);
    };
    clsLocalNotification.prototype.removeNotice = function (id) {
        ///<summary>移除指定唯一标示符的通知</summary>
        ///<param name="id",type="String">必选  通知的唯一标示符</param>
        nativeCls.removeNotice(id);
    };
    clsLocalNotification.prototype.removeAllNotice = function () {
        ///<summary>移除所有通知</summary>
        nativeCls.removeAllNotice();
    };
    cssOrm.declare("clsLocalNotification", clsLocalNotification);
    return clsLocalNotification;
});

define('RxmLoaction', ["RxmLocationBase", 'RxmAppTool'], function (nativeCls, appTool) {
    ///<param  name="nativeCls"  type="clsLocationBase"><param>
    if (cssOrm.obj.objOrmLoaction) {
        return cssOrm.obj.objOrmLoaction();
    }
    ;
    this._open = false;
    function clsLocation() {
        ///<summary>本地定位插件</summary>
    }
    clsLocation.prototype.openLocation = function (args) {
        ///<summary>打开定位功能</summary>
        ///<param  name="args"  type="clsNotificationArgs">添加通知参数对象</param>
        if (args.onChange) {
            cssOrm.on({ callback: args.callback, data: args.data, msgType: "locationOnChange", one: false, id: "" });
        }
        else {
            cssOrm.on({ callback: args.callback, data: args.data, msgType: "locationOnChange", one: true, id: "" });
        }
        cssOrm.on({ callback: args.callbackOpen, data: args.data, msgType: "locationOpen", one: true, id: "" });
        if (!this._open) {
            nativeCls.open();
            this._open = true;
        }
    };
    clsLocation.prototype.closeLocation = function (args) {
        ///<summary>关闭定位功能,不再监听位置信息。</summary>
        ///<param  name="args"  type="clsNotificationArgs">添加通知参数对象</param>
        //cssOrm.on({ data: args.data, msgType: "locationClose", one: true, id: "" });
        nativeCls.close();
        this._open = false;
    };
    clsLocation.prototype.getAddress = function (args) {
        ///<summary>根据经纬度获取对应的地址信息 </summary>
        ///<param  name="args"  type="clsNotificationArgs">添加通知参数对象</param>
        var id = appTool.unid() + "";
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "locationGetAddress", one: true, id: id });
        nativeCls.getAddressByPosition(id, args.lat, args.log, args.flag);
    };
    clsLocation.prototype.navigationByApps = function (args) {
        ///<summary>调用手机安装的地图 app 进行导航，默认驾车模式，进入第三方 app 后可以自行切换导航模式。 </summary>
        nativeCls.navigationByApps(args.startName, args.startLng, args.startLat, args.endName, args.endLng, args.endLat, args.coorType);
    };
    cssOrm.declare("objOrmLoaction", clsLocation, true);
    return cssOrm.obj.objOrmLoaction();
});

define('RxmMessage', [], function () {
    if (typeof rxm_msg_jpush == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.objOrmMessage != "undefined") {
        return cssOrm.obj.objOrmMessage();
    }
    ;
    var cls = function () {
    };
    //页面切到后台时保持推送监听
    cls.prototype.keepPushOnPause = function (flag) {
        rxm_msg_jpush.keepPushOnPause(flag);
    };
    //停止推送服务
    cls.prototype.stopPush = function () {
        if (require("RxmAppTool").isAndriod()) {
            rxm_msg_jpush.stopPush();
        }
        else if (require("RxmAppTool").isIOS()) {
            var params = { alias: "" };
            var data = JSON.stringify(params);
            rxm_msg_jpush.setAlias(data);
            rxm_msg_jpush.setTags(data);
        }
    };
    //resumePush 恢复推送服务
    cls.prototype.resumePush = function () {
        if (require("RxmAppTool").isAndriod()) {
            rxm_msg_jpush.resumePush();
        }
        else if (require("RxmAppTool").isIOS()) {
            //重新登陆即可
        }
    };
    //设置别名
    cls.prototype.setAlias = function (alias, callback) {
        rxm_msg_jpush.setAliasBLock = function (data) {
            callback && callback(data);
        };
        var params = { alias: alias };
        var data = JSON.stringify(params);
        rxm_msg_jpush.setAlias(data);
    };
    //设置标签  例如：var tags=new Array("tag1","tag2","tag3");为字符串数组
    cls.prototype.setTags = function (tags, callback) {
        rxm_msg_jpush.setTagsBlock = function (data) {
            callback && callback(data);
        };
        var params = { tags: tags };
        var data = JSON.stringify(params);
        rxm_msg_jpush.setTags(data);
    };
    //同时设置别名与标签   tags为字符串数组
    cls.prototype.setAliasAndTags = function (alias, tags, callback) {
        rxm_msg_jpush.setAliasAndTagsBlock = function (data) {
            callback && callback(data);
        };
        var params = { alias: alias, tags: tags };
        var data = JSON.stringify(params);
        rxm_msg_jpush.setAliasAndTags(data);
    };
    //取得应用程序对应的 RegistrationID
    cls.prototype.getRegistrationID = function (callback) {
        rxm_msg_jpush.getRegistrationIDBlock = function (data) {
            callback && callback(data);
        };
        rxm_msg_jpush.getRegistrationID();
    };
    //清除所有通知 for android
    cls.prototype.clearAllNotifications = function (callback) {
        if (require("RxmAppTool").isAndriod()) {
            rxm_msg_jpush.clearAllNotifications();
        }
    };
    //根据Id清除某条通知 for android
    cls.prototype.clearNotificationById = function (notificationId) {
        if (require("RxmAppTool").isAndriod()) {
            var params = { notificationId: notificationId };
            var data = JSON.stringify(params);
            rxm_msg_jpush.clearNotificationById(data);
        }
    };
    //连接状态发生变化
    cls.prototype.onReceiveConnectionChange = function (callback) {
        rxm_msg_jpush.onReceiveConnectionChange = function (data) {
            callback && callback(data);
            /*var json = JSON.parse(data);
            switch(json.connect)
            {
                case '0':
                alert('已连接上');
                break;
                case '1':
                alert('未连接');
                break;
            }*/
        };
    };
    //连接状态变化
    cls.prototype.getConnectionState = function (callback) {
        rxm_msg_jpush.getConnectionStateBlock = function (data) {
            callback && callback(data);
        };
        rxm_msg_jpush.getConnectionState();
    };
    //添加一个本地通知 var params = { builderId:0, title:"这是title", content:"这是内容", extras:{"key":"value"},notificationId:3, broadCastTime:10000 };
    cls.prototype.addLocalNotification = function (params) {
        var data = JSON.stringify(params);
        rxm_msg_jpush.addLocalNotification(data);
    };
    //移除一个本地通知
    cls.prototype.removeLocalNotification = function (notificationId) {
        var params = {
            notificationId: notificationId
        };
        var data = JSON.stringify(params);
        rxm_msg_jpush.removeLocalNotification(data);
    };
    //移除所有的通知
    cls.prototype.clearLocalNotifications = function (notificationId) {
        rxm_msg_jpush.clearLocalNotifications();
    };
    //设置badge值
    cls.prototype.setBadgeNumber = function (badgeNumber) {
        if (require("RxmAppTool").isIOS()) {
            rxm_msg_jpush.setBadgeNumber(badgeNumber);
        }
    };
    //禁止前台本地通知提示框    参数：1-禁止 其他-允许
    //和Android系统不同，在iOS系统中，当APP处于前台时，收到本地通知后，系统不会在屏幕顶部弹出气泡显示通知内容。 于是极光SDK自己设置了一个本地通知提示框，在APP在前台收到本地通知后弹出，显示通知内容。 通过调用此接口，可以禁止或者重新启动此本地通知提示框
    cls.prototype.disableLocalNotificationAlertView = function (param) {
        if (require("RxmAppTool").isIOS()) {
            rxm_msg_jpush.disableLocalNotificationAlertView(param);
        }
    };
    //收到了自定义消息
    rxm_msg_jpush.onReceiveMessage = function (data) { };
    //当用户收到通知后，修改该用户对应该条通知的状态
    function changeUserMsgStatus(sendno) {
        var userId = require("RxmAppTool").getUserID();
        if (sendno && userId) {
            $.ajax({
                url: getServer() + "/resoft/origianl/message/updateRecMsgforDb",
                type: "post",
                data: { msgId: sendno, userUuid: userId },
                success: function (data) {
                }
            });
        }
    }
    //收到了通知
    rxm_msg_jpush.onReceiveNotification = function (data) {
        var id = "";
        var myData = {};
        var sendno = "";
        if (require("RxmAppTool").isAndriod()) {
            data = JSON.parse(data);
            id = data.extras.msgType;
            sendno = data.extras.sendno;
            myData = { title: data.title,
                content: data.content,
                msgType: data.extras.msgType,
                data: data.extras,
                notificationId: data.notificationId
            };
            changeUserMsgStatus(sendno);
        }
        else if (require("RxmAppTool").isIOS()) {
            data = JSON.parse(data);
            id = data.extras.msgType;
            sendno = data.extras.sendno;
            myData = { title: data.title,
                content: data.content,
                msgType: data.extras.msgType,
                data: data.extras
            };
            if (data.isAPNs) {
                changeUserMsgStatus(sendno);
            }
        }
        cssOrm.trigger(cls.Msg.receiveMsg, id, myData);
    };
    cls.Msg = {
        receiveMsg: "receiveMsg",
        openMsg: "openMsg"
    };
    //用户点击了通知
    rxm_msg_jpush.onReceiveNotificationOpen = function (data) {
        var id = "";
        var myData = {};
        var sendno = "";
        if (require("RxmAppTool").isAndriod()) {
            data = JSON.parse(data);
            id = data.extras.msgType;
            sendno = data.extras.sendno;
            myData = { title: data.title,
                content: data.content,
                msgType: data.extras.msgType,
                data: data.extras,
                notificationId: data.notificationId
            };
            changeUserMsgStatus(sendno);
        }
        else if (require("RxmAppTool").isIOS()) {
            data = JSON.parse(data);
            id = data.extras.msgType;
            sendno = data.extras.sendno;
            myData = { title: data.title,
                content: data.content,
                msgType: data.extras.msgType,
                data: data.extras
            };
            if (data.isAPNs) {
                changeUserMsgStatus(sendno);
            }
        }
        cssOrm.trigger(cls.Msg.openMsg, id, myData);
    };
    //应用程序注册监听
    rxm_msg_jpush.onReceiveRegistration = function (data) {
        //data 更具消息类型 发  
    };
    cssOrm.declare("objOrmMessage", cls, true);
    return cssOrm.obj.objOrmMessage();
});

define('RxmOpenFile', [""], function () {
    if (typeof rxm_docReader == 'undefined' || typeof rxm_video_player == 'undefined'
        || typeof rxm_audio == 'undefined' || typeof rxm_image == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.objOrmOpenFile != "undefined") {
        return cssOrm.obj.objOrmOpenFile();
    }
    function cls() {
    }
    ;
    cls.prototype.openFile = function (localFilePath) {
        var a = localFilePath.lastIndexOf(".");
        var fileExt = localFilePath.substring(a + 1).toLowerCase();
        if ((fileExt == "pdf") || (fileExt == "txt") || (fileExt == "doc") || (fileExt == "xls")
            || (fileExt == "ppt") || (fileExt == "docx") || (fileExt == "xlsx")
            || (fileExt == "pptx")) {
            rxm_docReader.openDocReader(localFilePath);
        }
        else if (fileExt == "mp4") {
            //cipVideoExt.openSystemPlayer(localFilePath);
            /*var param = {
                src: localFilePath,
                showCloseButton: true,
                autoStart: true,
                forceFullScreen: true

            }
            cipVideo.openPlayer(JSON.stringify(param));*/
            rxm_video_player.openSystemPlayer(localFilePath);
        }
        else if (fileExt == "mp3") {
            rxm_audio.openPlayer(localFilePath, 0);
        }
        else if ((fileExt == "jpg") || (fileExt == "jpeg") || (fileExt == "png")) {
            var data = [{
                    src: localFilePath,
                }];
            var json = JSON.stringify(data);
            rxm_image.openImgBrowser(json);
        }
    };
    cssOrm.declare("objOrmOpenFile", cls, true);
    return cssOrm.obj.objOrmOpenFile();
});

define('RxmOpenPdf', [""], function () {
    if (typeof rxm_pdf == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.objOrmOpenPdf != "undefined") {
        return cssOrm.obj.objOrmOpenPdf();
    }
    function cls() {
    }
    ;
    cls.prototype.openPdf = function (args) {
        var url = args.url;
        var title = !!args.title ? args.title : "PDF查看";
        var hasPrint = !!args.hasPrint ? args.hasPrint : "false";
        var printWord = !!args.printWord ? args.printWord : "保密文件，切勿外泄";
        var color = !!args.color ? args.color : "#B5B5B5";
        var fontSize = !!args.fontSize ? args.fontSize : "35";
        var opacity = !!args.opacity ? args.opacity : "0.8";
        var degree = !!args.degree ? args.degree : "30";
        var horizontalSpacing = !!args.horizontalSpacing ? args.horizontalSpacing : "260";
        var verticalSpacing = !!args.verticalSpacing ? args.verticalSpacing : "200";
        rxm_pdf.openPdf(url, title, hasPrint, printWord, color, fontSize, opacity, degree, horizontalSpacing, verticalSpacing);
    };
    cssOrm.declare("objOrmOpenPdf", cls, true);
    return cssOrm.obj.objOrmOpenPdf();
});

define('RxmPhone', [], function () {
    if (typeof rxm_sms == 'undefined' || typeof rxm_phone == 'undefined') {
        return;
    }
    //var obj = cssOrm || {};
    if (typeof cssOrm.obj.objOrmPhone != "undefined") {
        return cssOrm.obj.objOrmPhone();
    }
    var cls = function () { };
    cls.prototype.sms = function (phoneNum, content) {
        if (typeof rxm_sms != "undefined") {
            // 调用cip
            rxm_sms.showEditor(phoneNum, content);
        }
        else {
            window.location = "sms:" + phoneNum + "&body=" + content;
        }
    };
    /**
    * 打电话
    */
    cls.prototype.call = function (number) {
        if (typeof rxm_phone != "undefined") {
            // 调用cip
            rxm_phone.call(number);
        }
        else {
            window.location = "tel:" + number;
        }
    };
    cssOrm.declare("objOrmPhone", cls, true);
    return cssOrm.obj.objOrmPhone();
});

define('RxmScanner', ["RxmScannerBase"], function (nativeCls) {
    ///<param  name="nativeCls"  type="clsScannerBase"><param>
    if (typeof rxm_scanner == 'undefined') {
        return;
    }
    if (cssOrm.obj.objOrmScanner) {
        return cssOrm.obj.objOrmScanner();
    }
    ;
    function clsScanner() {
        ///<summary>二维码插件</summary>
    }
    clsScanner.prototype.open = function (args) {
        ///<summary>打开扫描仪</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        //        cssOrm.on({ callback: args.callback, data: args.data, msgType: "scannerOpen" one: true, id: "" });
        //
        //        nativeCls.open();
        rxm_scanner.beginBlock = function ScannerSuccessCallBack(status, data) {
            var widget = require(require.rxm.PageBase);
            if ((args != undefined) && (args.callback != undefined)) {
                args.callback("", data);
            }
            if (status == '1') {
                if ((args != undefined) && (args.args != undefined)) {
                    widget.jumpPage("CI", data, args.args);
                }
                else {
                    widget.jumpPage("CI", data, {});
                }
            }
        };
        rxm_scanner.begin();
    };
    clsScanner.prototype.createQR = function (args) {
        ///<summary>根据文本创建对应二维码图片</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "scannerCreateQR", one: true, id: "" });
        nativeCls.createQR(args.content);
    };
    cssOrm.declare("objOrmScanner", clsScanner, true);
    return cssOrm.obj.objOrmScanner();
});

define('RxmSpeech', ["RxmSpeechBase"], function (nativeCls) {
    ///<param  name="nativeCls"  type="clsCameraBase"><param>
    if (require("RxmAppTool").isIOS()) {
        return;
    }
    if (cssOrm.obj.objOrmSpeech) {
        return cssOrm.obj.objOrmSpeech();
    }
    function clsSpeech() {
        ///<summary>语音识别</summary>
    }
    clsSpeech.prototype.start = function (arg) {
        ///<summary>调用语音识别</summary>
        ///<param name="arg" value="cssArgs.objOrmCamera.open"></param>
        cssOrm.on({ callback: arg.callback, data: arg.data, msgType: "speechStop", one: true, id: "" });
        delete arg.callback;
        delete arg.data;
        nativeCls.start();
    };
    // clsSpeech.prototype.stop = function (arg) {
    //     ///<summary>结束语音识别</summary>
    //     ///<param name="arg" value="cssArgs.objOrmCamera.open"></param>
    //     cssOrm.on({ callback: arg.callback, data: arg.data, msgType: "speechStop", one: true, id: "" });
    //     nativeCls.stop();
    // }
    cssOrm.declare("objOrmSpeech", clsSpeech, true);
    return cssOrm.obj.objOrmSpeech();
});

define('RxmVideo', ["RxmVideoBase"], function (nativeCls) {
    ///<param  name="nativeCls"  type="clsVideoBase"><param>
    if (cssOrm.obj.objOrmVideo) {
        return cssOrm.obj.objOrmVideo();
    }
    ;
    function clsVideo() {
        ///<summary>本地视频播放插件</summary>
    }
    clsVideo.prototype.openSystemPlayer = function (args) {
        ///<summary>打开视频播放器</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "videoOpen", one: true, id: "" });
        delete args.callback;
        delete args.data;
        nativeCls.openSystemPlayer(args);
    };
    clsVideo.prototype.openOrmPlayer = function (args) {
        ///<summary> 打开自定义视频播放器</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "videoOpenOrmPlayer", one: true, id: "" });
        delete args.callback;
        delete args.data;
        nativeCls.openOrmPlayer(args);
    };
    clsVideo.prototype.openOnlineVideo = function (herf) {
        ///<summary>打开在线视频</summary>
        if (herf.indexOf("http://") == -1 || herf.indexOf("https://") == -1) {
            var host = require("RxmAppTool").getUpdateUrl() + "/resoft/x/file/down?fileId=";
            if (host.length > 0) {
                if (herf.indexOf("resoft/x/file/down") == -1) {
                    herf = host + herf;
                }
                else {
                    var server = require("RxmAppTool").getServer();
                    if (herf.indexOf(server) === 0) {
                        herf = herf.replace(server, host);
                    }
                }
            }
        }
        var json = {
            src: herf
        };
        nativeCls.open(json);
    };
    clsVideo.prototype.openPlayer = function (args) {
        ///<summary>打开自定义视频播放器，支持界面定制</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "videoOpenPlayer", one: true, id: "" });
        delete args.callback;
        delete args.data;
        nativeCls.openPlayer(args);
    };
    clsVideo.prototype.closePlayer = function (args) {
        ///<summary>关闭视频播放器</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        //cssOrm.on({ callback: args.callback, data: args.data, msgType: "videoClose", one: true, id: "" });
        nativeCls.closePlayer();
    };
    clsVideo.prototype.record = function (args) {
        ///<summary>录制视频</summary>
        ///<param name="callback",type="Function">callback回叫函数  function(e,data){} </param>
        ///<param name="param",type="Object">比选 </param>
        ///<param name="data",type="Object">可选  用户数据</param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "videoRecordFinish", one: true, id: "" });
        delete args.callback;
        delete args.data;
        nativeCls.record(args);
    };
    cssOrm.declare("objOrmVideo", clsVideo, true);
    return cssOrm.obj.objOrmVideo();
});

define("RxmFileInfo", ['', 'RxmDataObjectBase', 'RxmInherit'], function (baiduWebUploader, dataBase, declare) {
    ///<summary></summary>
    ///<param name="baiduWebUploader" value="baiduFile"></param>
    ///<param name="dataBase" value="PdwebDataBase"></param>
    ///<param name="declare"  value="cssOrm.inherit"></param>
    var fileInfo = declare([dataBase], {
        constructor: function (file) {
            ///<field name="id" type="String">id</field>
            ///<field name="opType" type="String">opType</field>
            ///<field name="fileName" type="String">文件名</field>
            ///<field name="fileExt" type="String">文件扩展名</field>
            ///<field name="fileSize" type="Number">文件大小</field>
            ///<field name="orderNum" type="Number">序号</field>
            ///<field name="thumbnailUrl" type="String">文件缩略图Url地址</field>
            ///<field name="lastModifiedDate" type="String">文件本身的Url地址</field>
            ///<field name="_uploaderFile" type="baiduFile">uploader对象文件</field>
            ///<field name="httpType"  type="String">文件传输类型</field>
        }
    });
    fileInfo.prototype._constructor = function (file) {
        ///<summary></summary>
        ///<param name="file" type="File"></param>
        this.opType = "new";
        if ((typeof baiduWebUploader != "undefined") && (file instanceof baiduWebUploader.File)) {
            this.fileExt = file.ext;
            this.fileName = file.name.substring(0, file.name.lastIndexOf("."));
            this.fileSize = file.size;
            this.id = createID();
            this.fileRemarks = file.name;
            this._uploaderFile = file;
            this.lastModifiedDate = file.lastModifiedDate;
            this.httpType = file.type;
            file.uuid = this.id;
        }
        else {
            $.extend(this, file);
            if (!this.fileName) {
                this.fileName = this.id;
            }
        }
    };
    fileInfo.prototype.submitSuccess = function () {
        this.opType = "";
        this._uploaderFile = undefined;
    };
    var createID = function () {
        /// <summary >产生32位uuid</summary>
        /// <returns type="String"></returns>
        var UUID = {};
        // INSTANCE SPECIFIC METHODS
        //
        UUID.createUUID = function () {
            var dg = new Date(1582, 10, 15, 0, 0, 0, 0);
            var dc = new Date();
            var t = dc.getTime() - dg.getTime();
            var tl = UUID.getIntegerBits(t, 0, 31);
            var tm = UUID.getIntegerBits(t, 32, 47);
            var thv = UUID.getIntegerBits(t, 48, 59) + '1'; // version 1, security version is 2
            var csar = UUID.getIntegerBits(UUID.rand(4095), 0, 7);
            var csl = UUID.getIntegerBits(UUID.rand(4095), 0, 7);
            // since detection of anything about the machine/browser is far to buggy,
            // include some more random numbers here
            // if NIC or an IP can be obtained reliably, that should be put in
            // here instead.
            var n = UUID.getIntegerBits(UUID.rand(8191), 0, 7) +
                UUID.getIntegerBits(UUID.rand(8191), 8, 15) +
                UUID.getIntegerBits(UUID.rand(8191), 0, 7) +
                UUID.getIntegerBits(UUID.rand(8191), 8, 15) +
                UUID.getIntegerBits(UUID.rand(8191), 0, 15); // this last number is two octets long
            return tl + tm + thv + csar + csl + n;
        };
        // Pull out only certain bits from a very large integer, used to get the time
        // code information for the first part of a UUID. Will return zero's if there
        // aren't enough bits to shift where it needs to.
        UUID.getIntegerBits = function (val, start, end) {
            var base16 = UUID.returnBase(val, 16);
            var quadArray = new Array();
            var quadString = '';
            var i = 0;
            for (i = 0; i < base16.length; i++) {
                quadArray.push(base16.substring(i, i + 1));
            }
            for (i = Math.floor(start / 4); i <= Math.floor(end / 4); i++) {
                if (!quadArray[i] || quadArray[i] == '') {
                    quadString += '0';
                }
                else {
                    quadString += quadArray[i];
                }
            }
            return quadString;
        };
        // Replaced from the original function to leverage the built in methods in
        // JavaScript. Thanks to Robert Kieffer for pointing this one out
        UUID.returnBase = function (number, base) {
            return (number).toString(base).toUpperCase();
        };
        // pick a random number within a range of numbers
        // int b rand(int a); where 0 <= b <= a
        UUID.rand = function (max) {
            return Math.floor(Math.random() * (max + 1));
        };
        return UUID.createUUID();
    };
    return fileInfo;
});

define('RxmFileUploader', ["RxmAppUploader", "RxmFileInfo", "RxmDataCollectionBase",
    "RxmUtil"], function (appUploader, fileInfo, dataArr, util) {
    ///<param name="dataArr" value="PdwebDataCollectionBase"></param>
    ///<param name="appUploader" value="ClsGdclUploader"></param>
    var ClsFactory = function (config) {
        var _compress = false;
        var _chunked = true;
        var _chunkSize = 1024 * 1024;
        var _chunkRetry = 2;
        var _fileNumLimit = 1;
        var _fileSingleSizeLimit = 100 * 1024 * 1024;
        var _auto = false;
        var _title = "";
        var _extensions = "*";
        var _mimeTypes = "";
        var $uploadWrap = $("#" + config.id);
        var RxmFileUploader = function () {
            // this._config={
            //     compress:false,
            //     chunked:true,
            //     chunkSize:1024 * 1024,
            //     chunkRetry:2,
            //     fileNumLimit:1,
            //     fileSingleSizeLimit:100 * 1024 * 1024,
            //     auto:false
            // }
            if (typeof config != undefined) {
                this.attrAuto(config.auto);
                this.attrChunked(config.chunked);
                this.attrChunkRetry(config.chunkRetry);
                this.attrChunkSize(config.chunkSize);
                this.attrCompress(config.compress);
                this.attrFileNumLimit(config.fileNumLimit);
                this.attrFileSingleSizeLimit(config.fileSingleSizeLimit);
                if (typeof config.accept != 'undefined') {
                    this.attrTitle(config.accept.title);
                    this.attrMimeTypes(config.accept.mimeTypes);
                    this.attrExtensions(config.accept.extensions);
                }
            }
            //获取html定义属性生成config对象
            getHtmlAttr();
            // this._config = $.extend(true, this._config, cssOrm.default.clsGridMobile, htmlCfg, cfg);
            this.dataArr = new dataArr();
            itemClass = fileInfo.prototype.constructor;
            this._onlyRead = false;
            //默认的缩略图后缀
            this.defaultThumbSuffix = "";
            this.uploader = new appUploader({
                accept: {
                    title: _title,
                    extensions: _extensions,
                    mimeTypes: _mimeTypes
                },
                compress: _compress,
                chunked: _chunked,
                chunkSize: _chunkSize,
                chunkRetry: _chunkRetry,
                fileNumLimit: _fileNumLimit,
                fileSingleSizeLimit: _fileSingleSizeLimit,
                auto: _auto,
                server: ClsFactory.urlUpload(),
                disableGlobalDnd: true,
            });
            //添加文件
            this.uploader.on(appUploader.enumEvt.fileQueued, this._onAfterFileAdd, this);
            //文件上传进度
            this.uploader.on(appUploader.enumEvt.uploadProgress, this._onUploadProgress, this);
            //文件在队列中删除
            this.uploader.on(appUploader.enumEvt.fileDequeued, this.delFile, this);
            //单个文件上传开始
            this.uploader.on(appUploader.enumEvt.uploadStart, this._onUploadStart, this);
            //单个文件上传结束
            this.uploader.on(appUploader.enumEvt.uploadSuccess, this._onAfterUploadSuccess, this);
            //所有文件上传结束
            this.uploader.on(appUploader.enumEvt.uploadFinished, this._onUploadFinished, this);
            this.uploader.on(appUploader.enumEvt.error, this._onError, this);
            this.uploader.on("beforeFileQueued", this._onbeforeFileQueued, this);
            this._auto = true;
        };
        function getRadioValue(arg) {
            var radioValue = false;
            if (typeof arg == "boolean") {
                radioValue = arg;
            }
            else if (typeof arg == "string") {
                radioValue = (arg == "true");
            }
            return radioValue;
        }
        /**
         * 设置上传title
         * @param {String} arg
         * @returns {String}  - 上传title
         */
        RxmFileUploader.prototype.attrTitle = function (arg) {
            if (typeof arg != "undefined") {
                _title = arg;
                $uploadWrap.attr("rxmtitle", _title);
            }
            return _title;
        };
        /**设置上传文件类型限制
         * @param {String} arg
         * @returns {String}  - 上传文件类型
         */
        RxmFileUploader.prototype.attrExtensions = function (arg) {
            if (typeof arg != "undefined") {
                _extensions = arg;
                $uploadWrap.attr("rxmextensions", _extensions);
            }
            return _extensions;
        };
        RxmFileUploader.prototype.attrMimeTypes = function (arg) {
            if (typeof arg != "undefined") {
                _mimeTypes = arg;
                $uploadWrap.attr("rxmmimeTypes", _mimeTypes);
            }
            return _mimeTypes;
        };
        /**
         * 设置是否压缩
         * @param {Boolean} arg - 是否压缩
         * @returns {Boolean}  - 压缩状态
         */
        RxmFileUploader.prototype.attrCompress = function (arg) {
            if (typeof arg != "undefined") {
                _compress = getRadioValue(arg);
                $uploadWrap.attr("rxmcompress", _compress);
            }
            return _compress;
        };
        /**
         * 设置是否分片上传
         * @param {Boolean} arg - 是否分片
         * @returns {Boolean}  - 分片状态
         */
        RxmFileUploader.prototype.attrChunked = function (arg) {
            if (typeof arg != "undefined") {
                _chunked = getRadioValue(arg);
                $uploadWrap.attr("rxmchunked", _chunked);
            }
            return _chunked;
        };
        /**
         * 设置分片大小
         * @param {Number} arg - 分片大小
         * @returns {Number}  - 分片大小
         */
        RxmFileUploader.prototype.attrChunkSize = function (arg) {
            if (typeof arg != "undefined") {
                _chunkSize = arg;
                $uploadWrap.attr("rxmchunkSize", _chunkSize);
            }
            return _chunkSize;
        };
        /**
         * 分片重传次数
         * @param {Number} arg - 分片重传次数
         * @returns {Number}  - 分片重传次数
         */
        RxmFileUploader.prototype.attrChunkRetry = function (arg) {
            if (typeof arg != "undefined") {
                _chunkRetry = arg;
                $uploadWrap.attr("rxmchunkRetry", _chunkRetry);
            }
            return _chunkRetry;
        };
        /**
         * 文件数量限制
         * @param {Number} arg - 文件数量限制
         * @returns {Number}  - 文件数量限制
         */
        RxmFileUploader.prototype.attrFileNumLimit = function (arg) {
            if (typeof arg != "undefined") {
                _fileNumLimit = arg;
                $uploadWrap.attr("rxmfileNumLimit", _fileNumLimit);
            }
            return _fileNumLimit;
        };
        /**
         * 单文件大小限制
         * @param {Number} arg - 单文件大小限制
         * @returns {Number}  - 单文件大小限制
         */
        RxmFileUploader.prototype.attrFileSingleSizeLimit = function (arg) {
            if (typeof arg != "undefined") {
                _fileSingleSizeLimit = arg;
                $uploadWrap.attr("rxmfileSingleSizeLimit", _fileSingleSizeLimit);
            }
            return _fileSingleSizeLimit;
        };
        /**
        * 自动上传
        * @param {Boolean} arg - 自动上传
        * @returns {Boolean}  - 自动上传
        */
        RxmFileUploader.prototype.attrAuto = function (arg) {
            if (typeof arg != "undefined") {
                _auto = getRadioValue(arg);
                $uploadWrap.attr("rxmauto", _auto);
            }
            return _auto;
        };
        /**
         * 根据hmtl标签设置属性值
         */
        function getHtmlAttr() {
            if (typeof ($uploadWrap.attr("rxmcompress")) != "undefined") {
                _compress = $uploadWrap.attr("rxmcompress");
            }
            if (typeof ($uploadWrap.attr("rxmchunked")) != "undefined") {
                _chunked = $uploadWrap.attr("rxmchunked");
            }
            if (typeof ($uploadWrap.attr("rxmchunkSize")) != "undefined") {
                _chunkSize = $uploadWrap.attr("rxmchunkSize");
            }
            if (typeof ($uploadWrap.attr("rxmchunkRetry")) != "undefined") {
                _chunkRetry = $uploadWrap.attr("rxmchunkRetry");
            }
            if (typeof ($uploadWrap.attr("rxmfileNumLimit")) != "undefined") {
                _fileNumLimit = $uploadWrap.attr("rxmfileNumLimit");
            }
            if (typeof ($uploadWrap.attr("rxmfileSingleSizeLimit")) != "undefined") {
                _fileSingleSizeLimit = $uploadWrap.attr("rxmfileSingleSizeLimit");
            }
            if (typeof ($uploadWrap.attr("rxmauto")) != "undefined") {
                _auto = $uploadWrap.attr("rxmauto");
            }
            if (typeof ($uploadWrap.attr("rxmtitle")) != "undefined") {
                _title = $uploadWrap.attr("rxmtitle");
            }
            if (typeof ($uploadWrap.attr("rxmextensions")) != "undefined") {
                _extensions = $uploadWrap.attr("rxmextensions");
            }
            if (typeof ($uploadWrap.attr("rxmmimeTypes")) != "undefined") {
                _mimeTypes = $uploadWrap.attr("rxmmimeTypes");
            }
        }
        /**
         * 根据config重置html
         */
        function setHtmlAttr() {
            if (typeof (config.compress) != "undefined") {
                $uploadWrap.attr("rxmcompress", config.compress);
            }
            if (typeof (config.chunked) != "undefined") {
                $uploadWrap.attr("rxmchunked", config.chunked);
            }
            if (typeof (config.chunkSize) != "undefined") {
                $uploadWrap.attr("rxmchunkSize", config.chunkSize);
            }
            if (typeof (config.chunkRetry) != "undefined") {
                $uploadWrap.attr("rxmchunkRetry", config.chunkRetry);
            }
            if (typeof (config.fileNumLimit) != "undefined") {
                $uploadWrap.attr("rxmfileNumLimit", config.fileNumLimit);
            }
            if (typeof (config.fileSingleSizeLimit) != "undefined") {
                $uploadWrap.attr("rxmfileSingleSizeLimit", config.fileSingleSizeLimit);
            }
            if (typeof (config.auto) != "undefined") {
                $uploadWrap.attr("rxmauto", config.auto);
            }
        }
        RxmFileUploader.prototype.addFile = function (fileOrFiles, who, ipos) {
            ///<param name="fileOrFiles" type="clsFileInfo"></param>
            if (who === 'filedlg') {
                this.dataArr.addData(fileOrFiles, who, ipos);
            }
            else {
                this.dataArr.addData(fileOrFiles, who, ipos);
            }
        };
        RxmFileUploader.prototype.addOrmFile = function (addOrmFile) {
            this.uploader.addOrmFile(addOrmFile);
        };
        RxmFileUploader.prototype.getFileNum = function () {
            return this.dataArr.getData().length;
        };
        RxmFileUploader.prototype.delFile = function (fileOrFiles) {
            if ($.isArray(fileOrFiles)) {
            }
            else {
                if (fileOrFiles._uploaderFile) {
                    this.uploader.removeFile(fileOrFiles._uploaderFile);
                }
                this.dataArr.removeData(fileOrFiles);
            }
        };
        RxmFileUploader.prototype.getChangedFiles = function () {
            return this.dataArr.getDataChanged();
        };
        RxmFileUploader.prototype.submitSuccess = function () {
            this.dataArr.submitSuccess();
        };
        RxmFileUploader.prototype.option = function (key, opt) {
            this.uploader.option(key, opt);
        };
        RxmFileUploader.prototype.OpenFileDlg = function (IdReplaced) {
            if (!$.isExist(IdReplaced)) {
                //不是通过appexplore 打开
                this.modifiedObj = IdReplaced;
            }
            this.uploader._openFileDlg(IdReplaced);
            //event.stopPropagation();
            event.preventDefault();
            return false;
        };
        //accept {Arroy} [可选] [默认值：null] 指定接受哪些类型的文件。 由于目前还有ext转mimeType表，所以这里需要分开指定。
        //title {String} 文字描述
        //extensions {String} 允许的文件后缀，不带点，多个用逗号分割。
        //mimeTypes {String} 多个用逗号分割。
        //如：
        //{
        //    title: 'Images',
        //    extensions: 'gif,jpg,jpeg,bmp,png',
        //    mimeTypes: 'image/*'
        //}
        RxmFileUploader.prototype.accept = function (fileExt) {
            ///<summary>指定接受哪些类型的文件</summary>
            ///<param name="fileExt" type="clsBaiduAccept"></param>
            this.option({ accept: fileExt });
            // this.uploader.options.accept = [fileExt];
        };
        RxmFileUploader.prototype.enableAdd = function () {
            ///<summary>能不能继续添加文件</summary>
            ///<return type="Boolean"></return>
            var num = this.getFileNum();
            return num < this.uploader.options.fileNumLimit;
        };
        RxmFileUploader.prototype.enableModify = function () {
            ///<summary>能不能修改文件</summary>
            ///<return type="Boolean"></return>
            return this.getFileNum() > 0;
        };
        RxmFileUploader.prototype.enableDel = function () {
            ///<summary>能不能删除文件</summary>
            ///<return type="Boolean"></return>
            return this.getFileNum() > 0;
        };
        RxmFileUploader.prototype.makeThumb = function (file, func) {
            ///<summary>产生文件缩略图，填充到image  src字段，</summary>
            ///<param name="fileOrFileId" type="Object" >文件对象，或者文件id</param>
            ///<param>产生文件缩略图参数，一般不用填写</param>
            ///<return type="String">返回 img  src 属性值</return>
            var ths = this;
            function MakeThumb(error, src) {
                if (!error) {
                    file.thumbnail = src;
                }
                func(error, src);
                if (ths._auto)
                    ths.uploader.upload(file);
            }
            ;
            this.uploader.makeThumb(file, MakeThumb, this.uploader.options.thumb.width, this.uploader.options.thumb.height);
        };
        RxmFileUploader.prototype.beginUpload = function (fileOrFileId) {
            ///<summary>调用baiduWebUpload  upload 函数开始上传，</summary>
            ///<param name="fileOrFileId" type="Object" >文件对象，或者文件id,undefined为全部上传</param>
            ///<return type="String">返回 img  src 属性值</return>
            this.uploader.upload(fileOrFileId);
        };
        RxmFileUploader.prototype.bindFileAdded = function (callbackFunc) {
            ///<summary>添加文件回叫函数</sumary>
            this.on(ClsFactory.enumEvt.added, callbackFunc, this);
        };
        RxmFileUploader.prototype.callbackFileAdded = RxmFileUploader.prototype.bindFileAdded;
        RxmFileUploader.prototype.bindFileDeleted = function (callbackFunc) {
            ///<summary>删除文件回叫函数</sumary>
            this.on(ClsFactory.enumEvt.deleted, callbackFunc, this);
        };
        RxmFileUploader.prototype.callbackFileDeleted = RxmFileUploader.prototype.bindFileDeleted;
        RxmFileUploader.prototype.bindFileModified = function (callbackFunc) {
            ///<summary>修改文件回叫函数</sumary>
            this.on(ClsFactory.enumEvt.modifed, callbackFunc, this);
        };
        RxmFileUploader.prototype.callbackFileModified = RxmFileUploader.prototype.bindFileModified;
        RxmFileUploader.prototype.bindFileUpSuccess = function (callbackFunc) {
            ///<summary>单文件上传成功回叫函数</sumary>
            this.on(ClsFactory.enumEvt.uploadSuccess, callbackFunc, this);
        };
        RxmFileUploader.prototype.callbackFileUpSuccess = RxmFileUploader.prototype.bindFileUpSuccess;
        RxmFileUploader.prototype.bindFileUpStart = function (callbackFunc) {
            this.on(ClsFactory.enumEvt.uploadStart, callbackFunc, this);
        };
        RxmFileUploader.prototype.callbackFileUpStart = RxmFileUploader.prototype.bindFileUpStart;
        RxmFileUploader.prototype.bindFileUpError = function (callbackFunc) {
            ///<summary>单文件上传失败回叫函数</sumary>
            this.on(ClsFactory.enumEvt.uploadError, this);
        };
        RxmFileUploader.prototype.callbackFileUpError = RxmFileUploader.prototype.bindFileUpError;
        RxmFileUploader.prototype.bindFileUpAllCompleted = function (callbackFunc) {
            ///<summary>文件全部上传成功回叫函数</sumary>
            this.on(ClsFactory.enumEvt.uploadFinished, callbackFunc, this);
        };
        RxmFileUploader.prototype.callbackFileUpAllCompleted = RxmFileUploader.prototype.bindFileUpAllCompleted;
        RxmFileUploader.prototype.bindFileUpProgress = function (callbackFunc) {
            this.on(ClsFactory.enumEvt.uploadProgress, callbackFunc, this);
        };
        RxmFileUploader.prototype.callbackFileUpProgress = RxmFileUploader.prototype.bindFileUpProgress;
        RxmFileUploader.prototype.on = function (msgType, callback, thisArg) {
            this.dataArr.on(msgType, callback, thisArg);
        };
        RxmFileUploader.prototype.trigger = function (msgType, a1, a2, a3, a4, a5, a6) {
            this.dataArr.trigger(msgType, a1, a2, a3, a4, a5, a6);
        };
        RxmFileUploader.prototype._onAfterFileAdd = function (file) {
            if ($.isExist(arguments[1]))
                file = arguments[1];
            if (typeof this.modifiedObj === "undefined") {
                this.addFile(new fileInfo(file), 'filedlg');
            }
            else {
                //修改
            }
        };
        //function(file){};
        RxmFileUploader.prototype._onUploadStart = function (file) {
            if ($.isExist(arguments[1]))
                file = arguments[1];
            //console.info(file,"start");
            this.trigger(ClsFactory.enumEvt.uploadStart, file);
        };
        RxmFileUploader.prototype._onUploadProgress = function (file, percentage) {
            ///<summary>上传过程中触发，携带上传进度。</summary>
            ///<param name="file" type="clsBaiduFile">File对象</param>
            ///<param name="percentage" type="Number"">进度百分比</param>
            if (percentage.file) {
                file = percentage.file;
                percentage = percentage.data;
            }
            var theFileSize = file.fileSize || file.size;
            var size = this._fileSize();
            if (typeof percentage == "number") {
                percentage *= 1.0;
                i = percentage;
                size.already += theFileSize * percentage;
                percentage *= 100;
            }
            else {
                i = Number(percentage) * 1.0 / 100;
                size.already += theFileSize * i;
                if (size.already > size.total) {
                    size.already = size.total;
                }
            }
            //console.log(size.already + "=====" + size.total);
            var thisFilePercent = "" + percentage;
            var totalPercent = "" + (size.already * 1.0 / size.total) * 100;
            // console.log(file.fileName, totalPercent, thisFilePercent);
            this.trigger(ClsFactory.enumEvt.uploadProgress, file, totalPercent, thisFilePercent);
        };
        RxmFileUploader.prototype._fileSize = function () {
            var total = 0;
            var already = 0;
            var d = this.dataArr.getData();
            for (i = 0; i < d.length; i++) {
                var it = d[i];
                total += it.fileSize;
                //console.log(it);
                if (typeof (it._uploaderFile) === "undefined") {
                    already += it.fileSize;
                }
                ;
            }
            // console.log("_fileSize", total, already);
            return {
                total: total,
                already: already
            };
        };
        //function(file,reason){};
        RxmFileUploader.prototype._onUploadError = function (file, reason) {
            ///<summary>当文件上传出错时触发</summary>
            ///<param name="file" type="File"">File对象</param>
            ///<param name=")" type="String"">出错的code</param>
            if (reason.file) {
                file = reason.file;
                reason = reason.data;
            }
        };
        //function(file,responseData){};
        RxmFileUploader.prototype._onAfterUploadSuccess = function (file, responseData) {
            ///<summary>当文件上传成功时触发</summary>
            ///<param name="file" type="File">File对象</param>
            ///<param name="responseData" type="Object"">服务端返回的数据</param>
            var fileId = "";
            if (responseData.file) {
                file = responseData.file;
                responseData = responseData.data;
                fileId = file.id;
            }
            else {
                fileId = file.uuid;
            }
            $.each(this.dataArr.getData(), function (index, it) {
                ///<param  name="it"  type="RxmFileUploaderFileInfo"></param>
                if (it.id == fileId) {
                    it._uploaderFile = undefined;
                    file = it;
                    return false;
                }
            });
            this.trigger(ClsFactory.enumEvt.uploadSuccess, file, responseData);
            //console.info(file);
        };
        RxmFileUploader.prototype._onUploadFinished = function () {
            ///<summary>当所有文件上传结束时触发。</summary>
            //this.setState('confirm');
            //this._setSubmitBtnEnable(true);
            this.trigger(ClsFactory.enumEvt.uploadFinished, this.dataArr);
        };
        //function(type){};
        RxmFileUploader.prototype._onError = function (type) {
            ///<summary>当validate不通过时，会以派送错误事件的形式通知调用者。通过upload.on('error', handler)可以捕获到此类错误，目前有以下错误会在特定的情况下派送错来。<br/>Q_EXCEED_NUM_LIMIT 在设置了fileNumLimit且尝试给uploader添加的文件数量超出这个值时派送。<br/>Q_EXCEED_SIZE_LIMIT 在设置了Q_EXCEED_SIZE_LIMIT且尝试给uploader添加的文件总大小超出这个值时派送。<br/>Q_TYPE_DENIED 当文件类型不满足时触发<br/>});</summary>
            ///<param name="type" type="String"">错误类型</param>     
            var error;
            switch (type) {
                case "Q_EXCEED_NUM_LIMIT":
                    {
                        error = "文件数量不能超过" + this.uploader.options.fileNumLimit + "个";
                    }
                    ;
                    break;
                case "F_EXCEED_SIZE":
                    {
                        error = "文件大小不能超过" + this.uploader.options.fileSingleSizeLimit;
                    }
                    ;
                    break;
                case "Q_TYPE_DENIED":
                    {
                        error = "文件种类错误";
                    }
                    ;
                    break;
                case "F_DUPLICATE":
                    {
                        error = "不可选择相同的照片";
                    }
                    ;
                    break;
                default: {
                    error = type;
                }
            }
            alert(error);
        };
        RxmFileUploader.prototype._onFileDequeued = function (file) {
            ///<summary>移除文件</summary>
            ///<param name="file"  type="File"> 文件</param>
            this.trigger(ClsFactory.enumEvt.fileChanged);
        };
        RxmFileUploader.prototype._onbeforeFileQueued = function (file) {
            if (!this.enableAdd()) {
                var s = "上传文件数量不能超过" + this.getFileNum() + "个";
                util.alert(s);
                return false;
            }
            return true;
        };
        return new RxmFileUploader(config);
    };
    ClsFactory.enumEvt = $.extend({}, dataArr.enumEvt, {
        //数据被转变事件
        //function({data:file,reasion:string})
        changed: "changed",
        //function({file:fileinfo,fileprogress:number,total:number}
        //文件上传进度
        uploadProgress: "uploadProgress",
        uploadStart: "uploadStart",
        uploadSuccess: "uploadSuccess",
        uploadFinished: "uploadFinished"
    }, appUploader.enumEvt);
    //读取文件的缩略图
    ClsFactory.urlThumb = function (fileId, width, height) {
        var path = getServer() + '/resoft/x/file/thumb?fileId=' + fileId;
        return path;
    };
    ClsFactory.urlOpen = function (fileId) {
        ///<summary>打开文件，在浏览器中显示</summary>
        ///<param  name="fileId"  type="String">打开文件ID</param>
        var path = getServer() + '/resoft/x/file/open?fileId=' + fileId;
        return path;
    };
    ClsFactory.urlDown = function (fileId) {
        ///<summary> //下载文件，通过文件保存对话框选择路径，文件名称进行保存 </summary>
        var path = getServer() + '/resoft/x/file/down?fileId=' + fileId;
        return path;
    };
    ClsFactory.urlDownApk = function (fileId) {
        var path = getServer() + '/resoft/x/file/downApk?fileId=' + fileId;
        return path;
    };
    ClsFactory.urlDownH5 = function (fileId) {
        var path = getServer() + '/resoft/x/file/downH5?filePath=' + fileId;
        return path;
    };
    ClsFactory.urlUpload = function (fileId) {
        var path = getServer() + "/resoft/x/file/add";
        return path;
    };
    return ClsFactory;
});

define("RxmDbConnect", ['RxmAppTool'], function (appTool) {
    if (typeof rxm_sqlite == 'undefined') {
        return;
    }
    function clsDbConnect(name) {
        this.dbName = name;
    }
    clsDbConnect.prototype.runSql = function (sql, callback) {
        ///<summary>Sql语句的执行,对数据库数据的增删改。</summary>
        ///<param  name="sql"  type="String">必选 要执行的sql语句</param>
        var id = appTool.unid() + "";
        //        cssOrm.on({
        //            callback: callback,
        //            data: sql,
        //            id: id,
        //            msgType: cssOrm.evt.enumAppMsg.executeSql,
        //            one: true
        //        });
        rxm_sqlite.runSqlBlock = callback;
        rxm_sqlite.runSql(this.dbName, id, sql);
    };
    clsDbConnect.prototype.runTransactionSql = function (sql, callback) {
        ///<summary>事务Sql语句的执行,对数据库数据的增删改。</summary>
        ///<param  name="sql"  type="String">必选 JSON，要执行的sql语句JSON数组</param>
        var id = appTool.unid() + "";
        //        cssOrm.on({
        //            callback: callback,
        //            data: sql,
        //            id: id,
        //            msgType: cssOrm.evt.enumAppMsg.executeTransactionSql,
        //            one: true
        //        });
        rxm_sqlite.runTransactionSqlBlock = callback;
        rxm_sqlite.runTransactionSql(this.dbName, id, sql);
    };
    clsDbConnect.prototype.runSelect = function (sql, callback) {
        ///<summary>数据查询</summary>
        ///<param  name="sql"  type="String">可选 要执行的sql语句</param>
        var id = appTool.unid() + "";
        //        cssOrm.on({
        //            callback: callback,
        //            data: sql,
        //            id: id,
        //            msgType: cssOrm.evt.enumAppMsg.selectSql,
        //            one: true
        //        });
        rxm_sqlite.runSelectBlock = callback;
        rxm_sqlite.runSelect(this.dbName, id, sql);
    };
    clsDbConnect.prototype.disconnect = function (dbName, callback) {
        ///<summary>关闭数据库</summary>
        cssOrm.on({
            callback: callback,
            id: "",
            msgType: 'closeDataBase',
            one: true
        });
        rxm_sqlite.disconnect(this.dbName);
    };
    return clsDbConnect;
});

define("RxmOrmFileUploader", [], function () {
    if (typeof rxm_uploader == 'undefined') {
        return;
    }
    if (cssOrm.cls.clsOrmFileUploader) {
        return cssOrm.cls.clsOrmFileUploader;
    }
    ;
    var cls = function (arg) {
        ///<summary>单文件文件上传</summary>
        ///<param  name="arg"  value="cssArgs.clsOrmFileUploader.constructorArg">上传参数</param>
        ///<field  name="option"  value="cssArgs.clsOrmFileUploader.constructorArg"></field>
        // cssOrm.default.clsAppUploader.appUploader.serverURL=require('RxmAppTool').getUpdateUrl()+cssOrm.default.clsAppUploader.appUploader.serverURL
        this.option = $.extend({}, cssOrm.default.clsAppUploader.appUploader, arg);
        this.option.serverURL = require('RxmAppTool').getUpdateUrl() + cssOrm.default.clsAppUploader.appUploader.serverURL;
        if ((!this.option.realName) || (this.option.realName.length < 1)) {
            this.option.realName = this.option.filePath.substr(this.option.filePath.lastIndexOf("/"));
        }
    };
    cls.prototype.upload = function (arg) {
        this.option.formData.realName = this.option.realName;
        rxm_uploader.upload(this.option.id, this.option.filePath, this.option.serverURL, this.option.startOffset, this.option.Length, this.option.chunked, this.option.chunkSize, this.option.chunkRetry, JSON.stringify(this.option.fomedata), this.option.threads);
    };
    cls.prototype.close = function () {
        rxm_uploader.close(this.id);
    };
    cls.prototype.onStart = function (callback) {
        cssOrm.on({ id: this.option.id, msgType: cls.msg.start, callback: callback, one: true, data: this });
    };
    cls.prototype.onStop = function (callback) {
        //        console.log(this.option.id);
        cssOrm.on({ msgType: cls.msg.stop, id: this.option.id, callback: callback, data: this });
        //应该移除他，根据错误的次数
    };
    cls.prototype.onProgress = function (callback) {
        cssOrm.on({ msgType: cls.msg.progress, id: this.option.id, callback: callback, data: this });
    };
    cls.msg = {
        start: "startOrmFileUploader",
        stop: "endOrmFileUploader",
        progress: "progressOrmFileUploader"
    };
    rxm_uploader.uploadStatusBlock = function (id, status, responseData) {
        // if(status==)
        //        console.info("cbUploadStatus", status + ":" + this.toString())
        if (status == "0") {
            cssOrm.trigger(cls.msg.start, id, responseData);
            return;
        }
        var ret = {
            success: true
        };
        if (status === "2") {
            //失败
            ret.success = false;
            var r;
            try {
                r = JSON.parse(responseData);
            }
            catch (e) {
                r = {
                    success: false,
                    msg: responseData
                };
            }
            if ($.isExist(r.model)) {
                ret.result = r.model;
            }
            else {
                ret.result = r;
            }
        }
        else if (status == "1") {
            //成功
            ret.result = JSON.parse(responseData).model;
        }
        if (ret.result) {
            // console.info('cssOrm.trigger(cls.msg.end, id, ret);',id)
            cssOrm.trigger(cls.msg.progress, id, "100");
            cssOrm.trigger(cls.msg.stop, id, ret);
        }
    };
    rxm_uploader.uploadProgressBlock = function (id, progress) {
        //        console.info("cbUploadProgress",id +":"+ progress);
        //cssOrm.trigger(cls.msg.progress, id, progress);
        if (progress != 100) {
            cssOrm.trigger(cls.msg.progress, id, progress);
        }
    };
    return cls;
});

define('RxmOrmPhone', [], function () {
    var cls = function () { };
    cls.prototype.sms = function (phoneNum, content) {
        if (typeof cipSMS != "undefined") {
            // 调用cip
            cipSMS.open(phoneNum, content);
        }
        else {
            window.location = "sms:" + phoneNum + "&body=" + content;
        }
    };
    /**
    * 打电话
    */
    cls.prototype.Call = function (number) {
        if (typeof cipCall != "undefined") {
            // 调用cip
            cipCall.dial(number);
        }
        else {
            window.location = "tel:" + number;
        }
    };
    return new cls();
});

define("RxmActionSheetBase", [], function () {
    if (typeof rxm_actionSheet == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.clsActionSheetBase === "undefined") {
        function clsActionSheetBase() {
            ///<summary> 二维码插件</summary>
        }
        clsActionSheetBase.prototype.openListSheet = function (opId, json, title) {
            rxm_actionSheet.openListSheet(opId, json, title);
        };
        clsActionSheetBase.prototype.openGridSheet = function (opId, json, title) {
            if (!title) {
                title = "";
            }
            rxm_actionSheet.openGridSheet(opId, json, title);
        };
        clsActionSheetBase._cbOpenListSheet = function (opId, index) {
            cssOrm.trigger("openListSheet", opId, index);
        };
        clsActionSheetBase._cbOpenGridSheet = function (opId, index) {
            cssOrm.trigger("openGridSheet", opId, index);
        };
        rxm_actionSheet.openListSheetBlock = clsActionSheetBase._cbOpenListSheet;
        rxm_actionSheet.openGridSheetBlock = clsActionSheetBase._cbOpenGridSheet;
        cssOrm.declare("clsActionSheetBase", clsActionSheetBase, true);
    }
    return cssOrm.obj.clsActionSheetBase();
});

define("RxmAudioBase", [], function () {
    if (typeof rxm_audio == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.clsAudioBase === "undefined") {
        function clsAudioBase() {
            ///<summary> 本地音频播放调用</summary>
        }
        clsAudioBase.prototype.openPlayer = function (paths, index) {
            ///<summary> 打开音频播放器</summary>
            var indexs = "0";
            if (index) {
                indexs = index;
            }
            if (paths.paths) {
                rxm_audio.openPlayer(paths.paths, indexs);
            }
            else {
                rxm_audio.openPlayer(paths, indexs);
            }
        };
        clsAudioBase.prototype.open = function (path, repeats) {
            ///<summary> hout 音频播放器</summary>
            rxm_audio.open(path);
            if (repeats) {
                rxm_audio.play(repeats);
            }
            else {
                rxm_audio.play(0);
            }
        };
        clsAudioBase.prototype.closePlayer = function () {
            ///<summary> 关闭音频播放器,此操作会触发onPlayerClosed 播放器被关闭时的监听方法</summary>
            rxm_audio.closePlayer();
        };
        clsAudioBase.prototype.record = function (params) {
            ///<summary>打开音频录制界面 回调 onRecordFinish</summary>
            ///<param  name="params"  type="Object">必选 JSON字符串</param>
            //            rxm_audio.record(JSON.stringify(params));
            var homeArgs = require("RxmAppTool");
            var mode = homeArgs.getSettingData().voice.mode;
            var fileName = "";
            if (params.param) {
                if (params.param.mode) {
                    mode = params.param.mode;
                }
                if (params.param.fileName) {
                    fileName = params.param.fileName;
                }
            }
            else {
                if (params.mode) {
                    mode = params.mode;
                }
                if (params.fileName) {
                    fileName = params.fileName;
                }
            }
            rxm_audio.record(mode, fileName);
        };
        clsAudioBase.prototype.startBackgroundRecord = function (params) {
            var homeArgs = require("RxmAppTool");
            var mode = homeArgs.getSettingData().voice.mode;
            var fileName = "";
            if (params.param) {
                if (params.param.mode) {
                    mode = params.param.mode;
                }
                if (params.param.fileName) {
                    fileName = params.param.fileName;
                }
            }
            else {
                if (params.mode) {
                    mode = params.mode;
                }
                if (params.fileName) {
                    fileName = params.fileName;
                }
            }
            console.log(mode);
            console.log(fileName);
            rxm_audio.startBackgroundRecord(mode, fileName);
        };
        clsAudioBase.prototype.stopBackgroundRecord = function () {
            rxm_audio.stopBackgroundRecord();
        };
        clsAudioBase.prototype.pause = function () {
            rxm_audio.pause();
        };
        clsAudioBase.prototype.replay = function () {
            rxm_audio.replay();
        };
        clsAudioBase.prototype.stop = function () {
            rxm_audio.stop();
        };
        clsAudioBase._onCbRecord = function (opId, data) {
            //var a = {
            //		opId: opId,
            //		data: data
            //    }
            //var a = data;
            cssOrm.trigger("audioCbRecord", "", data);
        };
        clsAudioBase._onCbBackgroundRecord = function (opId, data) {
            //var a = {
            //		opId: opId,
            //		data: data
            //    }
            //var a = data;
            console.log(opId);
            console.log(data);
            cssOrm.trigger("audioStartBackgroundRecord", "", data);
        };
        clsAudioBase._onPlayFinished = function (data) {
            cssOrm.trigger("audioOpenBackground", "", data);
        };
        rxm_audio.recordBlock = clsAudioBase._onCbRecord;
        rxm_audio.backgroundRecordBlock = clsAudioBase._onCbBackgroundRecord;
        rxm_audio.onPlayFinished = clsAudioBase._onPlayFinished;
        cssOrm.declare("clsAudioBase", clsAudioBase, true);
    }
    return cssOrm.obj.clsAudioBase();
});

define("RxmCameraBase", [], function () {
    if (typeof rxm_camera == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.clsCameraBase === "undefined") {
        function clsCameraBase() {
            ///<summary> 对</summary>
        }
        clsCameraBase.prototype.openCamera = function (param) {
            ///<summary> 通过此方法调用系统相机,进入拍照界面。</summary>
            ///<param  name="comtextareass"  type="Number">可选 图片是否压缩,1表示压缩,0或者不传表示不压缩。</param>
            ///<param  name="quality"  type="Number">可选 图片压缩质量,comtextareass为1时有效,取值范围[0,100]。</param>
            ///<param  name="value"  type="String">可选 {"width":"100","height":"50"}.</param>
            if (param) {
                if (param.param) {
                    param = param.param;
                }
                var value = {
                    width: param.width,
                    height: param.height
                };
                rxm_camera.openCamera(param.comtextareass, param.quality, value);
            }
            else {
                rxm_camera.openCamera();
            }
        };
        clsCameraBase._oncameraOpenBlock = function (data) {
            // var a = {
            //     data:data
            // }
            cssOrm.trigger("cameraOpen", "", data);
        };
        rxm_camera.cameraOpenBlock = clsCameraBase._oncameraOpenBlock;
        cssOrm.declare("clsCameraBase", clsCameraBase, true);
    }
    return cssOrm.obj.clsCameraBase();
});

define("RxmClipBase", [], function () {
    if (typeof rxm_clip == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.clsClipBase === "undefined") {
        function clsClipBase() {
            ///<summary> 系统剪贴板插件</summary>
        }
        clsClipBase.prototype.copyToClip = function (text) {
            ///<summary> 复制内容到剪切板</summary>
            ///<param  name="text"  type="String">必选 内容</param>
            rxm_clip.copyToClip(text);
        };
        clsClipBase.prototype.copyFromClip = function () {
            ///<summary> 获取剪切板的内容 回调方法copyFromClipBlock</summary>
            rxm_clip.copyFromClip();
        };
        clsClipBase._oncopyFromClipBlock = function (data) {
            //  data = JSON.parse(data);
            cssOrm.trigger("clipGet", data);
        };
        rxm_clip.copyFromClipBlock = clsClipBase._oncopyFromClipBlock;
        cssOrm.declare("clsClipBase", clsClipBase, true);
    }
    return cssOrm.obj.clsClipBase();
});

define("RxmContactBase", [], function () {
    if (typeof rxm_contact == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.clsContactBase === "undefined") {
        function clsContactBase() {
            ///<summary> 对</summary>
        }
        clsContactBase.prototype.openContact = function () {
            ///<summary> 打开联系人应用,将选中的联系人的姓名,电话,邮件通过cbOpen回调,每次只能选择一个联系人。回调方法cbOpen</summary>
            rxm_contact.openContact();
        };
        clsContactBase.prototype.multiOpenContact = function () {
            ///<summary> 打开联系人选择界面,该界面中的数据是当前设备上所有联系人的信息,支持多选。回调方法cbMultiOpen</summary>
            rxm_contact.multiOpenContact();
        };
        clsContactBase.prototype.addContact = function (name, num, email, option) {
            ///<summary>添加联系人</summary>
            ///<param  name="name"  type="String">必选 名称</param>
            ///<param  name="num"  type="String">必选电话号码</param>
            ///<param  name="email"  type="String">必选邮件</param>
            ///<param  name="option"  type="Number">可选	添加过程中是否隐藏弹出”确认添加”</param>
            rxm_contact.addContact(name, num, email, option);
        };
        clsContactBase.prototype.deleteContact = function (name) {
            ///<summary>删除联系人 回调方法cbDeleteItem</summary>
            ///<param  name="name"  type="String">必选 名称</param>
            rxm_contact.deleteContact(name);
        };
        clsContactBase.prototype.searchContact = function (nameKey, option) {
            ///<summary>查询联系人 回调方法cbSearchItem</summary>
            ///<param  name="name"  type="String">必选 名称,传空字符串时,查询通讯录中所有联系人</param>
            ///<param  name="option"  type="Number">可选 一次最多返回的结果条数,默认为50条,-1表示一次返回所有结果</param>
            rxm_contact.searchContact(nameKey, option);
        };
        clsContactBase.prototype.modifyContact = function (name, num, email) {
            ///<summary>修改联系人 回调方法cbModifyItem</summary>
            ///<param  name="name"  type="String">必选 名称</param>
            ///<param  name="num"  type="String">必选电话号码</param>
            ///<param  name="email"  type="String">必选邮件</param>
            rxm_contact.modifyContact(name, num, email);
        };
        clsContactBase._onopenContactBlock = function (data) {
            data = JSON.parse(data);
            var a = [];
            a.push(data);
            ///<summary>openContactBlock-open回调方法</summary>
            cssOrm.trigger("contactGet", a);
        };
        clsContactBase._onmultiOpenContactBlock = function (data) {
            data = JSON.parse(data);
            var a = [];
            a.push(data);
            cssOrm.trigger("contactGet", a);
        };
        clsContactBase._onaddContactBlock = function (data) {
            data = JSON.parse(data);
            cssOrm.trigger("contactAdd", data);
        };
        clsContactBase._ondeleteContactBlock = function (data) {
            data = JSON.parse(data);
            cssOrm.trigger("contactDel", data);
        };
        clsContactBase._onsearchContactBlock = function (data) {
            data = JSON.parse(data);
            cssOrm.trigger("contactSearch", data);
        };
        clsContactBase._onmodifyContactBlock = function (data) {
            data = JSON.parse(data);
            cssOrm.trigger("contactModify", data);
        };
        rxm_contact.openContactBlock = clsContactBase._onopenContactBlock;
        rxm_contact.multiOpenContactBlock = clsContactBase._onmultiOpenContactBlock;
        rxm_contact.addContactBlock = clsContactBase._onaddContactBlock;
        rxm_contact.deleteContactBlock = clsContactBase._ondeleteContactBlock;
        rxm_contact.searchContactBlock = clsContactBase._onsearchContactBlock;
        rxm_contact.modifyContactBlock = clsContactBase._onmodifyContactBlock;
        cssOrm.declare("clsContactBase", clsContactBase, true);
    }
    return cssOrm.obj.clsContactBase();
});

define("RxmControlBase", [], function () {
    if (typeof rxm_control == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.clsControlBase === "undefined") {
        function clsControlBase() {
            ///<summary> 日期选择器插件</summary>
        }
        clsControlBase.prototype.openDatePicker = function (optId, withDay, year, month, day, startyear, endyear) {
            ///<summary> 打开日期选择器</summary>
            if (withDay == undefined) {
                withDay = cssOrm.default.openDatePicker.withDay;
            }
            if (year == undefined) {
                year = cssOrm.default.openDatePicker.year;
            }
            if (month == undefined) {
                month = cssOrm.default.openDatePicker.month;
            }
            if (day == undefined) {
                day = cssOrm.default.openDatePicker.day;
            }
            if (startyear == undefined) {
                startyear = cssOrm.default.openDatePicker.startyear;
            }
            if (endyear == undefined) {
                endyear = cssOrm.default.openDatePicker.endyear;
            }
            rxm_control.openDatePicker(optId, withDay, year, month, day, startyear, endyear);
        };
        clsControlBase.prototype.openTimePicker = function (optId, hour, minute) {
            ///<summary> 打开时间选择器</summary>
            if (!hour) {
                hour = "";
            }
            if (!minute) {
                minute = "";
            }
            rxm_control.openTimePicker(optId, hour, minute);
        };
        clsControlBase.prototype.openTimeAndSecondPicker = function (optId, hour, minute, second) {
            ///<summary> 打开时间选择器(包含秒)</summary>
            if (!hour) {
                hour = "";
            }
            if (!minute) {
                minute = "";
            }
            if (!second) {
                second = "";
            }
            rxm_control.openTimeAndSecondPicker(optId, hour, minute, second);
        };
        clsControlBase.prototype.openDateAndTimePicker = function (optId, year, month, day, hour, min) {
            ///<summary> 打开年月日时分选择器</summary>
            if (!year) {
                year = "";
            }
            if (!month) {
                month = "";
            }
            if (!day) {
                day = "";
            }
            if (!hour) {
                hour = "";
            }
            if (!min) {
                min = "";
            }
            rxm_control.openDateAndTimePicker(optId, year, month, day, hour, min);
        };
        clsControlBase.prototype.openInputDialog = function (optid, type, inputHint, btnText, dialogbg, dialogInputBg, dialogBtnBg) {
            ///<summary> 打开输入对话框</summary>
            if (!type) {
                type = 0;
            }
            if (!inputHint) {
                inputHint = "";
            }
            if (!btnText) {
                btnText = "";
            }
            if (!dialogbg) {
                dialogbg = "";
            }
            if (!dialogInputBg) {
                dialogInputBg = "";
            }
            if (!dialogBtnBg) {
                dialogBtnBg = "";
            }
            rxm_control.openInputDialog(optid, type, inputHint, btnText, dialogbg, dialogInputBg, dialogBtnBg);
        };
        clsControlBase._cbOpenDatePicker = function (opId, year, month, day) {
            var data = {
                year: year,
                month: (parseInt(month) + 1) + "",
                day: day
            };
            cssOrm.trigger("openDatePicker", opId, data);
        };
        clsControlBase._cbOpenTimePicker = function (opId, hour, minute) {
            var data = {
                hour: hour,
                minute: minute
            };
            cssOrm.trigger("openTimePicker", opId, data);
        };
        clsControlBase._cbOpenDateAndTimePicker = function (opId, year, month, day, hour, min) {
            var data = {
                year: year,
                month: (parseInt(month) + 1) + "",
                day: day,
                hour: hour,
                min: min
            };
            cssOrm.trigger("openDateAndTimePicker", opId, data);
        };
        clsControlBase._cbOpenTimeAndSecondPicker = function (opId, hour, minute, second) {
            var data = {
                hour: hour,
                minute: minute,
                second: second
            };
            cssOrm.trigger("openTimeAndSecondPicker", opId, data);
        };
        clsControlBase._cbOpenInputDialog = function (opId, data) {
            cssOrm.trigger("openInputDialog", opId, data);
        };
        rxm_control.openDatePickerBlock = clsControlBase._cbOpenDatePicker;
        rxm_control.openTimePickerBlock = clsControlBase._cbOpenTimePicker;
        rxm_control.openDateAndTimePickerBlock = clsControlBase._cbOpenDateAndTimePicker;
        rxm_control.openTimeAndSecondPickerBlock = clsControlBase._cbOpenTimeAndSecondPicker;
        rxm_control.openInputDialogBlock = clsControlBase._cbOpenInputDialog;
        cssOrm.declare("clsControlBase", clsControlBase, true);
    }
    return cssOrm.obj.clsControlBase();
});

define("RxmCipDialogBase", [], function () {
    if (typeof rxm_dialog == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.clsCipDialogBaseBase === "undefined") {
        function clsCipDialogBase() {
            ///<summary>弹出框</summary>
        }
        clsCipDialogBase.prototype.alert = function (message) {
            ///<summary> 显示带有一段消息和一个确认按钮的警告框</summary>
            ///<param  name="message"  type="String">必选 要在 window 上弹出的对话框中显示的纯文本（而非 HTML 文本）</param>
            rxm_dialog.alert(message);
        };
        clsCipDialogBase.prototype.confirm = function (message) {
            ///<summary> 显示带有一段消息以及确认按钮和取消按钮的对话框。回调方法cbConfirm</summary>
            ///<param  name="message"  type="String">必选 要在 window 上弹出的对话框中显示的纯文本（而非 HTML 文本）</param>
            rxm_dialog.confirm(message);
        };
        clsCipDialogBase.prototype.prompt = function (message, text, placeholder, title, btnok, btncancel) {
            ///<summary>显示可提示用户输入的对话框。 回调方法cbPrompt</summary>
            ///<param  name="text"  type="String">可选 要在对话框中显示的纯文本（而不是 HTML 格式的文本）。</param>
            ///<param  name="defaultText"  type="String">可选 默认的输入文本</param>
            rxm_dialog.prompt(message, text, placeholder, title, btnok, btncancel);
        };
        clsCipDialogBase._oncbConfirm = function (data) {
            var a = {
                data: data
            };
            cssOrm.trigger("dialogConfirm", a);
        };
        clsCipDialogBase._oncbPrompt = function (data) {
            var a = {
                data: data
            };
            cssOrm.trigger("dialogPrompt", a);
        };
        rxm_dialog.confirmBlock = clsCipDialogBase._oncbConfirm;
        rxm_dialog.promptBlock = clsCipDialogBase._oncbPrompt;
        cssOrm.declare("clsCipDialogBase", clsCipDialogBase, true);
    }
    return cssOrm.obj.clsCipDialogBase();
});

define("RxmFileMgr", [], function () {
    if (typeof rxm_file == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.clsFileMgr != "undefined") {
        return cssOrm.obj.clsFileMgr();
    }
    ;
    function clsFileMgr() {
        ///<summary>文件管理</summary>
    }
    ;
    clsFileMgr.prototype.createFile = function (id, arg) {
    };
    clsFileMgr.prototype.createDir = function (id, dirPath) {
    };
    clsFileMgr.prototype.openFile = function (id, path, mode) {
        ///<summary>打开文件</summary>
        ///<param  name="id" type="Number">唯一标识符 </param>
        ///<param  name="path" type="String">路径</param>
        ///<param  name="mode" type="String">打开模式</param>
        var p = path;
        if (p.indexOf("://") == -1) {
            if (p.indexOf("www/" === 0)) {
                path = "citp://" + p;
            }
        }
        rxm_file.open(id, path, mode);
    };
    //clsFileMgr.prototype.deleteFileByPath = function (path) { }
    clsFileMgr.prototype.deleteFileByID = function (id) { };
    // clsFileMgr.prototype.isFileExistByPath = function (id, path) { }
    clsFileMgr.prototype.isFileExistByID = function (id) { };
    //clsFileMgr.prototype.getFileTypeByPath = function (path) { }
    clsFileMgr.prototype.getFileTypeByID = function (id) { };
    clsFileMgr.prototype.seekFile = function (id, len) { };
    clsFileMgr.prototype.seekBeginOfFile = function (id) { };
    clsFileMgr.prototype.seekEndOfFile = function (id) { };
    clsFileMgr.prototype.writeFile = function (id, mode, data) { };
    clsFileMgr.prototype.readFile = function (id, len) {
        ///<summary>读文件,回调方法cbReadFile</summary>
        ///<param  name="id" type="Number">唯一标识符 </param>
        ///<param  name="len" type="Number">读取长度，-1 全文件</param>
        rxm_file.read(id, len);
    };
    clsFileMgr.prototype.openFileDlg = function (path, ends) {
        ///<summary>文件管理器,回调方法cbExplorer</summary>
        ///<param  name="path" type="String">必选 文件路径 </param>
        if (ends) {
            if (ends == "*") {
                rxm_file.openFileDlg("");
            }
            else {
                rxm_file.openFileDlg("", ends);
            }
        }
        else {
            rxm_file.openFileDlg(path);
        }
    };
    clsFileMgr.prototype.multiExplorer = function (path) { };
    clsFileMgr.prototype.getFileSize = function (id) { };
    clsFileMgr.prototype.curPath = function (id) {
        rxm_file.curPath(id);
    };
    clsFileMgr.prototype.curRealPath = function (path) {
        rxm_file.curRealPath(path);
    };
    clsFileMgr.prototype.closeFile = function (id) { };
    clsFileMgr.prototype.getReaderOffset = function (id) { };
    clsFileMgr.prototype.readPercent = function (id, percent, len) { };
    clsFileMgr.prototype.readNext = function (id, len) { };
    clsFileMgr.prototype.readPre = function (id, len) { };
    clsFileMgr.prototype.openSecure = function (id, path, mode, key) { };
    clsFileMgr.prototype.createSecure = function (id, path, key) { };
    clsFileMgr.prototype.getFileLastModifiedTime = function (id, path) {
        ///<summary>获取文件或文件夹的最后修改时间, 回调方法cbGetFileCreateTime</summary>
        ///<param  name="id" type="String">必选 文件唯一标识符 </param>
        ///<param  name="path" type="String">必选 文件路径 </param>
        rxm_file.getFileLastModifiedTime(id, path);
    };
    clsFileMgr.prototype.renameFile = function (param) { };
    clsFileMgr.prototype.search = function (param) { };
    clsFileMgr.prototype.getFileListByPath = function (path) { };
    clsFileMgr.prototype.getSizeByPath = function (id, path) {
        ///<summary>通过路径获取文件或文件夹大小,回调方法cbGetFileSizeByPath</summary>
        ///<param  name="id" type="String">必选 唯一标识符,与回调方法中id对应 </param>
        ///<param  name="path" type="String">必选 文件路径 </param>
        rxm_file.getSizeByPath(id, path);
    };
    clsFileMgr.prototype.copyFile = function (opID, srcFilePath, objPath) {
    };
    clsFileMgr.msg = {
        createFile: "createFile",
        createDir: "createDir",
        openFile: "openFile",
        fileExistByPath: "fileExistByPath",
        readFile: "readFile",
    };
    clsFileMgr.openMode = {
        //只读
        readOnly: "1",
        //只写
        writeOnly: "2",
        //读写
        readWrite: "3",
        //新建
        createOnly: "4",
        //新建读
        readCreate: "5",
        //新建写
        writeCreate: "6"
    };
    clsFileMgr.oncbCreateFile = function (opId, data) {
        ///<summary>创建文件的回调方法</summary>
        ///<param  name="opId" type="Number">唯一标识符 </param>
        ///<param  name="data" type="Number">返回cip.cSuccess或cip.cFailed,详见CONTANT中CallbackInt类型数据 </param>
    };
    clsFileMgr.oncbCreateDir = function (opId, data) {
        ///<summary>创建文件夹的回调方法</summary>
        ///<param  name="opId" type="Number">唯一标识符 </param>
        ///<param  name="data" type="Number">返回cip.cSuccess或cip.cFailed,详见CONTANT中CallbackInt类型数据 </param>
    };
    clsFileMgr.onopenBlock = function (opId, data) {
        ///<summary>打开文件的回调方法</summary>
        ///<param  name="opId" type="Number">唯一标识符 </param>
        ///<param  name="data" type="Number">返回cip.cSuccess或cip.cFailed,详见CONTANT中CallbackInt类型数据 </param>
        $(document).trigger(clsFileMgr.msg.openFile + "_" + opId, data);
    };
    rxm_file.openBlock = clsFileMgr.onopenBlock;
    clsFileMgr.oncbDeleteFileByID = function (opId, data) {
        ///<summary>根据id删除文件的回调方法</summary>
        //<param  name="opId" type="Number">唯一标识符 </param>
        ///<param  name="data" type="Number">返回cip.cSuccess或cip.cFailed,详见CONTANT中CallbackInt类型数据 </param>
    };
    clsFileMgr.oncbIsFileExistByID = function (opId, data) {
        ///<summary>根据id判断文件是否存在的回调方法</summary>
        ///<param  name="opId" type="Number">唯一标识符 </param>
        ///<param  name="data" type="Number">返回cip.cSuccess或cip.cFailed,详见CONTANT中CallbackInt类型数据 0 文件不存在1，文件存在</param>
    };
    clsFileMgr.oncbGetFileTypeByID = function (opId, data) {
        ///<summary> 根据路径获取文件类型的回调方法</summary>
        ///<param  name="opId" type="Number">唯一标识符 </param>
        ///<param  name="data" type="Number">返回cip.cSuccess或cip.cFailed,详见CONTANT中CallbackInt类型数据 0 文件，1文件夹</param>
    };
    clsFileMgr.oncbMultiExplorer = function (pathInJson) {
        ///<summary> 文件管理器的回调方法</summary>
        ///<param  name="path" type="String">返回文件管理器里选择的文件路径 json  {“2”:”/sdcard/DCIM/IMG_0003.JPG”,”1”:”/sdcard/DCIM/1337569458885.png”}</param>
    };
    clsFileMgr.oncbWriteFile = function (opId, data) {
        ///<summary> 写文件的回调方法</summary>
        ///<param  name="opId" type="Number">唯一标识符 </param>
        ///<param  name="data" type="Number">1- 成功 0-失败</param>
    };
    clsFileMgr.onreadBlock = function (opId, data) {
        ///<summary> 读文件的回调方法</summary>
        ///<param  name="opId" type="Number">唯一标识符 </param>
        ///<param  name="data" type="String">返回文件的内容</param>
        $(document).trigger(clsFileMgr.msg.readFile + "_" + opId, data);
    };
    rxm_file.readBlock = clsFileMgr.onreadBlock;
    cssOrm.declare("clsFileMgr", clsFileMgr, true);
    ///
    function clsFileWriter() {
    }
    cssOrm.declare("clsFileWriter", clsFileWriter, false);
    return cssOrm.obj.clsFileMgr();
});

define("RxmImageBase", [], function () {
    if (typeof rxm_image == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.clsImageBase === "undefined") {
        function clsImageBase() {
            ///<summary> 图片插件</summary>
        }
        clsImageBase.prototype.openImgPicker = function (param) {
            ///<summary> 打开照片选择器</summary>
            ///<param name="min",type="Number">可选 最小选择数量 ,传0表示无限制，默认值1</param>
            ///<param name="max",type="Number">可选 最大选择数量 ,传0表示无限制，默认值0</param>
            ///<param name="quality",type="Number">可选 PG压缩质量 取值范围 0-1 越大表示质量越好，默认值0.5</param>
            ///<param name="usePng",type="Number">可选 用png格式导出图片 ,此参数为1时,quality参数无效，默认值0</param>
            ///<param name="detailedInfo",type="Number">可选 此参数为1时,回调中会包含图片的额外信息，默认值0</param>
            if (param.param) {
                param = param.param;
            }
            rxm_image.openImgPicker(param.min, param.max, param.quality, param.usePng, param.detailedInfo);
        };
        clsImageBase.prototype.openImgBrowser = function (args) {
            ///<summary> 打开一个可以浏览图片的浏览器</summary>
            ///<param name="data",type="Array">必选 图片资源构成的数组 </param>
            ///<param name="startIndex",type="Number">可选 非负整数 起始图片位置，默认值0</param>
            ///<param name="displayActionButton",type="Number">可选 1:显示分享按钮 ,0 隐藏，默认值0</param>
            ///<param name="enableGrid",type="Number">可选 1:允许九宫格视图 ,0 不允许，默认值1</param>
            ///<param name="startOnGrid",type="Number">可选 1:以九宫格视图起始，默认值0</param>
            ///<param name="displayNavArrows",type="Number">可选 显示切换箭头(仅iOS支持此参数)，默认值0</param>
            if (!args.startIndex) {
                args.startIndex = 0;
            }
            if (!args.displayActionButton) {
                args.displayActionButton = 0;
            }
            if (!args.enableGrid) {
                args.enableGrid = 1;
            }
            if (!args.startOnGrid) {
                args.startOnGrid = 0;
            }
            if (!args.displayNavArrows) {
                args.displayNavArrows = 0;
            }
            if (!args.supportCacheToAlbum) {
                args.supportCacheToAlbum = 0;
            }
            rxm_image.openImgBrowser(args.data, args.startIndex, args.displayActionButton, args.enableGrid, args.startOnGrid, args.displayNavArrows, args.supportCacheToAlbum);
            //rxm_image.openBrowser(data, startIndex, enableGrid, startOnGrid, displayNavArrows);
        };
        clsImageBase.prototype.openImgCropper = function (src, quality, usePng, mode) {
            ///<summary>打开一个图片裁剪器,导出裁剪后的图片,并返回图片路径</summary>
            ///<param name="src",type="String">可选 图片路径 支持wgt:// wgts:// file:// res://</param>
            ///<param name="quality",type="Number">可选 JPG压缩质量 取值范围 0-1 越大表示质量越好，默认值0.5</param>
            ///<param name="usePng",type="Number">可选 1:用png格式导出图片 ,此参数为1时,quality参数无效，默认值0</param>
            ///<param name="mode",type="Number">可选 正方型裁剪 2- 圆形裁剪(仅iOS支持圆形裁剪)，默认值1</param>
            rxm_image.openImgCropper(src, quality, usePng, mode);
        };
        clsImageBase.prototype.saveToPhotoAlbum = function (localPath, extraInfo) {
            ///<summary>将本地图片储存到系统相册</summary>
            ///<param name="localPath",type="String">必选 图片路径 支持res:// wgt:// wgts:// file://</param>
            ///<param name="extraInfo",type="String">可选 任意字符串,设置后会随cbSaveToPhotoAlbum传出,extraInfo 可作唯一标识符用</param>
            rxm_image.saveToPhotoAlbum(localPath, extraInfo);
        };
        clsImageBase.prototype.clearOutputImages = function () {
            ///<summary>清除由本插件的openPicker、openCropper接口所生成的图片文件 若您的APP有多个widget,则只会清除由当前widget所生成的图片文件</summary>
            rxm_image.clearOutputImages();
        };
        clsImageBase.prototype.setIpadPopEnable = function (flag) {
            ///<summary>插件在iPad上默认用pop窗口展示插件页面,通过调用此接口,可以选择是否禁用pop窗口,改用全屏展示插件页面。</summary>
            ///<param name="flag",type="Number">必选  为0时表示禁用pop窗口,非0时表示启用pop窗口</param>
            rxm_image.setIpadPopEnable(flag);
        };
        clsImageBase.prototype.openVideoPicker = function (needBase64) {
            ///<summary> 打开视频选择器</summary>
            ///<param name="needBase64",type="int">1返回视频缩略图的 base64，0 不返回</param>
            ///<param name="param",type="Object">可选 </param>
            rxm_image.openVideoPicker(needBase64);
        };
        clsImageBase._onCbSaveToPhotoAlbum = function (status, info, path) {
            var a = {
                status: status,
                info: info,
                path: path
            };
            cssOrm.trigger("imageSaveToPhotoAlbum", a);
        };
        clsImageBase._onPickerClosed = function (status, data, detailedImageInfo, info) {
            var a = {
                status: status,
                data: data,
                detailedImageInfo: detailedImageInfo,
                info: info
            };
            cssOrm.trigger("imagePickerClosed", a);
        };
        clsImageBase._onCropperClosed = function (status, info) {
            var a = {
                status: status,
                info: info
            };
            cssOrm.trigger("imageCropperClosed", a);
        };
        clsImageBase._onVideoPickerClosed = function (videoPath, thumbnail, thumbnailBase64) {
            var a = {
                videoPath: videoPath,
                thumbnail: thumbnail,
                thumbnailBase64: thumbnailBase64
            };
            cssOrm.trigger("videoPickerClosed", a);
        };
        rxm_image.saveToPhotoAlbumBlock = clsImageBase._onCbSaveToPhotoAlbum;
        rxm_image.onImgPickerClosed = clsImageBase._onPickerClosed;
        rxm_image.onImgCropperClosed = clsImageBase._onCropperClosed;
        rxm_image.onVideoPickerClosed = clsImageBase._onVideoPickerClosed;
        cssOrm.declare("clsImageBase", clsImageBase, true);
    }
    return cssOrm.obj.clsImageBase();
});

define("RxmLocalNotificationBase", [], function () {
    if (typeof rxm_localNotification == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.clsLocalNotificationBase != "undefined") {
        return cssOrm.obj.clsLocalNotificationBase();
    }
    function clsLocalNotificationBase() {
        ///<summary>本地通知插件原生API封装</summary>
    }
    clsLocalNotificationBase.prototype.addNotice = function (args) {
        ///<summary>本地通知功能,可以做到本地定时推送消息提醒,设置提醒消息时会在通知栏收到消息,提醒声音与系统设置的系统默认铃声提醒一致</summary>
        ///<param  name="args"  type="clsNotificationArgs"></param>
        rxm_localNotification.addNotice(args.id, args.time, args.mode, args.message, args.buttonTitle, args.ringPath, args.cycle, args.notifyCount);
    };
    clsLocalNotificationBase.prototype.removeNotice = function (id) {
        ///<summary>移除指定唯一标示符的通知</summary>
        ///<param  name="id"  type="String">必选 通知的唯一标示符</param>
        rxm_localNotification.removeNotice(id);
    };
    clsLocalNotificationBase.prototype.removeAllNotice = function () {
        ///<summary>移除所有通知</summary>
        rxm_localNotification.removeAllNotice();
    };
    clsLocalNotificationBase._onAdd = function (id, message, extras) {
        ///<summary>接收到通知时回调</summary>
        ///<param  name="id"  type="String">必选 通知的唯一标示符</param>
        ///<param  name="message"  type="String">必选 通知内容</param>
        ///<param  name="extras"  type="String">必选 额外的数据信息</param>
        var cbData;
        cbData = {
            id: id,
            message: message,
            extras: extras
        };
        cssOrm.trigger("notificationAdd", cbData);
    };
    rxm_localNotification.onMessage = clsLocalNotificationBase._onAdd;
    cssOrm.declare("clsLocalNotificationBase", clsLocalNotificationBase, true);
    return cssOrm.obj.clsLocalNotificationBase();
});

define("RxmLocationBase", [], function () {
    if (typeof rxm_position == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.clsLocationBase != "undefined") {
        return cssOrm.obj.clsLocationBase();
    }
    function clsLocationBase() {
        ///<summary>本地定位插件原生API封装</summary>
    }
    clsLocationBase.prototype.open = function () {
        ///<summary>位置信息将通过手机GPS、WIFI或移动网络信号获取。成功打开定位功能时回调cbOpenLocation方法,成功获取到位置信息时通过onChange回调方法返回。</summary>
        rxm_position.open();
    };
    clsLocationBase.prototype.close = function () {
        ///<summary>关闭定位功能,不再监听位置信息。</summary>
        rxm_position.close();
    };
    clsLocationBase.prototype.getAddressByPosition = function (optId, inLatitude, inLongitude, flag) {
        ///<summary>根据经纬度获取对应的地址信息 回调 cbGetAddress</summary>
        ///<param  name="inLatitude"  type="String">必选 纬度</param>
        ///<param  name="inLongitude"  type="String">必选 经度</param>
        ///<param  name="flag"  type="String">可选 返回地址类型,默认是地址名称。值为1时返回地址详情(JSON格式)</param>
        rxm_position.getAddressByPosition(optId, inLatitude, inLongitude, flag);
    };
    clsLocationBase.prototype.navigationByApps = function (startName, startLng, startLat, endName, endLng, endLat, coorType) {
        ///<summary>调用手机安装的地图 app 进行导航，默认驾车模式，进入第三方 app 后可以自行切换导航模式。</summary>
        rxm_position.navigationByApps(startName, startLng, startLat, endName, endLng, endLat, coorType);
    };
    clsLocationBase._onCbOpenLocation = function (data) {
        ///<summary>定位功能是否成功打开的回调方法</summary>
        ///<param  name="data"  type="Number">必选 返回cip.cSuccess或cip.cFailed,详见CONTANT中CallbackInt类型数据</param>
        var cbData;
        cbData = {
            data: data
        };
        cssOrm.trigger("locationOpen", cbData);
        if (data == 1) {
            rxm_position.onChange = function (lat, log) {
                ///<summary>设备位置变化的监听方法</summary>
                ///<param  name="lat"  type="Number">必选 纬度</param>
                ///<param  name="log"  type="Number">必选 经度</param>
                var cbData;
                cbData = {
                    lat: lat,
                    log: log
                };
                cssOrm.trigger("locationOnChange", cbData);
            };
        }
    };
    clsLocationBase._onCbGetAddress = function (optId, data) {
        ///<summary>获取到位置信息返回经纬度数据的回调方法</summary>
        ///<param  name="dataType"  type="Number">必选 参数类型,0：字符串；1：JSON字符串</param>
        ///<param  name="data"  type="Number">必选 返回获取的地址或者错误信息ErrorCode</param>
        //var cbData;
        //cbData = {
        //    dataType: optId,
        //    data: data
        //}
        cssOrm.trigger("locationGetAddress", optId, data);
    };
    //clsLocationBase._onChange = function (lat, log) {
    //    ///<summary>设备位置变化的监听方法</summary>
    //    ///<param  name="lat"  type="Number">必选 纬度</param>
    //    ///<param  name="log"  type="Number">必选 经度</param>
    //    var cbData;
    //    cbData = {
    //        lat: lat,
    //        log: log
    //    }
    //    cssOrm.trigger("locationOnChange", cbData);
    //}
    rxm_position.openBlock = clsLocationBase._onCbOpenLocation;
    rxm_position.getAddressByPositionBlock = clsLocationBase._onCbGetAddress;
    //rxm_position.onChange = clsLocationBase._onChange;
    cssOrm.declare("clsLocationBase", clsLocationBase, true);
    return cssOrm.obj.clsLocationBase();
});

define("RxmScannerBase", [], function () {
    if (typeof rxm_scanner == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.clsScannerBase === "undefined") {
        function clsScannerBase() {
            ///<summary> 二维码插件</summary>
        }
        clsScannerBase.prototype.begin = function () {
            rxm_scanner.begin();
        };
        clsScannerBase.prototype.createQR = function (content) {
            rxm_scanner.createQR(content);
        };
        clsScannerBase._cbOpen = function (status, data) {
            var data = {
                status: status,
                data: data
            };
            cssOrm.trigger("scannerOpen", data);
        };
        clsScannerBase._cbCreateQR = function (data) {
            cssOrm.trigger("scannerCreateQR", "", data);
        };
        cssOrm.declare("clsScannerBase", clsScannerBase, true);
        rxm_scanner.beginBlock = clsScannerBase._cbOpen;
        rxm_scanner.createQRBlock = clsScannerBase._cbCreateQR;
    }
    return cssOrm.obj.clsScannerBase();
});

define("RxmSpeechBase", [], function () {
    if (typeof rxm_speech == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.clsSpeechBase === "undefined") {
        function clsSpeechBase() {
            ///<summary> 对</summary>
        }
        clsSpeechBase.prototype.start = function () {
            ///<summary> 通过此方法调用语音识别</summary>
            rxm_speech.start();
        };
        clsSpeechBase.prototype.stop = function () {
            ///<summary> 通过此方法调用语音识别</summary>
            rxm_speech.stop();
        };
        clsSpeechBase._getRecgMsgBlock = function (data) {
            var a = {
                data: data
            };
            cssOrm.trigger("speechStop", a);
        };
        rxm_speech.getRecgMsgBlock = clsSpeechBase._getRecgMsgBlock;
        cssOrm.declare("clsSpeechBase", clsSpeechBase, true);
    }
    return cssOrm.obj.clsSpeechBase();
});

define("RxmVideoBase", ['RxmUtil'], function (util) {
    if (typeof rxm_video_player == 'undefined' || typeof rxm_video_recorder == 'undefined') {
        return;
    }
    if (typeof cssOrm.obj.clsVideoBase === "undefined") {
        function clsVideoBase() {
            ///<summary> 本地视频播放调用</summary>
        }
        var homeArgs = require(require.rxm.AppTool);
        clsVideoBase.prototype.openSystemPlayer = function (param) {
            ///<summary> 打开视频播放器</summary>
            var json = "";
            if (param.param) {
                json = param.param;
            }
            else {
                json = param;
            }
            rxm_video_player.openSystemPlayer(json.src);
        };
        clsVideoBase.prototype.openRxmPlayer = function (param) {
            ///<summary> 打开自定义视频播放器</summary>
            var id = param.id;
            var title = param.title;
            var sources = JSON.stringify(param.sources);
            var supportRecordPlayPosition = param.supportRecordPlayPosition;
            var supportLocalPref = param.supportLocalPref;
            var supportAcceleratedPlay = param.supportAcceleratedPlay;
            rxm_video_player.openRxmPlayer(id, title, sources, supportRecordPlayPosition, supportLocalPref, supportAcceleratedPlay);
        };
        clsVideoBase.prototype.openPlayer = function (param) {
            ///<summary> 打开自定义视频播放器，支持界面定制</summary>
            var json = "";
            if (param.param) {
                json = param.param;
            }
            else {
                json = param;
            }
            rxm_video_recorder.openPlayer(JSON.stringify(json));
        };
        clsVideoBase.prototype.closePlayer = function () {
            ///<summary> 关闭视频播放器,此操作会触发onPlayerClosed 播放器被关闭时的监听方法</summary>
            rxm_video_recorder.closePlayer();
        };
        clsVideoBase.prototype.record = function (params) {
            ///<summary>打开视频录制界面 回调 onRecordFinish</summary>
            ///<param  name="params"  type="Object">必选 JSON字符串</param>
            var maxDuration = homeArgs.getSettingData().video.maxDuration;
            var qualityType = homeArgs.getSettingData().video.qualityType;
            var bitRateType = homeArgs.getSettingData().video.bitRateType;
            var fileType = homeArgs.getSettingData().video.fileType;
            var param = {
                maxDuration: homeArgs.getSettingData().video.maxDuration,
                qualityType: homeArgs.getSettingData().video.qualityType,
                bitRateType: homeArgs.getSettingData().video.bitRateType,
                fileType: homeArgs.getSettingData().video.fileType,
                needThumb: homeArgs.getSettingData().video.needThumb
            };
            if (params.param) {
                params = params.param;
            }
            if (params) {
                if (params.maxDuration) {
                    param.maxDuration = params.maxDuration;
                }
                if (params.qualityType) {
                    param.qualityType = params.qualityType;
                }
                if (params.bitRateType) {
                    param.bitRateType = params.bitRateType;
                }
                if (params.fileType) {
                    param.fileType = params.fileType;
                }
                if (params.needThumb) {
                    param.needThumb = params.needThumb;
                }
            }
            rxm_video_recorder.record(JSON.stringify(param));
        };
        clsVideoBase._onPlayerClose = function (src) {
            result = JSON.parse(src);
            cssOrm.trigger("videoClose", result);
            cssOrm.trigger("videoOpenPlayer", result);
        };
        clsVideoBase._onPlayerStatusChange = function (status) {
            status = JSON.parse(status);
            cssOrm.trigger("videoStatusChange", status);
        };
        clsVideoBase._onRecordFinish = function (result) {
            result = JSON.parse(result);
            //            console.log(result.result);
            if (result.result == 2) {
                util.alert("请授权麦克风和相机权限后重试");
            }
            else if (result.result == 1) {
                util.alert("已取消录制");
            }
            else {
                cssOrm.trigger("videoRecordFinish", result);
            }
            //cssOrm.trigger("videoRecordFinish", result);
        };
        clsVideoBase._onExportWithProgress = function (data) {
            data = JSON.parse(data);
            cssOrm.trigger("videoExportWithProgress", data);
        };
        rxm_video_recorder.onPlayerClose = clsVideoBase._onPlayerClose;
        rxm_video_recorder.onPlayerStatusChange = clsVideoBase._onPlayerStatusChange;
        rxm_video_recorder.onRecordFinish = clsVideoBase._onRecordFinish;
        rxm_video_recorder.onExportWithProgress = clsVideoBase._onExportWithProgress;
        cssOrm.declare("clsVideoBase", clsVideoBase, true);
    }
    return cssOrm.obj.clsVideoBase();
});

define("RxmAppFileUploader", [""], function (dataArr, clsUploader) {
    ///<param name="dataArr" value="PdwebDataCollectionBase"></param>
    ///<param name="clsUploader" value="ClsGdclUploader"></param>
    if (cssOrm.cls.clsAppFileUploaderr) {
        return cssOrm.cls.clsAppFileUploaderr;
    }
    var cls = function (options) {
        ///<summary>原生开发上传类</summary>
        ///<param name="options" type="Object">baidu WebUploader.uploader对象选择项，参见 /http://fex.baidu.com/webuploader/doc/index.html </param>
        ///<field  name="uploader" type="ClsGdclUploaer"> </field>
        ///<field  name="modifiedObj"  type="Object"> 修改操作对象</field>
        //baiduWebUploader.Mediator.installTo(this);//建立消息队列
        this.dataArr = new dataArr();
        itemClass = fileInfo.prototype.constructor;
        this._onlyRead = false;
        //默认的缩略图后缀
        this.defaultThumbSuffix = "";
        this.uploader = new clsUploader(options);
        //添加文件
        this.uploader.on(clsUploader.enumEvt.fileQueued, this._onAfterFileAdd, this);
        //文件上传进度
        this.uploader.on(clsUploader.enumEvt.uploadProgress, this._onUploadProgress, this);
        //文件在队列中删除
        //this.uploader.on(clsUploader.enumEvt.fileDequeued, this.delFile, this);
        //单个文件上传开始
        this.uploader.on(clsUploader.enumEvt.uploadStart, this._onUploadStart, this);
        //单个文件上传结束
        this.uploader.on(clsUploader.enumEvt.uploadSuccess, this._onAfterUploadSuccess, this);
        //所有文件上传结束
        this.uploader.on(clsUploader.enumEvt.uploadFinished, this._onUploadFinished, this);
        this.uploader.on(clsUploader.enumEvt.error, this._onError, this);
        this.uploader.on("beforeFileQueued", this._onbeforeFileQueued, this);
        this._auto = true;
    };
    cls.prototype.addFile = function (fileOrFiles, who, ipos) {
        if (who === 'filedlg') {
            this.dataArr.addData(fileOrFiles, who, ipos);
        }
        else if (who === "ormApp") {
        }
        else {
            this.dataArr.addData(fileOrFiles, who, ipos);
        }
    };
    cls.prototype.getFileNum = function () {
        return this.dataArr.getData().length;
    };
    cls.prototype.delFile = function (fileOrFiles) {
        if ($.isArray(fileOrFiles)) {
        }
        else {
            if (fileOrFiles._uploaderFile) {
                this.uploader.removeFile(fileOrFiles._uploaderFile);
            }
            this.dataArr.removeData(fileOrFiles);
        }
    };
    cls.prototype.getChangedFiles = function () {
        return this.dataArr.getDataChanged();
    };
    cls.prototype.submitSuccess = function () {
        this.dataArr.submitSuccess();
    };
    cls.prototype.option = function (key, opt) {
        this.uploader.option(key, opt);
    };
    cls.prototype.OpenFileDlg = function (IdReplaced) {
        this.modifiedObj = IdReplaced;
        this.uploader._openFileDlg();
        // event.stopPropagation();
        event.preventDefault();
        return false;
    };
    //accept {Arroy} [可选] [默认值：null] 指定接受哪些类型的文件。 由于目前还有ext转mimeType表，所以这里需要分开指定。
    //title {String} 文字描述
    //extensions {String} 允许的文件后缀，不带点，多个用逗号分割。
    //mimeTypes {String} 多个用逗号分割。
    //如：
    //{
    //    title: 'Images',
    //    extensions: 'gif,jpg,jpeg,bmp,png',
    //    mimeTypes: 'image/*'
    //}
    cls.prototype.accept = function (fileExt) {
        ///<summary>指定接受哪些类型的文件</summary>
        ///<param name="fileExt" type="clsBaiduAccept"></param>
        this.option({ accept: fileExt });
        // this.uploader.options.accept = [fileExt];
    };
    cls.prototype.enableAdd = function () {
        ///<summary>能不能继续添加文件</summary>
        ///<return type="Boolean"></return>
        var num = this.getFileNum();
        return num < this.uploader.options.fileNumLimit;
    };
    cls.prototype.enableModify = function () {
        ///<summary>能不能修改文件</summary>
        ///<return type="Boolean"></return>
        return this.getFileNum() > 0;
    };
    cls.prototype.enableDel = function () {
        ///<summary>能不能删除文件</summary>
        ///<return type="Boolean"></return>
        return this.getFileNum() > 0;
    };
    cls.prototype.makeThumb = function (file, func) {
        ///<summary>产生文件缩略图，填充到image  src字段，</summary>
        ///<param name="fileOrFileId" type="Object" >文件对象，或者文件id</param>
        ///<param>产生文件缩略图参数，一般不用填写</param>
        ///<return type="String">返回 img  src 属性值</return>
        var ths = this;
        function MakeThumb(error, src) {
            if (!error) {
                file.thumbnail = src;
            }
            func(error, src);
            if (ths._auto)
                ths.uploader.upload(file);
        }
        ;
        this.uploader.makeThumb(file, MakeThumb, this.uploader.options.thumb.width, this.uploader.options.thumb.height);
    };
    cls.prototype.beginUpload = function (fileOrFileId) {
        ///<summary>调用baiduWebUpload  upload 函数开始上传，</summary>
        ///<param name="fileOrFileId" type="Object" >文件对象，或者文件id,undefined为全部上传</param>
        ///<return type="String">返回 img  src 属性值</return>
        this.uploader.upload(fileOrFileId);
    };
    cls.prototype.on = function (msgType, callback, thisArg) {
        this.dataArr.on(msgType, callback, thisArg);
    };
    cls.prototype.trigger = function (msgType, a1, a2, a3, a4, a5, a6) {
        this.dataArr.trigger(msgType, a1, a2, a3, a4, a5, a6);
    };
    cls.prototype._onAfterFileAdd = function (file) {
        if (typeof this.modifiedObj === "undefined") {
            this.addFile(new fileInfo(file), 'filedlg');
        }
        else {
            //修改
        }
    };
    //function(file){};
    cls.prototype._onUploadStart = function (file) {
        this.trigger(cls.enumEvt.uploadStart, file);
    };
    cls.prototype._onUploadProgress = function (file, percentage) {
        ///<summary>上传过程中触发，携带上传进度。</summary>
        ///<param name="file" type="clsBaiduFile">File对象</param>
        ///<param name="percentage" type="Number"">进度百分比</param>
        var size = this._fileSize();
        if (typeof percentage == "number") {
            percentage *= 1.0;
            i = percentage;
            size.already += file.size * percentage;
            percentage *= 100;
        }
        else {
            i = Number(percentage) * 1.0 / 100;
            size.already += file.size * i;
        }
        var thisFilePercent = "" + percentage;
        var totalPercent = "" + (size.already * 1.0 / size.total) * 100;
        this.trigger(cls.enumEvt.uploadProgress, file, totalPercent, thisFilePercent);
    };
    cls.prototype._fileSize = function () {
        var total = 0;
        var already = 0;
        var d = this.dataArr.getData();
        for (i = 0; i < d.length; i++) {
            var it = d[i];
            total += it.fileSize;
            if (typeof (it._uploaderFile) === "undefined") {
                already += it.fileSize;
            }
            ;
        }
        return {
            total: total,
            already: already
        };
    };
    //function(file,reason){};
    cls.prototype._onUploadError = function (file, reason) {
        ///<summary>当文件上传出错时触发</summary>
        ///<param name="file" type="File"">File对象</param>
        ///<param name=")" type="String"">出错的code</param>
    };
    //function(file,responseData){};
    cls.prototype._onAfterUploadSuccess = function (file, responseData) {
        ///<summary>当文件上传成功时触发</summary>
        ///<param name="file" type="File">File对象</param>
        ///<param name="responseData" type="Object"">服务端返回的数据</param>
        this.trigger(cls.enumEvt.uploadSuccess, file, responseData);
    };
    cls.prototype._onUploadFinished = function () {
        ///<summary>当所有文件上传结束时触发。</summary>
        //this.setState('confirm');
        //this._setSubmitBtnEnable(true);
    };
    //function(type){};
    cls.prototype._onError = function (type) {
        ///<summary>当validate不通过时，会以派送错误事件的形式通知调用者。通过upload.on('error', handler)可以捕获到此类错误，目前有以下错误会在特定的情况下派送错来。<br/>Q_EXCEED_NUM_LIMIT 在设置了fileNumLimit且尝试给uploader添加的文件数量超出这个值时派送。<br/>Q_EXCEED_SIZE_LIMIT 在设置了Q_EXCEED_SIZE_LIMIT且尝试给uploader添加的文件总大小超出这个值时派送。<br/>Q_TYPE_DENIED 当文件类型不满足时触发<br/>});</summary>
        ///<param name="type" type="String"">错误类型</param>     
        var error;
        switch (type) {
            case "Q_EXCEED_NUM_LIMIT":
                {
                    error = "文件数量不能超过" + this.uploader.options.fileNumLimit + "个";
                }
                ;
                break;
            case "F_EXCEED_SIZE":
                {
                    error = "文件大小不能超过" + this.uploader.options.fileSingleSizeLimit;
                }
                ;
                break;
            case "Q_TYPE_DENIED":
                {
                    error = "文件种类错误";
                }
                ;
                break;
            case "F_DUPLICATE":
                {
                    error = "不可选择相同的照片";
                }
                ;
                break;
            default: {
                error = type;
            }
        }
        alert(error);
    };
    cls.prototype._onFileDequeued = function (file) {
        ///<summary>移除文件</summary>
        ///<param name="file"  type="File"> 文件</param>
        this.trigger(cls.enumEvt.fileChanged);
    };
    cls.prototype._onbeforeFileQueued = function (file) {
        if (!this.enableAdd()) {
            var s = "上传文件数量不能超过" + this.getFileNum() + "个";
            util.alert(s);
            return false;
        }
        return true;
    };
    //静态变量，事件枚举
    cls.enumEvt = $.extend({}, dataArr.enumEvt, {
        //数据被转变事件
        //function({data:file,reasion:string})
        changed: "changed",
        //function({file:fileinfo,fileprogress:number,total:number}
        //文件上传进度
        uploadProgress: "uploadProgress",
        uploadStart: "uploadStart",
        uploadSuccess: "uploadSuccess"
    }, clsUploader.enumEvt);
    //读取文件的缩略图
    cls.urlThumb = function (fileId, width, height) {
        var path = getServer() + '/resoft/x/file/thumb?fileId=' + fileId;
        return path;
    };
    //打开文件，在浏览器中显示
    cls.urlOpen = function (fileId) {
        var path = getServer() + '/resoft/x/file/open?fileId=' + fileId;
        return path;
    };
    //下载文件，通过文件保存对话框选择路径，文件名称进行保存
    cls.urlDown = function (fileId) {
        var path = getServer() + '/resoft/x/file/down?fileId=' + fileId;
        return path;
    };
    cls.urlDownApk = function (fileId) {
        var path = getServer() + '/resoft/x/file/downApk?fileId=' + fileId;
        return path;
    };
    cls.urlDownH5 = function (fileId) {
        var path = getServer() + '/resoft/x/file/downH5?filePath=' + fileId;
        return path;
    };
    cls.urlUpload = function (fileId) {
        var path = getServer() + "/resoft/x/file/add";
        return path;
    };
    cssOrm.declare("clsAppFileUploaderr", cls);
    return cls;
});

define("RxmAppUploader", [require.rxm.NativeFile, "RxmOrmFileUploader",
    require.rxm.Video,
    require.rxm.Audio,
    require.rxm.Camera,
    require.rxm.Image,
    require.rxm.AppTool], function (fileOp, ormUploader, video, audio, camera, image, appTool) {
    ///<param name="fileOp" type="objOrmFile"></param>
    ///<param name="ormUploader" type="clsOrmFileUploader"></param>
    ///<param name="video" type="objOrmVideo"></param>
    ///<param name="audio" type="objOrmAudio"></param>
    ///<param name="camera" type="objOrmCamera"></param>
    ///<param name="image" type="objOrmImage"></param>
    ///<param name="appTool" type="clsAppArgs"></param>
    ///<summary>调用 封装</summary>
    if (cssOrm.cls.clsAppUploader) {
        return cssOrm.cls.clsAppUploader;
    }
    var cls = function (options, events) {
        ///<summary></summary>
        ///<param  name="options" value="cssArgs.clsOrmFileUploader.constructorArg"></param>
        ///<param  name="events" type="Object">事件名称和叫回函数{click:function{}}</param>
        ///<field  name="fileArr" type="Array" elementType="clsOrmFileUploader">事件名称和叫回函数{click:function{}}</param>
        this.options = options;
        this.msgid = appTool.unid();
        var dom = '<div id="' + this.msgid + '" style="width:0px;height:0px;display:none"></div>';
        //this.msgid = "#" + this.msgid;
        //var $contents = $("#rxm_content");
        //$(dom).appendTo($contents.length > 0 ? $contents : $(document));
        this.$msg = $(document);
        this.fileArr = [];
        this.uploadIndex = 0;
        this.on('uploadBeforeSend', this._onSendFileBefore, this);
        this.on('uploadAccept', this._onUploadAccept, this);
        if (typeof events != 'undefined') {
            for (var item in events) {
                this.on(item, events[item]);
            }
        }
    };
    cls.prototype.on = function (msgName, callback, scope) {
        if (!$.isExist(scope)) {
            scope = this;
        }
        this.$msg.on(msgName + this.msgid, $.proxy(callback, scope));
    };
    cls.prototype.off = function (msgName, callback) {
        this.$msg.on(msgName + this.msgid, callback);
    };
    cls.prototype.trigger = function (msgName, data) {
        this.$msg.trigger(msgName + this.msgid, data);
    };
    cls.prototype.addOrmFile = function (arg) {
        ///<param  name="arg"  value= "cssArgs.clsAppUploader.addOrmFile"></param>
        var arr = [];
        if ($.isArray(arg)) {
            arr = arg;
        }
        else {
            arr.push(arg);
        }
        for (var i = 0; i < arr.length; i++) {
            arg = arr[i];
            arg.id = arg.id || appTool.uuid();
            var a = {
                id: arg.id,
                opType: "new",
                ///<field  type="String">文件名</field>
                fileName: $.isExist(arg.realName) ? arg.realName : fileOp.getFileName(arg.filePath),
                ///<field  type="String">文件扩展名</field>
                fileExt: fileOp.getFileExt(arg.filePath),
                ///<field type="Number">文件大小</field>
                fileSize: 5,
                ///<field type="Number">序号</field>
                orderNum: 1,
                ///<field type="String">文件缩略图Url地址</field>
                thumbnailUrl: "",
                ///<field type="String">文件本身的Url地址</field>
                lastModifiedDate: "",
                ///<field  type="clsAppUploader">uploader对象文件</field>
                _uploaderFile: null,
                ///<field  type="String">文件传输类型</field>
                httpType: ""
            };
            a.fileRemarks = a.fileName + "." + a.fileExt;
            fileOp.getSizeByPath({
                filePath: arg.filePath,
                callback: sizeCall
            });
            var the = this;
            function sizeCall(evt, redata) {
                a.fileSize = redata;
                //var opt = $.extend({}, the.options);
                a.filePath = arg.filePath;
                var uploader = new ormUploader(arg);
                uploader.option.fileInfo = a;
                uploader.onProgress($.proxy(the._onFileUplaoderProgress, the));
                uploader.onStart($.proxy(the._onFileUplaoderStart, the));
                uploader.onStop($.proxy(the._onFileUplaoderEnd, the));
                a._uploaderFile = uploader;
                the.fileArr.push(uploader);
                the.trigger(cls.enumEvt.fileQueued, a);
            }
            ;
        }
    };
    var _removeFile = function (id, arr) {
        ///<param  name="arr"  type="Array"></param>
        var arg = "";
        var i = true;
        $.each(arr, function (index, item) {
            if (i && item.option.id == id.option.id) {
                arr.splice(index, 1);
                arg = item;
                i = false;
                return;
            }
        });
        return arg;
    };
    cls.prototype.removeFile = function (id) {
        var ret = _removeFile(id, this.fileArr);
        this.trigger(cls.enumEvt.fileDequeued, ret.option.fileInfo);
    };
    cls.prototype.upload = function () {
        if (this.fileArr.length == 0) {
            this.trigger(cls.enumEvt.uploadFinished);
            return;
        }
        //this.trigger(cls.enumEvt.startUpload,);//上传全部文件
        this.fileArr[0].upload();
        //$.each(this.fileArr,function(index,item)
        //{
        //    the.uploadIndex=index;
        //    ///<param name="item" type="clsOrmFileUploader"></param>
        //    item.upload();
        //})
    };
    cls.prototype._onFileUplaoderStart = function (evt, arg) {
        this.options.errorNum = 0;
        this.trigger(cls.enumEvt.uploadStart, evt.data.option.fileInfo);
    };
    cls.prototype._onFileUplaoderEnd = function (evt, arg) {
        //文件上传结束
        var a = { file: evt.data.option.fileInfo };
        if (arg.success) {
            a.data = arg.message;
            a.file._uploaderFile = undefined;
            this.trigger(cls.enumEvt.uploadSuccess, a);
            this.fileArr.splice(0, 1);
            this.upload();
        }
        else {
            this.options.errorNum = this.options.errorNum++ || 1;
            if (this.options.errorNum == 2) {
                a.data = arg;
                this.trigger(cls.enumEvt.uploadError, arg);
            }
        }
    };
    cls.prototype._onFileUplaoderProgress = function (evt, arg) {
        var a = {
            file: evt.data.option.fileInfo,
            data: arg
        };
        //没有成功！！
        this.trigger(cls.enumEvt.uploadProgress, a);
    };
    cls.prototype._openFileDlg = function (arg) {
        ///<param  name="arg" value="cssArgs.clsFileUploader.OpenFileDlg"></param>
        var the = this;
        if (arg.filePath == "startVideo") { //打开摄像头，录视频
            var args = {
                callback: function (e, data) {
                    var path = data.path;
                    var file = {
                        filePath: data.path,
                        realName: arg.realName
                    };
                    the.addOrmFile(file);
                },
                params: {
                    maxDuration: appTool.getSettingData().video.maxDuration,
                    qualityType: appTool.getSettingData().video.qualityType,
                    bitRateType: appTool.getSettingData().video.bitRateType,
                    fileType: appTool.getSettingData().video.fileType,
                    needThumb: appTool.getSettingData().video.needThumb
                },
                data: {
                    id: "videoRecordBtn"
                }
            };
            video.record(args);
        }
        else if (arg.filePath == "startPhoto") { //照相
            var args = {
                callback: function (e, data) {
                    var file = {
                        filePath: data,
                        realName: arg.realName
                    };
                    the.addOrmFile(file);
                },
                // comtextareass: appTool.getSettingData().image.comtextareass,
                // quality:  appTool.getSettingData().image.quality,
                // value: { "width": appTool.getSettingData().image.imgWidth, 
                //     "height": appTool.getSettingData().image.imgHeight },
                data: { id: "cameraOpenBtn" }
            };
            camera.open(args);
        }
        else if (arg.filePath == "startAudio") { //录音
            var fileType = appTool.getSettingData().voice.mode;
            var mode = 2;
            if (fileType == "mp3") {
                mode = 2;
            }
            var args = {
                callback: function (e, data) {
                    var path = data.data;
                    var file = {
                        filePath: path,
                        realName: arg.realName
                    };
                    the.addOrmFile(file);
                },
                param: {
                    mode: mode,
                    fileName: "1111"
                },
                data: {
                    id: "audioRecordBtn"
                }
            };
            audio.record(args);
        }
        else if (arg.filePath == "video" || arg.filePath == "video" || arg.filePath.indexOf("/") > -1) { //打开filedlg浏览文件
            arg.callback = function (data) {
                if ($.isString(data) && data.length > 6) {
                    this.filePath = data;
                    the.addOrmFile(this);
                }
                else if ($.isArray(data)) {
                    $.each(data, function (index, item) {
                        the.addOrmFile(item);
                    });
                }
                ;
            };
            //如果是
            fileOp.openFileDlg(arg);
        }
        else if (arg.filePath == "audio" || arg.filePath == "audio" || arg.filePath.indexOf("/") > -1) { //打开filedlg浏览文件
            arg.callback = function (data) {
                if ($.isString(data) && data.length > 6) {
                    this.filePath = data;
                    the.addOrmFile(this);
                }
                else if ($.isArray(data)) {
                    $.each(data, function (index, item) {
                        the.addOrmFile(item);
                    });
                }
                ;
            };
            //如果是
            fileOp.openFileDlg(arg);
        }
        else if (arg.filePath == "camera" || arg.filePath == "camera" || arg.filePath.indexOf("/") > -1) { //打开filedlg浏览文件
            arg.callback = function (data) {
                if ($.isString(data) && data.length > 6) {
                    this.filePath = data;
                    the.addOrmFile(this);
                }
                else if ($.isArray(data)) {
                    $.each(data, function (index, item) {
                        the.addOrmFile(item);
                    });
                }
                ;
            };
            //如果是
            fileOp.openFileDlg(arg);
        }
        else if (arg.filePath == "systemImage") {
            var args = {
                callback: function (e, data) {
                    var fileArray = [];
                    fileArray = JSON.parse(data.data);
                    for (var i = 0; i < fileArray.length; i++) {
                        var file = {
                            filePath: fileArray[i]
                        };
                        the.addOrmFile(file);
                    }
                },
                data: {
                    id: "videoRecordBtn"
                }
            };
            image.openPicker(args);
        }
        else if (arg.filePath == "systemVideo") {
            var args = {
                callback: function (e, data) {
                    if (data.videoPath) {
                        var file = {
                            filePath: data.videoPath
                        };
                        the.addOrmFile(file);
                    }
                },
                needBase64: 1
            };
            image.openVideoPicker(args);
        }
        else { //打开filedlg浏览文件
            arg.callback = function (data) {
                if ($.isString(data) && data.length > 6) {
                    this.filePath = data;
                    the.addOrmFile(this);
                }
                else if ($.isArray(data)) {
                    $.each(data, function (index, item) {
                        the.addOrmFile(item);
                    });
                }
                ;
            };
            //如果是
            arg.ends = arg.filePath;
            fileOp.openFileDlg(arg);
        }
    };
    cls.prototype._onSendFileBefore = function (object, data, headers) {
        //var me = this;
        //if (typeof object === "undefined") {
        //    headers = {};
        //} else {
        //    if (object.file) {
        //        var f = object.file;
        //        data["fileId"] = f.uuid;
        //        data["chunk"] = object.chunk;
        //        if (object.chunk == 0) {
        //            data["md5"] = f.statusText;
        //            data["fileExt"] = f.ext;
        //            data["fileName"] = f.name.substring(0, f.name.lastIndexOf("."));
        //            data["chunks"] = object.chunks;
        //            data["chunkSize"] = this.options.chunkSize;
        //            data["fileSize"] = f.size;
        //            data['httpType'] = f.type;
        //            data['lastModifiedDate'] = f.lastModifiedDate;
        //            if (typeof f.thumbnail != "undefined") {
        //                data["thumbnail"] = f.thumbnail;
        //                data['thumbWidth'] = this.options.thumb.width;
        //                data['thumbHeight'] = this.options.thumb.height;
        //                data['thumbType'] = this.options.thumb.type;
        //            }
        //        }
        //    }
        //}
    };
    cls.prototype._onUploadAccept = function (obj, ret) {
        return ret.model.success;
    };
    cls.enumEvt = {
        /*参数说明	items {DataTransferItemList}DataTransferItem
        描述 阻止此事件可以拒绝某些类型的文件拖入进来。目前只有 chrome 提供这样的 API，且只能通过 mime-type 验证。
        */
        dndAccept: 'dndAccept',
        /*参数说明	file {File}File对象
          描述 当文件被加入队列之前触发，此事件的handler返回值为false，则此文件不会被添加进入队列
          */
        beforeFileQueued: 'beforeFileQueued',
        /*参数说明	file {File}File对象
          描述 当文件被加入队列以后触发。
          */
        fileQueued: 'fileQueued',
        /*参数说明	files {File}数组，内容为原始File(lib/File）对象。
          描述 当一批文件添加进队列以后触发。
          */
        filesQueued: 'filesQueued',
        /*参数说明	file {File}File对象
          描述当文件被移除队列后触发。
          */
        fileDequeued: 'fileDequeued',
        /*参数说明
       描述 当 uploader 被重置的时候触发。
       */
        reset: 'reset',
        /*参数说明
       描述 当开始上传流程时触发。
       */
        startUpload: 'startUpload',
        /*参数说明
       描述当开始上传流程暂停时触发。
       */
        stopUpload: 'stopUpload',
        /*参数说明
       描述当所有文件上传结束时触发。
       */
        uploadFinished: 'uploadFinished',
        /*参数说明	file {File}File对象
        描述某个文件开始上传前触发，一个文件只会触发一次。
           */
        uploadStart: 'uploadStart',
        /*参数说明	object {Object}
              data {Object}默认的上传参数，可以扩展此对象来控制上传参数。
              headers {Object}可以扩展此对象来控制上传头部。
     描述当某个文件的分块在发送前触发，主要用来询问是否要添加附带参数，大文件在开起分片上传的前提下此事件可能会触发多次。
      */
        uploadBeforeSend: 'uploadBeforeSend',
        /*参数说明	object {Object}
            ret {Object}服务端的返回数据，json格式，如果服务端不是json格式，从ret._raw中取数据，自行解析。
            描述  当某个文件上传到服务端响应后，会派送此事件来询问服务端响应是否有效。如果此事件handler返回值为false, 则此文件将派送server类型的uploadError事件。
        */
        uploadAccept: 'uploadAccept',
        /*参数说明	file {File}File对象
            percentage {Number}上传进度
         描述   上传过程中触发，携带上传进度。
        */
        uploadProgress: 'uploadProgress',
        /*参数说明	file {File}File对象
            reason {String}出错的code
          描述  当文件上传出错时触发。
       */
        uploadError: 'uploadError',
        /*参数说明	file {File}File对象
            response {Object}服务端返回的数据
         描述   当文件上传成功时触发。*/
        uploadSuccess: 'uploadSuccess',
        /*参数说明	file {File} [可选]File对象
        描述  不管成功或者失败，文件上传完成时触发。
       */
        uploadComplete: 'uploadComplete',
        /*参数说明	type {String}错误类型。
         描述:当validate不通过时，会以派送错误事件的形式通知调用者。通过upload.on('error', handler)可以捕获到此类错误，目前有以下错误会在特定的情况下派送错来。
                Q_EXCEED_NUM_LIMIT 在设置了fileNumLimit且尝试给uploader添加的文件数量超出这个值时派送。
                Q_EXCEED_SIZE_LIMIT 在设置了Q_EXCEED_SIZE_LIMIT且尝试给uploader添加的文件总大小超出这个值时派送。
                Q_TYPE_DENIED 当文件类型不满足时触发。。
       */
        error: 'error'
    };
    cssOrm.declare("clsAppUploader", cls, false);
    return cls;
});

define("RxmFileExplorer", ["RxmFileMgr"], function (c) {
    ///<param  name="c"  type="clsFileMgr"><param>
    if (typeof rxm_file == 'undefined') {
        return;
    }
    function clsFileExplorer() {
        ///<summary>explorer文件管理器插件</summary>
    }
    clsFileExplorer.prototype.openFileDlg = function (args) {
        ///<summary>文件管理器</summary>
        ///<param  name="path" type="String">必选 文件路径 </param>
        cssOrm.on({ callback: args.callback, data: args.data, msgType: "explorerOpen", one: true, id: "" });
        if (args.ends) {
            c.openFileDlg(args.path, args.ends);
        }
        else {
            c.openFileDlg(args.path);
        }
    };
    clsFileExplorer.prototype.getSizeByPath = function (args) {
        ///<summary>通过路径获取文件大小的回调方法</summary>
        ///<param  name="id" type="String">必选 唯一标识符,与回调方法中id对应 </param>
        ///<param  name="path" type="String">必选 文件路径 </param>
        cssOrm.on({ callback: args.callback, data: args.data, id: args.id, msgType: "getFileSizeByPath", one: true });
        c.getSizeByPath(args.id, args.path);
    };
    clsFileExplorer.prototype.getFileLastModifiedTime = function (args) {
        ///<summary>获取文件或文件夹的最后修改时间</summary>
        ///<param  name="id" type="String">必选 文件唯一标识符 </param>
        ///<param  name="path" type="String">必选 文件路径 </param>
        cssOrm.on({ callback: args.callback, data: args.data, id: args.id, msgType: "getFileCreateTime", one: true });
        c.getFileLastModifiedTime(args.id, args.path);
    };
    clsFileExplorer.prototype.curPath = function (args) {
        ///<summary>获取文件路径</summary>
        ///<param  name="id" type="Number">必选 文件唯一标识符 </param>
        cssOrm.on({ callback: args.callback, data: args.data, id: args.id, msgType: "getFilePath", one: true });
        c.curPath(args.id);
    };
    clsFileExplorer.prototype.curRealPath = function (args) {
        ///<summary>获取文件实际路径</summary>
        ///<param  name="path" type="String">必选 文件路径 </param>
        cssOrm.on({ callback: args.callback, data: args.data, id: "", msgType: "getFileRealPath", one: true });
        c.curRealPath(args.path);
    };
    clsFileExplorer._onopenFileDlgBlock = function (path) {
        ///<summary> 文件管理器回调方法</summary>
        ///<param  name="path" type="String">返回文件管理器里选择的文件路径 </param>
        var fileName = path.substring(path.lastIndexOf('/') + 1);
        var fileExt = fileName.substring(fileName.lastIndexOf('.') + 1);
        var cbData = {
            filePath: path,
            fileName: fileName,
            fileExt: fileExt
        };
        cssOrm.trigger("explorerOpen", cbData);
    };
    clsFileExplorer._ongetSizeByPathBlock = function (opID, len) {
        ///<summary> 通过路径获取文件大小的回调方法 </summary>
        ///<param  name="opId" type="String">文件ID</param>
        ///<param  name="len" type=" Number">文件大小 单位为B 文件不存在时返回-1</param>
        var cbData = {
            opId: opID,
            fileSize: len
        };
        cssOrm.trigger("getFileSizeByPath", opID, cbData);
    };
    clsFileExplorer._ongetFileLastModifiedTimeBlock = function (opID, data) {
        ///<summary> 通过路径获取文件大小的回调方法 </summary>
        ///<param  name="opID" type="Number">文件ID</param>
        ///<param  name="data" type=" String">返回创建时间，yyyy-MM-dd HH:mm:ss</param>
        var cbData = {
            opId: opID,
            createTime: data
        };
        cssOrm.trigger("getFileCreateTime", cbData);
    };
    clsFileExplorer._oncurPathBlock = function (opID, data) {
        ///<summary> 通过路径获取文件大小的回调方法 </summary>
        ///<param  name="opID" type="Number">文件ID</param>
        ///<param  name="data" type=" String">返回文件的路径</param>
        var cbData = {
            opId: opID,
            filePath: data
        };
        cssOrm.trigger("getFilePath", opID, cbData);
    };
    clsFileExplorer._oncurRealBlock = function (data) {
        ///<summary> 通过路径获取文件大小的回调方法 </summary>
        ///<param  name="data" type=" String">返回文件的真实路径</param>
        var cbData = {
            fileRealPath: data
        };
        cssOrm.trigger("getFileRealPath", cbData);
    };
    rxm_file.openFileDlgBlock = clsFileExplorer._onopenFileDlgBlock;
    rxm_file.getSizeByPathBlock = clsFileExplorer._ongetSizeByPathBlock;
    rxm_file.getFileLastModifiedTimeBlock = clsFileExplorer._ongetFileLastModifiedTimeBlock;
    rxm_file.curPathBlock = clsFileExplorer._oncurPathBlock;
    rxm_file.curRealBlock = clsFileExplorer._oncurRealBlock;
    cssOrm.declare("clsFileExplorer", clsFileExplorer);
    return clsFileExplorer;
});

//# sourceMappingURL=rxmwidget_2.1.1.js.map
